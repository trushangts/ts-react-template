{"ast":null,"code":"/*!\n * Bootstrap Colorpicker v2.5.2\n * https://itsjavi.com/bootstrap-colorpicker/\n *\n * Originally written by (c) 2012 Stefan Petre\n * Licensed under the Apache License v2.0\n * http://www.apache.org/licenses/LICENSE-2.0.txt\n *\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define([\"jquery\"], function (jq) {\n      return factory(jq);\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(require(\"jquery\"));\n  } else if (jQuery && !jQuery.fn.colorpicker) {\n    factory(jQuery);\n  }\n})(this, function ($) {\n  'use strict';\n  /**\n   * Color manipulation helper class\n   *\n   * @param {Object|String} [val]\n   * @param {Object} [predefinedColors]\n   * @param {String|null} [fallbackColor]\n   * @param {String|null} [fallbackFormat]\n   * @param {Boolean} [hexNumberSignPrefix]\n   * @constructor\n   */\n\n  var Color = function Color(val, predefinedColors, fallbackColor, fallbackFormat, hexNumberSignPrefix) {\n    this.fallbackValue = fallbackColor ? fallbackColor && typeof fallbackColor.h !== 'undefined' ? fallbackColor : this.value = {\n      h: 0,\n      s: 0,\n      b: 0,\n      a: 1\n    } : null;\n    this.fallbackFormat = fallbackFormat ? fallbackFormat : 'rgba';\n    this.hexNumberSignPrefix = hexNumberSignPrefix === true;\n    this.value = this.fallbackValue;\n    this.origFormat = null; // original string format\n\n    this.predefinedColors = predefinedColors ? predefinedColors : {}; // We don't want to share aliases across instances so we extend new object\n\n    this.colors = $.extend({}, Color.webColors, this.predefinedColors);\n\n    if (val) {\n      if (typeof val.h !== 'undefined') {\n        this.value = val;\n      } else {\n        this.setColor(String(val));\n      }\n    }\n\n    if (!this.value) {\n      // Initial value is always black if no arguments are passed or val is empty\n      this.value = {\n        h: 0,\n        s: 0,\n        b: 0,\n        a: 1\n      };\n    }\n  };\n\n  Color.webColors = {\n    // 140 predefined colors from the HTML Colors spec\n    \"aliceblue\": \"f0f8ff\",\n    \"antiquewhite\": \"faebd7\",\n    \"aqua\": \"00ffff\",\n    \"aquamarine\": \"7fffd4\",\n    \"azure\": \"f0ffff\",\n    \"beige\": \"f5f5dc\",\n    \"bisque\": \"ffe4c4\",\n    \"black\": \"000000\",\n    \"blanchedalmond\": \"ffebcd\",\n    \"blue\": \"0000ff\",\n    \"blueviolet\": \"8a2be2\",\n    \"brown\": \"a52a2a\",\n    \"burlywood\": \"deb887\",\n    \"cadetblue\": \"5f9ea0\",\n    \"chartreuse\": \"7fff00\",\n    \"chocolate\": \"d2691e\",\n    \"coral\": \"ff7f50\",\n    \"cornflowerblue\": \"6495ed\",\n    \"cornsilk\": \"fff8dc\",\n    \"crimson\": \"dc143c\",\n    \"cyan\": \"00ffff\",\n    \"darkblue\": \"00008b\",\n    \"darkcyan\": \"008b8b\",\n    \"darkgoldenrod\": \"b8860b\",\n    \"darkgray\": \"a9a9a9\",\n    \"darkgreen\": \"006400\",\n    \"darkkhaki\": \"bdb76b\",\n    \"darkmagenta\": \"8b008b\",\n    \"darkolivegreen\": \"556b2f\",\n    \"darkorange\": \"ff8c00\",\n    \"darkorchid\": \"9932cc\",\n    \"darkred\": \"8b0000\",\n    \"darksalmon\": \"e9967a\",\n    \"darkseagreen\": \"8fbc8f\",\n    \"darkslateblue\": \"483d8b\",\n    \"darkslategray\": \"2f4f4f\",\n    \"darkturquoise\": \"00ced1\",\n    \"darkviolet\": \"9400d3\",\n    \"deeppink\": \"ff1493\",\n    \"deepskyblue\": \"00bfff\",\n    \"dimgray\": \"696969\",\n    \"dodgerblue\": \"1e90ff\",\n    \"firebrick\": \"b22222\",\n    \"floralwhite\": \"fffaf0\",\n    \"forestgreen\": \"228b22\",\n    \"fuchsia\": \"ff00ff\",\n    \"gainsboro\": \"dcdcdc\",\n    \"ghostwhite\": \"f8f8ff\",\n    \"gold\": \"ffd700\",\n    \"goldenrod\": \"daa520\",\n    \"gray\": \"808080\",\n    \"green\": \"008000\",\n    \"greenyellow\": \"adff2f\",\n    \"honeydew\": \"f0fff0\",\n    \"hotpink\": \"ff69b4\",\n    \"indianred\": \"cd5c5c\",\n    \"indigo\": \"4b0082\",\n    \"ivory\": \"fffff0\",\n    \"khaki\": \"f0e68c\",\n    \"lavender\": \"e6e6fa\",\n    \"lavenderblush\": \"fff0f5\",\n    \"lawngreen\": \"7cfc00\",\n    \"lemonchiffon\": \"fffacd\",\n    \"lightblue\": \"add8e6\",\n    \"lightcoral\": \"f08080\",\n    \"lightcyan\": \"e0ffff\",\n    \"lightgoldenrodyellow\": \"fafad2\",\n    \"lightgrey\": \"d3d3d3\",\n    \"lightgreen\": \"90ee90\",\n    \"lightpink\": \"ffb6c1\",\n    \"lightsalmon\": \"ffa07a\",\n    \"lightseagreen\": \"20b2aa\",\n    \"lightskyblue\": \"87cefa\",\n    \"lightslategray\": \"778899\",\n    \"lightsteelblue\": \"b0c4de\",\n    \"lightyellow\": \"ffffe0\",\n    \"lime\": \"00ff00\",\n    \"limegreen\": \"32cd32\",\n    \"linen\": \"faf0e6\",\n    \"magenta\": \"ff00ff\",\n    \"maroon\": \"800000\",\n    \"mediumaquamarine\": \"66cdaa\",\n    \"mediumblue\": \"0000cd\",\n    \"mediumorchid\": \"ba55d3\",\n    \"mediumpurple\": \"9370d8\",\n    \"mediumseagreen\": \"3cb371\",\n    \"mediumslateblue\": \"7b68ee\",\n    \"mediumspringgreen\": \"00fa9a\",\n    \"mediumturquoise\": \"48d1cc\",\n    \"mediumvioletred\": \"c71585\",\n    \"midnightblue\": \"191970\",\n    \"mintcream\": \"f5fffa\",\n    \"mistyrose\": \"ffe4e1\",\n    \"moccasin\": \"ffe4b5\",\n    \"navajowhite\": \"ffdead\",\n    \"navy\": \"000080\",\n    \"oldlace\": \"fdf5e6\",\n    \"olive\": \"808000\",\n    \"olivedrab\": \"6b8e23\",\n    \"orange\": \"ffa500\",\n    \"orangered\": \"ff4500\",\n    \"orchid\": \"da70d6\",\n    \"palegoldenrod\": \"eee8aa\",\n    \"palegreen\": \"98fb98\",\n    \"paleturquoise\": \"afeeee\",\n    \"palevioletred\": \"d87093\",\n    \"papayawhip\": \"ffefd5\",\n    \"peachpuff\": \"ffdab9\",\n    \"peru\": \"cd853f\",\n    \"pink\": \"ffc0cb\",\n    \"plum\": \"dda0dd\",\n    \"powderblue\": \"b0e0e6\",\n    \"purple\": \"800080\",\n    \"red\": \"ff0000\",\n    \"rosybrown\": \"bc8f8f\",\n    \"royalblue\": \"4169e1\",\n    \"saddlebrown\": \"8b4513\",\n    \"salmon\": \"fa8072\",\n    \"sandybrown\": \"f4a460\",\n    \"seagreen\": \"2e8b57\",\n    \"seashell\": \"fff5ee\",\n    \"sienna\": \"a0522d\",\n    \"silver\": \"c0c0c0\",\n    \"skyblue\": \"87ceeb\",\n    \"slateblue\": \"6a5acd\",\n    \"slategray\": \"708090\",\n    \"snow\": \"fffafa\",\n    \"springgreen\": \"00ff7f\",\n    \"steelblue\": \"4682b4\",\n    \"tan\": \"d2b48c\",\n    \"teal\": \"008080\",\n    \"thistle\": \"d8bfd8\",\n    \"tomato\": \"ff6347\",\n    \"turquoise\": \"40e0d0\",\n    \"violet\": \"ee82ee\",\n    \"wheat\": \"f5deb3\",\n    \"white\": \"ffffff\",\n    \"whitesmoke\": \"f5f5f5\",\n    \"yellow\": \"ffff00\",\n    \"yellowgreen\": \"9acd32\",\n    \"transparent\": \"transparent\"\n  };\n  Color.prototype = {\n    constructor: Color,\n    colors: {},\n    // merged web and predefined colors\n    predefinedColors: {},\n\n    /**\n     * @return {Object}\n     */\n    getValue: function getValue() {\n      return this.value;\n    },\n\n    /**\n     * @param {Object} val\n     */\n    setValue: function setValue(val) {\n      this.value = val;\n    },\n    _sanitizeNumber: function _sanitizeNumber(val) {\n      if (typeof val === 'number') {\n        return val;\n      }\n\n      if (isNaN(val) || val === null || val === '' || val === undefined) {\n        return 1;\n      }\n\n      if (val === '') {\n        return 0;\n      }\n\n      if (typeof val.toLowerCase !== 'undefined') {\n        if (val.match(/^\\./)) {\n          val = \"0\" + val;\n        }\n\n        return Math.ceil(parseFloat(val) * 100) / 100;\n      }\n\n      return 1;\n    },\n    isTransparent: function isTransparent(strVal) {\n      if (!strVal || !(typeof strVal === 'string' || strVal instanceof String)) {\n        return false;\n      }\n\n      strVal = strVal.toLowerCase().trim();\n      return strVal === 'transparent' || strVal.match(/#?00000000/) || strVal.match(/(rgba|hsla)\\(0,0,0,0?\\.?0\\)/);\n    },\n    rgbaIsTransparent: function rgbaIsTransparent(rgba) {\n      return rgba.r === 0 && rgba.g === 0 && rgba.b === 0 && rgba.a === 0;\n    },\n    // parse a string to HSB\n\n    /**\n     * @protected\n     * @param {String} strVal\n     * @returns {boolean} Returns true if it could be parsed, false otherwise\n     */\n    setColor: function setColor(strVal) {\n      strVal = strVal.toLowerCase().trim();\n\n      if (strVal) {\n        if (this.isTransparent(strVal)) {\n          this.value = {\n            h: 0,\n            s: 0,\n            b: 0,\n            a: 0\n          };\n          return true;\n        } else {\n          var parsedColor = this.parse(strVal);\n\n          if (parsedColor) {\n            this.value = this.value = {\n              h: parsedColor.h,\n              s: parsedColor.s,\n              b: parsedColor.b,\n              a: parsedColor.a\n            };\n\n            if (!this.origFormat) {\n              this.origFormat = parsedColor.format;\n            }\n          } else if (this.fallbackValue) {\n            // if parser fails, defaults to fallbackValue if defined, otherwise the value won't be changed\n            this.value = this.fallbackValue;\n          }\n        }\n      }\n\n      return false;\n    },\n    setHue: function setHue(h) {\n      this.value.h = 1 - h;\n    },\n    setSaturation: function setSaturation(s) {\n      this.value.s = s;\n    },\n    setBrightness: function setBrightness(b) {\n      this.value.b = 1 - b;\n    },\n    setAlpha: function setAlpha(a) {\n      this.value.a = Math.round(parseInt((1 - a) * 100, 10) / 100 * 100) / 100;\n    },\n    toRGB: function toRGB(h, s, b, a) {\n      if (arguments.length === 0) {\n        h = this.value.h;\n        s = this.value.s;\n        b = this.value.b;\n        a = this.value.a;\n      }\n\n      h *= 360;\n      var R, G, B, X, C;\n      h = h % 360 / 60;\n      C = b * s;\n      X = C * (1 - Math.abs(h % 2 - 1));\n      R = G = B = b - C;\n      h = ~~h;\n      R += [C, X, 0, 0, X, C][h];\n      G += [X, C, C, X, 0, 0][h];\n      B += [0, 0, X, C, C, X][h];\n      return {\n        r: Math.round(R * 255),\n        g: Math.round(G * 255),\n        b: Math.round(B * 255),\n        a: a\n      };\n    },\n    toHex: function toHex(ignoreFormat, h, s, b, a) {\n      if (arguments.length <= 1) {\n        h = this.value.h;\n        s = this.value.s;\n        b = this.value.b;\n        a = this.value.a;\n      }\n\n      var prefix = '#';\n      var rgb = this.toRGB(h, s, b, a);\n\n      if (this.rgbaIsTransparent(rgb)) {\n        return 'transparent';\n      }\n\n      if (!ignoreFormat) {\n        prefix = this.hexNumberSignPrefix ? '#' : '';\n      }\n\n      var hexStr = prefix + ((1 << 24) + (parseInt(rgb.r) << 16) + (parseInt(rgb.g) << 8) + parseInt(rgb.b)).toString(16).slice(1);\n      return hexStr;\n    },\n    toHSL: function toHSL(h, s, b, a) {\n      if (arguments.length === 0) {\n        h = this.value.h;\n        s = this.value.s;\n        b = this.value.b;\n        a = this.value.a;\n      }\n\n      var H = h,\n          L = (2 - s) * b,\n          S = s * b;\n\n      if (L > 0 && L <= 1) {\n        S /= L;\n      } else {\n        S /= 2 - L;\n      }\n\n      L /= 2;\n\n      if (S > 1) {\n        S = 1;\n      }\n\n      return {\n        h: isNaN(H) ? 0 : H,\n        s: isNaN(S) ? 0 : S,\n        l: isNaN(L) ? 0 : L,\n        a: isNaN(a) ? 0 : a\n      };\n    },\n    toAlias: function toAlias(r, g, b, a) {\n      var c,\n          rgb = arguments.length === 0 ? this.toHex(true) : this.toHex(true, r, g, b, a); // support predef. colors in non-hex format too, as defined in the alias itself\n\n      var original = this.origFormat === 'alias' ? rgb : this.toString(false, this.origFormat);\n\n      for (var alias in this.colors) {\n        c = this.colors[alias].toLowerCase().trim();\n\n        if (c === rgb || c === original) {\n          return alias;\n        }\n      }\n\n      return false;\n    },\n    RGBtoHSB: function RGBtoHSB(r, g, b, a) {\n      r /= 255;\n      g /= 255;\n      b /= 255;\n      var H, S, V, C;\n      V = Math.max(r, g, b);\n      C = V - Math.min(r, g, b);\n      H = C === 0 ? null : V === r ? (g - b) / C : V === g ? (b - r) / C + 2 : (r - g) / C + 4;\n      H = (H + 360) % 6 * 60 / 360;\n      S = C === 0 ? 0 : C / V;\n      return {\n        h: this._sanitizeNumber(H),\n        s: S,\n        b: V,\n        a: this._sanitizeNumber(a)\n      };\n    },\n    HueToRGB: function HueToRGB(p, q, h) {\n      if (h < 0) {\n        h += 1;\n      } else if (h > 1) {\n        h -= 1;\n      }\n\n      if (h * 6 < 1) {\n        return p + (q - p) * h * 6;\n      } else if (h * 2 < 1) {\n        return q;\n      } else if (h * 3 < 2) {\n        return p + (q - p) * (2 / 3 - h) * 6;\n      } else {\n        return p;\n      }\n    },\n    HSLtoRGB: function HSLtoRGB(h, s, l, a) {\n      if (s < 0) {\n        s = 0;\n      }\n\n      var q;\n\n      if (l <= 0.5) {\n        q = l * (1 + s);\n      } else {\n        q = l + s - l * s;\n      }\n\n      var p = 2 * l - q;\n      var tr = h + 1 / 3;\n      var tg = h;\n      var tb = h - 1 / 3;\n      var r = Math.round(this.HueToRGB(p, q, tr) * 255);\n      var g = Math.round(this.HueToRGB(p, q, tg) * 255);\n      var b = Math.round(this.HueToRGB(p, q, tb) * 255);\n      return [r, g, b, this._sanitizeNumber(a)];\n    },\n\n    /**\n     * @param {String} strVal\n     * @returns {Object} Object containing h,s,b,a,format properties or FALSE if failed to parse\n     */\n    parse: function parse(strVal) {\n      if (arguments.length === 0) {\n        return false;\n      }\n\n      var that = this,\n          result = false,\n          isAlias = typeof this.colors[strVal] !== 'undefined',\n          values,\n          format;\n\n      if (isAlias) {\n        strVal = this.colors[strVal].toLowerCase().trim();\n      }\n\n      $.each(this.stringParsers, function (i, parser) {\n        var match = parser.re.exec(strVal);\n        values = match && parser.parse.apply(that, [match]);\n\n        if (values) {\n          result = {};\n          format = isAlias ? 'alias' : parser.format ? parser.format : that.getValidFallbackFormat();\n\n          if (format.match(/hsla?/)) {\n            result = that.RGBtoHSB.apply(that, that.HSLtoRGB.apply(that, values));\n          } else {\n            result = that.RGBtoHSB.apply(that, values);\n          }\n\n          if (result instanceof Object) {\n            result.format = format;\n          }\n\n          return false; // stop iterating\n        }\n\n        return true;\n      });\n      return result;\n    },\n    getValidFallbackFormat: function getValidFallbackFormat() {\n      var formats = ['rgba', 'rgb', 'hex', 'hsla', 'hsl'];\n\n      if (this.origFormat && formats.indexOf(this.origFormat) !== -1) {\n        return this.origFormat;\n      }\n\n      if (this.fallbackFormat && formats.indexOf(this.fallbackFormat) !== -1) {\n        return this.fallbackFormat;\n      }\n\n      return 'rgba'; // By default, return a format that will not lose the alpha info\n    },\n\n    /**\n     *\n     * @param {string} [format] (default: rgba)\n     * @param {boolean} [translateAlias] Return real color for pre-defined (non-standard) aliases (default: false)\n     * @param {boolean} [forceRawValue] Forces hashtag prefix when getting hex color (default: false)\n     * @returns {String}\n     */\n    toString: function toString(forceRawValue, format, translateAlias) {\n      format = format || this.origFormat || this.fallbackFormat;\n      translateAlias = translateAlias || false;\n      var c = false;\n\n      switch (format) {\n        case 'rgb':\n          {\n            c = this.toRGB();\n\n            if (this.rgbaIsTransparent(c)) {\n              return 'transparent';\n            }\n\n            return 'rgb(' + c.r + ',' + c.g + ',' + c.b + ')';\n          }\n          break;\n\n        case 'rgba':\n          {\n            c = this.toRGB();\n            return 'rgba(' + c.r + ',' + c.g + ',' + c.b + ',' + c.a + ')';\n          }\n          break;\n\n        case 'hsl':\n          {\n            c = this.toHSL();\n            return 'hsl(' + Math.round(c.h * 360) + ',' + Math.round(c.s * 100) + '%,' + Math.round(c.l * 100) + '%)';\n          }\n          break;\n\n        case 'hsla':\n          {\n            c = this.toHSL();\n            return 'hsla(' + Math.round(c.h * 360) + ',' + Math.round(c.s * 100) + '%,' + Math.round(c.l * 100) + '%,' + c.a + ')';\n          }\n          break;\n\n        case 'hex':\n          {\n            return this.toHex(forceRawValue);\n          }\n          break;\n\n        case 'alias':\n          {\n            c = this.toAlias();\n\n            if (c === false) {\n              return this.toString(forceRawValue, this.getValidFallbackFormat());\n            }\n\n            if (translateAlias && !(c in Color.webColors) && c in this.predefinedColors) {\n              return this.predefinedColors[c];\n            }\n\n            return c;\n          }\n\n        default:\n          {\n            return c;\n          }\n          break;\n      }\n    },\n    // a set of RE's that can match strings and generate color tuples.\n    // from John Resig color plugin\n    // https://github.com/jquery/jquery-color/\n    stringParsers: [{\n      re: /rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*?\\)/,\n      format: 'rgb',\n      parse: function parse(execResult) {\n        return [execResult[1], execResult[2], execResult[3], 1];\n      }\n    }, {\n      re: /rgb\\(\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*?\\)/,\n      format: 'rgb',\n      parse: function parse(execResult) {\n        return [2.55 * execResult[1], 2.55 * execResult[2], 2.55 * execResult[3], 1];\n      }\n    }, {\n      re: /rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d*(?:\\.\\d+)?)\\s*)?\\)/,\n      format: 'rgba',\n      parse: function parse(execResult) {\n        return [execResult[1], execResult[2], execResult[3], execResult[4]];\n      }\n    }, {\n      re: /rgba\\(\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d*(?:\\.\\d+)?)\\s*)?\\)/,\n      format: 'rgba',\n      parse: function parse(execResult) {\n        return [2.55 * execResult[1], 2.55 * execResult[2], 2.55 * execResult[3], execResult[4]];\n      }\n    }, {\n      re: /hsl\\(\\s*(\\d*(?:\\.\\d+)?)\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*?\\)/,\n      format: 'hsl',\n      parse: function parse(execResult) {\n        return [execResult[1] / 360, execResult[2] / 100, execResult[3] / 100, execResult[4]];\n      }\n    }, {\n      re: /hsla\\(\\s*(\\d*(?:\\.\\d+)?)\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d*(?:\\.\\d+)?)\\s*)?\\)/,\n      format: 'hsla',\n      parse: function parse(execResult) {\n        return [execResult[1] / 360, execResult[2] / 100, execResult[3] / 100, execResult[4]];\n      }\n    }, {\n      re: /#?([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,\n      format: 'hex',\n      parse: function parse(execResult) {\n        return [parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16), 1];\n      }\n    }, {\n      re: /#?([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,\n      format: 'hex',\n      parse: function parse(execResult) {\n        return [parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16), 1];\n      }\n    }],\n    colorNameToHex: function colorNameToHex(name) {\n      if (typeof this.colors[name.toLowerCase()] !== 'undefined') {\n        return this.colors[name.toLowerCase()];\n      }\n\n      return false;\n    }\n  };\n  /*\n   * Default plugin options\n   */\n\n  var defaults = {\n    horizontal: false,\n    // horizontal mode layout ?\n    inline: false,\n    //forces to show the colorpicker as an inline element\n    color: false,\n    //forces a color\n    format: false,\n    //forces a format\n    input: 'input',\n    // children input selector\n    container: false,\n    // container selector\n    component: '.add-on, .input-group-addon',\n    // children component selector\n    fallbackColor: false,\n    // fallback color value. null = keeps current color.\n    fallbackFormat: 'hex',\n    // fallback color format\n    hexNumberSignPrefix: true,\n    // put a '#' (number sign) before hex strings\n    sliders: {\n      saturation: {\n        maxLeft: 100,\n        maxTop: 100,\n        callLeft: 'setSaturation',\n        callTop: 'setBrightness'\n      },\n      hue: {\n        maxLeft: 0,\n        maxTop: 100,\n        callLeft: false,\n        callTop: 'setHue'\n      },\n      alpha: {\n        maxLeft: 0,\n        maxTop: 100,\n        callLeft: false,\n        callTop: 'setAlpha'\n      }\n    },\n    slidersHorz: {\n      saturation: {\n        maxLeft: 100,\n        maxTop: 100,\n        callLeft: 'setSaturation',\n        callTop: 'setBrightness'\n      },\n      hue: {\n        maxLeft: 100,\n        maxTop: 0,\n        callLeft: 'setHue',\n        callTop: false\n      },\n      alpha: {\n        maxLeft: 100,\n        maxTop: 0,\n        callLeft: 'setAlpha',\n        callTop: false\n      }\n    },\n    template: '<div class=\"colorpicker dropdown-menu\">' + '<div class=\"colorpicker-saturation\"><i><b></b></i></div>' + '<div class=\"colorpicker-hue\"><i></i></div>' + '<div class=\"colorpicker-alpha\"><i></i></div>' + '<div class=\"colorpicker-color\"><div /></div>' + '<div class=\"colorpicker-selectors\"></div>' + '</div>',\n    align: 'right',\n    customClass: null,\n    // custom class added to the colorpicker element\n    colorSelectors: null // custom color aliases\n\n  };\n  /**\n   * Colorpicker component class\n   *\n   * @param {Object|String} element\n   * @param {Object} options\n   * @constructor\n   */\n\n  var Colorpicker = function Colorpicker(element, options) {\n    this.element = $(element).addClass('colorpicker-element');\n    this.options = $.extend(true, {}, defaults, this.element.data(), options);\n    this.component = this.options.component;\n    this.component = this.component !== false ? this.element.find(this.component) : false;\n\n    if (this.component && this.component.length === 0) {\n      this.component = false;\n    }\n\n    this.container = this.options.container === true ? this.element : this.options.container;\n    this.container = this.container !== false ? $(this.container) : false; // Is the element an input? Should we search inside for any input?\n\n    this.input = this.element.is('input') ? this.element : this.options.input ? this.element.find(this.options.input) : false;\n\n    if (this.input && this.input.length === 0) {\n      this.input = false;\n    } // Set HSB color\n\n\n    this.color = this.createColor(this.options.color !== false ? this.options.color : this.getValue());\n    this.format = this.options.format !== false ? this.options.format : this.color.origFormat;\n\n    if (this.options.color !== false) {\n      this.updateInput(this.color);\n      this.updateData(this.color);\n    }\n\n    this.disabled = false; // Setup picker\n\n    var $picker = this.picker = $(this.options.template);\n\n    if (this.options.customClass) {\n      $picker.addClass(this.options.customClass);\n    }\n\n    if (this.options.inline) {\n      $picker.addClass('colorpicker-inline colorpicker-visible');\n    } else {\n      $picker.addClass('colorpicker-hidden');\n    }\n\n    if (this.options.horizontal) {\n      $picker.addClass('colorpicker-horizontal');\n    }\n\n    if (['rgba', 'hsla', 'alias'].indexOf(this.format) !== -1 || this.options.format === false || this.getValue() === 'transparent') {\n      $picker.addClass('colorpicker-with-alpha');\n    }\n\n    if (this.options.align === 'right') {\n      $picker.addClass('colorpicker-right');\n    }\n\n    if (this.options.inline === true) {\n      $picker.addClass('colorpicker-no-arrow');\n    }\n\n    if (this.options.colorSelectors) {\n      var colorpicker = this,\n          selectorsContainer = colorpicker.picker.find('.colorpicker-selectors');\n\n      if (selectorsContainer.length > 0) {\n        $.each(this.options.colorSelectors, function (name, color) {\n          var $btn = $('<i />').addClass('colorpicker-selectors-color').css('background-color', color).data('class', name).data('alias', name);\n          $btn.on('mousedown.colorpicker touchstart.colorpicker', function (event) {\n            event.preventDefault();\n            colorpicker.setValue(colorpicker.format === 'alias' ? $(this).data('alias') : $(this).css('background-color'));\n          });\n          selectorsContainer.append($btn);\n        });\n        selectorsContainer.show().addClass('colorpicker-visible');\n      }\n    } // Prevent closing the colorpicker when clicking on itself\n\n\n    $picker.on('mousedown.colorpicker touchstart.colorpicker', $.proxy(function (e) {\n      if (e.target === e.currentTarget) {\n        e.preventDefault();\n      }\n    }, this)); // Bind click/tap events on the sliders\n\n    $picker.find('.colorpicker-saturation, .colorpicker-hue, .colorpicker-alpha').on('mousedown.colorpicker touchstart.colorpicker', $.proxy(this.mousedown, this));\n    $picker.appendTo(this.container ? this.container : $('body')); // Bind other events\n\n    if (this.input !== false) {\n      this.input.on({\n        'keyup.colorpicker': $.proxy(this.keyup, this)\n      });\n      this.input.on({\n        'change.colorpicker': $.proxy(this.change, this)\n      });\n\n      if (this.component === false) {\n        this.element.on({\n          'focus.colorpicker': $.proxy(this.show, this)\n        });\n      }\n\n      if (this.options.inline === false) {\n        this.element.on({\n          'focusout.colorpicker': $.proxy(this.hide, this)\n        });\n      }\n    }\n\n    if (this.component !== false) {\n      this.component.on({\n        'click.colorpicker': $.proxy(this.show, this)\n      });\n    }\n\n    if (this.input === false && this.component === false) {\n      this.element.on({\n        'click.colorpicker': $.proxy(this.show, this)\n      });\n    } // for HTML5 input[type='color']\n\n\n    if (this.input !== false && this.component !== false && this.input.attr('type') === 'color') {\n      this.input.on({\n        'click.colorpicker': $.proxy(this.show, this),\n        'focus.colorpicker': $.proxy(this.show, this)\n      });\n    }\n\n    this.update();\n    $($.proxy(function () {\n      this.element.trigger('create');\n    }, this));\n  };\n\n  Colorpicker.Color = Color;\n  Colorpicker.prototype = {\n    constructor: Colorpicker,\n    destroy: function destroy() {\n      this.picker.remove();\n      this.element.removeData('colorpicker', 'color').off('.colorpicker');\n\n      if (this.input !== false) {\n        this.input.off('.colorpicker');\n      }\n\n      if (this.component !== false) {\n        this.component.off('.colorpicker');\n      }\n\n      this.element.removeClass('colorpicker-element');\n      this.element.trigger({\n        type: 'destroy'\n      });\n    },\n    reposition: function reposition() {\n      if (this.options.inline !== false || this.options.container) {\n        return false;\n      }\n\n      var type = this.container && this.container[0] !== window.document.body ? 'position' : 'offset';\n      var element = this.component || this.element;\n      var offset = element[type]();\n\n      if (this.options.align === 'right') {\n        offset.left -= this.picker.outerWidth() - element.outerWidth();\n      }\n\n      this.picker.css({\n        top: offset.top + element.outerHeight(),\n        left: offset.left\n      });\n    },\n    show: function show(e) {\n      if (this.isDisabled()) {\n        // Don't show the widget if it's disabled (the input)\n        return;\n      }\n\n      this.picker.addClass('colorpicker-visible').removeClass('colorpicker-hidden');\n      this.reposition();\n      $(window).on('resize.colorpicker', $.proxy(this.reposition, this));\n\n      if (e && (!this.hasInput() || this.input.attr('type') === 'color')) {\n        if (e.stopPropagation && e.preventDefault) {\n          e.stopPropagation();\n          e.preventDefault();\n        }\n      }\n\n      if ((this.component || !this.input) && this.options.inline === false) {\n        $(window.document).on({\n          'mousedown.colorpicker': $.proxy(this.hide, this)\n        });\n      }\n\n      this.element.trigger({\n        type: 'showPicker',\n        color: this.color\n      });\n    },\n    hide: function hide(e) {\n      if (typeof e !== 'undefined' && e.target) {\n        // Prevent hide if triggered by an event and an element inside the colorpicker has been clicked/touched\n        if ($(e.currentTarget).parents('.colorpicker').length > 0 || $(e.target).parents('.colorpicker').length > 0) {\n          return false;\n        }\n      }\n\n      this.picker.addClass('colorpicker-hidden').removeClass('colorpicker-visible');\n      $(window).off('resize.colorpicker', this.reposition);\n      $(window.document).off({\n        'mousedown.colorpicker': this.hide\n      });\n      this.update();\n      this.element.trigger({\n        type: 'hidePicker',\n        color: this.color\n      });\n    },\n    updateData: function updateData(val) {\n      val = val || this.color.toString(false, this.format);\n      this.element.data('color', val);\n      return val;\n    },\n    updateInput: function updateInput(val) {\n      val = val || this.color.toString(false, this.format);\n\n      if (this.input !== false) {\n        this.input.prop('value', val);\n        this.input.trigger('change');\n      }\n\n      return val;\n    },\n    updatePicker: function updatePicker(val) {\n      if (typeof val !== 'undefined') {\n        this.color = this.createColor(val);\n      }\n\n      var sl = this.options.horizontal === false ? this.options.sliders : this.options.slidersHorz;\n      var icns = this.picker.find('i');\n\n      if (icns.length === 0) {\n        return;\n      }\n\n      if (this.options.horizontal === false) {\n        sl = this.options.sliders;\n        icns.eq(1).css('top', sl.hue.maxTop * (1 - this.color.value.h)).end().eq(2).css('top', sl.alpha.maxTop * (1 - this.color.value.a));\n      } else {\n        sl = this.options.slidersHorz;\n        icns.eq(1).css('left', sl.hue.maxLeft * (1 - this.color.value.h)).end().eq(2).css('left', sl.alpha.maxLeft * (1 - this.color.value.a));\n      }\n\n      icns.eq(0).css({\n        'top': sl.saturation.maxTop - this.color.value.b * sl.saturation.maxTop,\n        'left': this.color.value.s * sl.saturation.maxLeft\n      });\n      this.picker.find('.colorpicker-saturation').css('backgroundColor', this.color.toHex(true, this.color.value.h, 1, 1, 1));\n      this.picker.find('.colorpicker-alpha').css('backgroundColor', this.color.toHex(true));\n      this.picker.find('.colorpicker-color, .colorpicker-color div').css('backgroundColor', this.color.toString(true, this.format));\n      return val;\n    },\n    updateComponent: function updateComponent(val) {\n      var color;\n\n      if (typeof val !== 'undefined') {\n        color = this.createColor(val);\n      } else {\n        color = this.color;\n      }\n\n      if (this.component !== false) {\n        var icn = this.component.find('i').eq(0);\n\n        if (icn.length > 0) {\n          icn.css({\n            'backgroundColor': color.toString(true, this.format)\n          });\n        } else {\n          this.component.css({\n            'backgroundColor': color.toString(true, this.format)\n          });\n        }\n      }\n\n      return color.toString(false, this.format);\n    },\n    update: function update(force) {\n      var val;\n\n      if (this.getValue(false) !== false || force === true) {\n        // Update input/data only if the current value is not empty\n        val = this.updateComponent();\n        this.updateInput(val);\n        this.updateData(val);\n        this.updatePicker(); // only update picker if value is not empty\n      }\n\n      return val;\n    },\n    setValue: function setValue(val) {\n      // set color manually\n      this.color = this.createColor(val);\n      this.update(true);\n      this.element.trigger({\n        type: 'changeColor',\n        color: this.color,\n        value: val\n      });\n    },\n\n    /**\n     * Creates a new color using the instance options\n     * @protected\n     * @param {String} val\n     * @returns {Color}\n     */\n    createColor: function createColor(val) {\n      return new Color(val ? val : null, this.options.colorSelectors, this.options.fallbackColor ? this.options.fallbackColor : this.color, this.options.fallbackFormat, this.options.hexNumberSignPrefix);\n    },\n    getValue: function getValue(defaultValue) {\n      defaultValue = typeof defaultValue === 'undefined' ? this.options.fallbackColor : defaultValue;\n      var val;\n\n      if (this.hasInput()) {\n        val = this.input.val();\n      } else {\n        val = this.element.data('color');\n      }\n\n      if (val === undefined || val === '' || val === null) {\n        // if not defined or empty, return default\n        val = defaultValue;\n      }\n\n      return val;\n    },\n    hasInput: function hasInput() {\n      return this.input !== false;\n    },\n    isDisabled: function isDisabled() {\n      return this.disabled;\n    },\n    disable: function disable() {\n      if (this.hasInput()) {\n        this.input.prop('disabled', true);\n      }\n\n      this.disabled = true;\n      this.element.trigger({\n        type: 'disable',\n        color: this.color,\n        value: this.getValue()\n      });\n      return true;\n    },\n    enable: function enable() {\n      if (this.hasInput()) {\n        this.input.prop('disabled', false);\n      }\n\n      this.disabled = false;\n      this.element.trigger({\n        type: 'enable',\n        color: this.color,\n        value: this.getValue()\n      });\n      return true;\n    },\n    currentSlider: null,\n    mousePointer: {\n      left: 0,\n      top: 0\n    },\n    mousedown: function mousedown(e) {\n      if (!e.pageX && !e.pageY && e.originalEvent && e.originalEvent.touches) {\n        e.pageX = e.originalEvent.touches[0].pageX;\n        e.pageY = e.originalEvent.touches[0].pageY;\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n      var target = $(e.target); //detect the slider and set the limits and callbacks\n\n      var zone = target.closest('div');\n      var sl = this.options.horizontal ? this.options.slidersHorz : this.options.sliders;\n\n      if (!zone.is('.colorpicker')) {\n        if (zone.is('.colorpicker-saturation')) {\n          this.currentSlider = $.extend({}, sl.saturation);\n        } else if (zone.is('.colorpicker-hue')) {\n          this.currentSlider = $.extend({}, sl.hue);\n        } else if (zone.is('.colorpicker-alpha')) {\n          this.currentSlider = $.extend({}, sl.alpha);\n        } else {\n          return false;\n        }\n\n        var offset = zone.offset(); //reference to guide's style\n\n        this.currentSlider.guide = zone.find('i')[0].style;\n        this.currentSlider.left = e.pageX - offset.left;\n        this.currentSlider.top = e.pageY - offset.top;\n        this.mousePointer = {\n          left: e.pageX,\n          top: e.pageY\n        }; //trigger mousemove to move the guide to the current position\n\n        $(window.document).on({\n          'mousemove.colorpicker': $.proxy(this.mousemove, this),\n          'touchmove.colorpicker': $.proxy(this.mousemove, this),\n          'mouseup.colorpicker': $.proxy(this.mouseup, this),\n          'touchend.colorpicker': $.proxy(this.mouseup, this)\n        }).trigger('mousemove');\n      }\n\n      return false;\n    },\n    mousemove: function mousemove(e) {\n      if (!e.pageX && !e.pageY && e.originalEvent && e.originalEvent.touches) {\n        e.pageX = e.originalEvent.touches[0].pageX;\n        e.pageY = e.originalEvent.touches[0].pageY;\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n      var left = Math.max(0, Math.min(this.currentSlider.maxLeft, this.currentSlider.left + ((e.pageX || this.mousePointer.left) - this.mousePointer.left)));\n      var top = Math.max(0, Math.min(this.currentSlider.maxTop, this.currentSlider.top + ((e.pageY || this.mousePointer.top) - this.mousePointer.top)));\n      this.currentSlider.guide.left = left + 'px';\n      this.currentSlider.guide.top = top + 'px';\n\n      if (this.currentSlider.callLeft) {\n        this.color[this.currentSlider.callLeft].call(this.color, left / this.currentSlider.maxLeft);\n      }\n\n      if (this.currentSlider.callTop) {\n        this.color[this.currentSlider.callTop].call(this.color, top / this.currentSlider.maxTop);\n      } // Change format dynamically\n      // Only occurs if user choose the dynamic format by\n      // setting option format to false\n\n\n      if (this.options.format === false && (this.currentSlider.callTop === 'setAlpha' || this.currentSlider.callLeft === 'setAlpha')) {\n        // Converting from hex / rgb to rgba\n        if (this.color.value.a !== 1) {\n          this.format = 'rgba';\n          this.color.origFormat = 'rgba';\n        } // Converting from rgba to hex\n        else {\n            this.format = 'hex';\n            this.color.origFormat = 'hex';\n          }\n      }\n\n      this.update(true);\n      this.element.trigger({\n        type: 'changeColor',\n        color: this.color\n      });\n      return false;\n    },\n    mouseup: function mouseup(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      $(window.document).off({\n        'mousemove.colorpicker': this.mousemove,\n        'touchmove.colorpicker': this.mousemove,\n        'mouseup.colorpicker': this.mouseup,\n        'touchend.colorpicker': this.mouseup\n      });\n      return false;\n    },\n    change: function change(e) {\n      this.keyup(e);\n    },\n    keyup: function keyup(e) {\n      if (e.keyCode === 38) {\n        if (this.color.value.a < 1) {\n          this.color.value.a = Math.round((this.color.value.a + 0.01) * 100) / 100;\n        }\n\n        this.update(true);\n      } else if (e.keyCode === 40) {\n        if (this.color.value.a > 0) {\n          this.color.value.a = Math.round((this.color.value.a - 0.01) * 100) / 100;\n        }\n\n        this.update(true);\n      } else {\n        this.color = this.createColor(this.input.val()); // Change format dynamically\n        // Only occurs if user choose the dynamic format by\n        // setting option format to false\n\n        if (this.color.origFormat && this.options.format === false) {\n          this.format = this.color.origFormat;\n        }\n\n        if (this.getValue(false) !== false) {\n          this.updateData();\n          this.updateComponent();\n          this.updatePicker();\n        }\n      }\n\n      this.element.trigger({\n        type: 'changeColor',\n        color: this.color,\n        value: this.input.val()\n      });\n    }\n  };\n  $.colorpicker = Colorpicker;\n\n  $.fn.colorpicker = function (option) {\n    var apiArgs = Array.prototype.slice.call(arguments, 1),\n        isSingleElement = this.length === 1,\n        returnValue = null;\n    var $jq = this.each(function () {\n      var $this = $(this),\n          inst = $this.data('colorpicker'),\n          options = typeof option === 'object' ? option : {};\n\n      if (!inst) {\n        inst = new Colorpicker(this, options);\n        $this.data('colorpicker', inst);\n      }\n\n      if (typeof option === 'string') {\n        if ($.isFunction(inst[option])) {\n          returnValue = inst[option].apply(inst, apiArgs);\n        } else {\n          // its a property ?\n          if (apiArgs.length) {\n            // set property\n            inst[option] = apiArgs[0];\n          }\n\n          returnValue = inst[option];\n        }\n      } else {\n        returnValue = $this;\n      }\n    });\n    return isSingleElement ? returnValue : $jq;\n  };\n\n  $.fn.colorpicker.constructor = Colorpicker;\n});","map":null,"metadata":{},"sourceType":"script"}