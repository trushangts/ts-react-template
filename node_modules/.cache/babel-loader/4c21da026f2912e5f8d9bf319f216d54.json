{"ast":null,"code":"/**\n * @license\n * Copyright 2012 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/*global Dygraph:false */\n\n/*\n\nCurrent bits of jankiness:\n- Direct layout access\n- Direct area access\n\n*/\n\"use strict\";\n/**\n * Draws the gridlines, i.e. the gray horizontal & vertical lines running the\n * length of the chart.\n *\n * @constructor\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar grid = function grid() {};\n\ngrid.prototype.toString = function () {\n  return \"Gridline Plugin\";\n};\n\ngrid.prototype.activate = function (g) {\n  return {\n    willDrawChart: this.willDrawChart\n  };\n};\n\ngrid.prototype.willDrawChart = function (e) {\n  // Draw the new X/Y grid. Lines appear crisper when pixels are rounded to\n  // half-integers. This prevents them from drawing in two rows/cols.\n  var g = e.dygraph;\n  var ctx = e.drawingContext;\n  var layout = g.layout_;\n  var area = e.dygraph.plotter_.area;\n\n  function halfUp(x) {\n    return Math.round(x) + 0.5;\n  }\n\n  function halfDown(y) {\n    return Math.round(y) - 0.5;\n  }\n\n  var x, y, i, ticks;\n\n  if (g.getOptionForAxis('drawGrid', 'y')) {\n    var axes = [\"y\", \"y2\"];\n    var strokeStyles = [],\n        lineWidths = [],\n        drawGrid = [],\n        stroking = [],\n        strokePattern = [];\n\n    for (var i = 0; i < axes.length; i++) {\n      drawGrid[i] = g.getOptionForAxis('drawGrid', axes[i]);\n\n      if (drawGrid[i]) {\n        strokeStyles[i] = g.getOptionForAxis('gridLineColor', axes[i]);\n        lineWidths[i] = g.getOptionForAxis('gridLineWidth', axes[i]);\n        strokePattern[i] = g.getOptionForAxis('gridLinePattern', axes[i]);\n        stroking[i] = strokePattern[i] && strokePattern[i].length >= 2;\n      }\n    }\n\n    ticks = layout.yticks;\n    ctx.save(); // draw grids for the different y axes\n\n    ticks.forEach(function (tick) {\n      if (!tick.has_tick) return;\n      var axis = tick.axis;\n\n      if (drawGrid[axis]) {\n        ctx.save();\n\n        if (stroking[axis]) {\n          if (ctx.setLineDash) ctx.setLineDash(strokePattern[axis]);\n        }\n\n        ctx.strokeStyle = strokeStyles[axis];\n        ctx.lineWidth = lineWidths[axis];\n        x = halfUp(area.x);\n        y = halfDown(area.y + tick.pos * area.h);\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + area.w, y);\n        ctx.stroke();\n        ctx.restore();\n      }\n    });\n    ctx.restore();\n  } // draw grid for x axis\n\n\n  if (g.getOptionForAxis('drawGrid', 'x')) {\n    ticks = layout.xticks;\n    ctx.save();\n    var strokePattern = g.getOptionForAxis('gridLinePattern', 'x');\n    var stroking = strokePattern && strokePattern.length >= 2;\n\n    if (stroking) {\n      if (ctx.setLineDash) ctx.setLineDash(strokePattern);\n    }\n\n    ctx.strokeStyle = g.getOptionForAxis('gridLineColor', 'x');\n    ctx.lineWidth = g.getOptionForAxis('gridLineWidth', 'x');\n    ticks.forEach(function (tick) {\n      if (!tick.has_tick) return;\n      x = halfUp(area.x + tick.pos * area.w);\n      y = halfDown(area.y + area.h);\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x, area.y);\n      ctx.closePath();\n      ctx.stroke();\n    });\n\n    if (stroking) {\n      if (ctx.setLineDash) ctx.setLineDash([]);\n    }\n\n    ctx.restore();\n  }\n};\n\ngrid.prototype.destroy = function () {};\n\nexports[\"default\"] = grid;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}