{"ast":null,"code":"/* ===================================================\n * bootstrap-markdown.js v2.10.0\n * http://github.com/toopay/bootstrap-markdown\n * ===================================================\n * Copyright 2013-2016 Taufan Aditya\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    //RequireJS\n    define([\"jquery\"], factory);\n  } else if (typeof exports === 'object') {\n    //Backbone.js\n    factory(require('jquery'));\n  } else {\n    //Jquery plugin\n    factory(jQuery);\n  }\n})(function ($) {\n  \"use strict\"; // jshint ;_;\n\n  /* MARKDOWN CLASS DEFINITION\n   * ========================== */\n\n  var Markdown = function Markdown(element, options) {\n    // @TODO : remove this BC on next major release\n    // @see : https://github.com/toopay/bootstrap-markdown/issues/109\n    var opts = ['autofocus', 'savable', 'hideable', 'width', 'height', 'resize', 'iconlibrary', 'language', 'footer', 'fullscreen', 'hiddenButtons', 'disabledButtons'];\n    $.each(opts, function (_, opt) {\n      if (typeof $(element).data(opt) !== 'undefined') {\n        options = typeof options == 'object' ? options : {};\n        options[opt] = $(element).data(opt);\n      }\n    }); // End BC\n    // Class Properties\n\n    this.$ns = 'bootstrap-markdown';\n    this.$element = $(element);\n    this.$editable = {\n      el: null,\n      type: null,\n      attrKeys: [],\n      attrValues: [],\n      content: null\n    };\n    this.$options = $.extend(true, {}, $.fn.markdown.defaults, options, this.$element.data('options'));\n    this.$oldContent = null;\n    this.$isPreview = false;\n    this.$isFullscreen = false;\n    this.$editor = null;\n    this.$textarea = null;\n    this.$handler = [];\n    this.$callback = [];\n    this.$nextTab = [];\n    this.showEditor();\n  };\n\n  Markdown.prototype = {\n    constructor: Markdown,\n    __alterButtons: function __alterButtons(name, alter) {\n      var handler = this.$handler,\n          isAll = name == 'all',\n          that = this;\n      $.each(handler, function (k, v) {\n        var halt = true;\n\n        if (isAll) {\n          halt = false;\n        } else {\n          halt = v.indexOf(name) < 0;\n        }\n\n        if (halt === false) {\n          alter(that.$editor.find('button[data-handler=\"' + v + '\"]'));\n        }\n      });\n    },\n    __buildButtons: function __buildButtons(buttonsArray, container) {\n      var i,\n          ns = this.$ns,\n          handler = this.$handler,\n          callback = this.$callback;\n\n      for (i = 0; i < buttonsArray.length; i++) {\n        // Build each group container\n        var y,\n            btnGroups = buttonsArray[i];\n\n        for (y = 0; y < btnGroups.length; y++) {\n          // Build each button group\n          var z,\n              buttons = btnGroups[y].data,\n              btnGroupContainer = $('<div/>', {\n            'class': 'btn-group'\n          });\n\n          for (z = 0; z < buttons.length; z++) {\n            var button = buttons[z],\n                buttonContainer,\n                buttonIconContainer,\n                buttonHandler = ns + '-' + button.name,\n                buttonIcon = this.__getIcon(button.icon),\n                btnText = button.btnText ? button.btnText : '',\n                btnClass = button.btnClass ? button.btnClass : 'btn',\n                tabIndex = button.tabIndex ? button.tabIndex : '-1',\n                hotkey = typeof button.hotkey !== 'undefined' ? button.hotkey : '',\n                hotkeyCaption = typeof jQuery.hotkeys !== 'undefined' && hotkey !== '' ? ' (' + hotkey + ')' : ''; // Construct the button object\n\n\n            buttonContainer = $('<button></button>');\n            buttonContainer.text(' ' + this.__localize(btnText)).addClass('btn-default btn-sm').addClass(btnClass);\n\n            if (btnClass.match(/btn\\-(primary|success|info|warning|danger|link)/)) {\n              buttonContainer.removeClass('btn-default');\n            }\n\n            buttonContainer.attr({\n              'type': 'button',\n              'title': this.__localize(button.title) + hotkeyCaption,\n              'tabindex': tabIndex,\n              'data-provider': ns,\n              'data-handler': buttonHandler,\n              'data-hotkey': hotkey\n            });\n\n            if (button.toggle === true) {\n              buttonContainer.attr('data-toggle', 'button');\n            }\n\n            buttonIconContainer = $('<span/>');\n            buttonIconContainer.addClass(buttonIcon);\n            buttonIconContainer.prependTo(buttonContainer); // Attach the button object\n\n            btnGroupContainer.append(buttonContainer); // Register handler and callback\n\n            handler.push(buttonHandler);\n            callback.push(button.callback);\n          } // Attach the button group into container dom\n\n\n          container.append(btnGroupContainer);\n        }\n      }\n\n      return container;\n    },\n    __setListener: function __setListener() {\n      // Set size and resizable Properties\n      var hasRows = typeof this.$textarea.attr('rows') !== 'undefined',\n          maxRows = this.$textarea.val().split(\"\\n\").length > 5 ? this.$textarea.val().split(\"\\n\").length : '5',\n          rowsVal = hasRows ? this.$textarea.attr('rows') : maxRows;\n      this.$textarea.attr('rows', rowsVal);\n\n      if (this.$options.resize) {\n        this.$textarea.css('resize', this.$options.resize);\n      }\n\n      this.$textarea.on({\n        'focus': $.proxy(this.focus, this),\n        'keyup': $.proxy(this.keyup, this),\n        'change': $.proxy(this.change, this),\n        'select': $.proxy(this.select, this)\n      });\n\n      if (this.eventSupported('keydown')) {\n        this.$textarea.on('keydown', $.proxy(this.keydown, this));\n      }\n\n      if (this.eventSupported('keypress')) {\n        this.$textarea.on('keypress', $.proxy(this.keypress, this));\n      } // Re-attach markdown data\n\n\n      this.$textarea.data('markdown', this);\n    },\n    __handle: function __handle(e) {\n      var target = $(e.currentTarget),\n          handler = this.$handler,\n          callback = this.$callback,\n          handlerName = target.attr('data-handler'),\n          callbackIndex = handler.indexOf(handlerName),\n          callbackHandler = callback[callbackIndex]; // Trigger the focusin\n\n      $(e.currentTarget).focus();\n      callbackHandler(this); // Trigger onChange for each button handle\n\n      this.change(this); // Unless it was the save handler,\n      // focusin the textarea\n\n      if (handlerName.indexOf('cmdSave') < 0) {\n        this.$textarea.focus();\n      }\n\n      e.preventDefault();\n    },\n    __localize: function __localize(string) {\n      var messages = $.fn.markdown.messages,\n          language = this.$options.language;\n\n      if (typeof messages !== 'undefined' && typeof messages[language] !== 'undefined' && typeof messages[language][string] !== 'undefined') {\n        return messages[language][string];\n      }\n\n      return string;\n    },\n    __getIcon: function __getIcon(src) {\n      return typeof src == 'object' ? src[this.$options.iconlibrary] : src;\n    },\n    setFullscreen: function setFullscreen(mode) {\n      var $editor = this.$editor,\n          $textarea = this.$textarea;\n\n      if (mode === true) {\n        $editor.addClass('md-fullscreen-mode');\n        $('body').addClass('md-nooverflow');\n        this.$options.onFullscreen(this);\n      } else {\n        $editor.removeClass('md-fullscreen-mode');\n        $('body').removeClass('md-nooverflow');\n        if (this.$isPreview == true) this.hidePreview().showPreview();\n      }\n\n      this.$isFullscreen = mode;\n      $textarea.focus();\n    },\n    showEditor: function showEditor() {\n      var instance = this,\n          textarea,\n          ns = this.$ns,\n          container = this.$element,\n          originalHeigth = container.css('height'),\n          originalWidth = container.css('width'),\n          editable = this.$editable,\n          handler = this.$handler,\n          callback = this.$callback,\n          options = this.$options,\n          editor = $('<div/>', {\n        'class': 'md-editor',\n        click: function click() {\n          instance.focus();\n        }\n      }); // Prepare the editor\n\n      if (this.$editor === null) {\n        // Create the panel\n        var editorHeader = $('<div/>', {\n          'class': 'md-header btn-toolbar'\n        }); // Merge the main & additional button groups together\n\n        var allBtnGroups = [];\n        if (options.buttons.length > 0) allBtnGroups = allBtnGroups.concat(options.buttons[0]);\n\n        if (options.additionalButtons.length > 0) {\n          // iterate the additional button groups\n          $.each(options.additionalButtons[0], function (idx, buttonGroup) {\n            // see if the group name of the addional group matches an existing group\n            var matchingGroups = $.grep(allBtnGroups, function (allButtonGroup, allIdx) {\n              return allButtonGroup.name === buttonGroup.name;\n            }); // if it matches add the addional buttons to that group, if not just add it to the all buttons group\n\n            if (matchingGroups.length > 0) {\n              matchingGroups[0].data = matchingGroups[0].data.concat(buttonGroup.data);\n            } else {\n              allBtnGroups.push(options.additionalButtons[0][idx]);\n            }\n          });\n        } // Reduce and/or reorder the button groups\n\n\n        if (options.reorderButtonGroups.length > 0) {\n          allBtnGroups = allBtnGroups.filter(function (btnGroup) {\n            return options.reorderButtonGroups.indexOf(btnGroup.name) > -1;\n          }).sort(function (a, b) {\n            if (options.reorderButtonGroups.indexOf(a.name) < options.reorderButtonGroups.indexOf(b.name)) return -1;\n            if (options.reorderButtonGroups.indexOf(a.name) > options.reorderButtonGroups.indexOf(b.name)) return 1;\n            return 0;\n          });\n        } // Build the buttons\n\n\n        if (allBtnGroups.length > 0) {\n          editorHeader = this.__buildButtons([allBtnGroups], editorHeader);\n        }\n\n        if (options.fullscreen.enable) {\n          editorHeader.append('<div class=\"md-controls\"><a class=\"md-control md-control-fullscreen\" href=\"#\"><span class=\"' + this.__getIcon(options.fullscreen.icons.fullscreenOn) + '\"></span></a></div>').on('click', '.md-control-fullscreen', function (e) {\n            e.preventDefault();\n            instance.setFullscreen(true);\n          });\n        }\n\n        editor.append(editorHeader); // Wrap the textarea\n\n        if (container.is('textarea')) {\n          container.before(editor);\n          textarea = container;\n          textarea.addClass('md-input');\n          editor.append(textarea);\n        } else {\n          var rawContent = typeof toMarkdown == 'function' ? toMarkdown(container.html()) : container.html(),\n              currentContent = $.trim(rawContent); // This is some arbitrary content that could be edited\n\n          textarea = $('<textarea/>', {\n            'class': 'md-input',\n            'val': currentContent\n          });\n          editor.append(textarea); // Save the editable\n\n          editable.el = container;\n          editable.type = container.prop('tagName').toLowerCase();\n          editable.content = container.html();\n          $(container[0].attributes).each(function () {\n            editable.attrKeys.push(this.nodeName);\n            editable.attrValues.push(this.nodeValue);\n          }); // Set editor to blocked the original container\n\n          container.replaceWith(editor);\n        }\n\n        var editorFooter = $('<div/>', {\n          'class': 'md-footer'\n        }),\n            createFooter = false,\n            footer = ''; // Create the footer if savable\n\n        if (options.savable) {\n          createFooter = true;\n          var saveHandler = 'cmdSave'; // Register handler and callback\n\n          handler.push(saveHandler);\n          callback.push(options.onSave);\n          editorFooter.append('<button class=\"btn btn-success\" data-provider=\"' + ns + '\" data-handler=\"' + saveHandler + '\"><i class=\"icon icon-white icon-ok\"></i> ' + this.__localize('Save') + '</button>');\n        }\n\n        footer = typeof options.footer === 'function' ? options.footer(this) : options.footer;\n\n        if ($.trim(footer) !== '') {\n          createFooter = true;\n          editorFooter.append(footer);\n        }\n\n        if (createFooter) editor.append(editorFooter); // Set width\n\n        if (options.width && options.width !== 'inherit') {\n          if (jQuery.isNumeric(options.width)) {\n            editor.css('display', 'table');\n            textarea.css('width', options.width + 'px');\n          } else {\n            editor.addClass(options.width);\n          }\n        } // Set height\n\n\n        if (options.height && options.height !== 'inherit') {\n          if (jQuery.isNumeric(options.height)) {\n            var height = options.height;\n            if (editorHeader) height = Math.max(0, height - editorHeader.outerHeight());\n            if (editorFooter) height = Math.max(0, height - editorFooter.outerHeight());\n            textarea.css('height', height + 'px');\n          } else {\n            editor.addClass(options.height);\n          }\n        } // Reference\n\n\n        this.$editor = editor;\n        this.$textarea = textarea;\n        this.$editable = editable;\n        this.$oldContent = this.getContent();\n\n        this.__setListener(); // Set editor attributes, data short-hand API and listener\n\n\n        this.$editor.attr('id', new Date().getTime());\n        this.$editor.on('click', '[data-provider=\"bootstrap-markdown\"]', $.proxy(this.__handle, this));\n\n        if (this.$element.is(':disabled') || this.$element.is('[readonly]')) {\n          this.$editor.addClass('md-editor-disabled');\n          this.disableButtons('all');\n        }\n\n        if (this.eventSupported('keydown') && typeof jQuery.hotkeys === 'object') {\n          editorHeader.find('[data-provider=\"bootstrap-markdown\"]').each(function () {\n            var $button = $(this),\n                hotkey = $button.attr('data-hotkey');\n\n            if (hotkey.toLowerCase() !== '') {\n              textarea.bind('keydown', hotkey, function () {\n                $button.trigger('click');\n                return false;\n              });\n            }\n          });\n        }\n\n        if (options.initialstate === 'preview') {\n          this.showPreview();\n        } else if (options.initialstate === 'fullscreen' && options.fullscreen.enable) {\n          this.setFullscreen(true);\n        }\n      } else {\n        this.$editor.show();\n      }\n\n      if (options.autofocus) {\n        this.$textarea.focus();\n        this.$editor.addClass('active');\n      }\n\n      if (options.fullscreen.enable && options.fullscreen !== false) {\n        this.$editor.append('<div class=\"md-fullscreen-controls\">' + '<a href=\"#\" class=\"exit-fullscreen\" title=\"Exit fullscreen\"><span class=\"' + this.__getIcon(options.fullscreen.icons.fullscreenOff) + '\">' + '</span></a>' + '</div>');\n        this.$editor.on('click', '.exit-fullscreen', function (e) {\n          e.preventDefault();\n          instance.setFullscreen(false);\n        });\n      } // hide hidden buttons from options\n\n\n      this.hideButtons(options.hiddenButtons); // disable disabled buttons from options\n\n      this.disableButtons(options.disabledButtons); // Trigger the onShow hook\n\n      options.onShow(this);\n      return this;\n    },\n    parseContent: function parseContent(val) {\n      var content; // parse with supported markdown parser\n\n      var val = val || this.$textarea.val();\n\n      if (this.$options.parser) {\n        content = this.$options.parser(val);\n      } else if (typeof markdown == 'object') {\n        content = markdown.toHTML(val);\n      } else if (typeof marked == 'function') {\n        content = marked(val);\n      } else {\n        content = val;\n      }\n\n      return content;\n    },\n    showPreview: function showPreview() {\n      var options = this.$options,\n          container = this.$textarea,\n          afterContainer = container.next(),\n          replacementContainer = $('<div/>', {\n        'class': 'md-preview',\n        'data-provider': 'markdown-preview'\n      }),\n          content,\n          callbackContent;\n\n      if (this.$isPreview == true) {\n        // Avoid sequenced element creation on missused scenario\n        // @see https://github.com/toopay/bootstrap-markdown/issues/170\n        return this;\n      } // Give flag that tell the editor enter preview mode\n\n\n      this.$isPreview = true; // Disable all buttons\n\n      this.disableButtons('all').enableButtons('cmdPreview'); // Try to get the content from callback\n\n      callbackContent = options.onPreview(this); // Set the content based from the callback content if string otherwise parse value from textarea\n\n      content = typeof callbackContent == 'string' ? callbackContent : this.parseContent(); // Build preview element\n\n      replacementContainer.html(content);\n\n      if (afterContainer && afterContainer.attr('class') == 'md-footer') {\n        // If there is footer element, insert the preview container before it\n        replacementContainer.insertBefore(afterContainer);\n      } else {\n        // Otherwise, just append it after textarea\n        container.parent().append(replacementContainer);\n      } // Set the preview element dimensions\n\n\n      replacementContainer.css({\n        width: container.outerWidth() + 'px',\n        height: container.outerHeight() + 'px'\n      });\n\n      if (this.$options.resize) {\n        replacementContainer.css('resize', this.$options.resize);\n      } // Hide the last-active textarea\n\n\n      container.hide(); // Attach the editor instances\n\n      replacementContainer.data('markdown', this);\n\n      if (this.$element.is(':disabled') || this.$element.is('[readonly]')) {\n        this.$editor.addClass('md-editor-disabled');\n        this.disableButtons('all');\n      }\n\n      return this;\n    },\n    hidePreview: function hidePreview() {\n      // Give flag that tell the editor quit preview mode\n      this.$isPreview = false; // Obtain the preview container\n\n      var container = this.$editor.find('div[data-provider=\"markdown-preview\"]'); // Remove the preview container\n\n      container.remove(); // Enable all buttons\n\n      this.enableButtons('all'); // Disable configured disabled buttons\n\n      this.disableButtons(this.$options.disabledButtons); // Back to the editor\n\n      this.$textarea.show();\n\n      this.__setListener();\n\n      return this;\n    },\n    isDirty: function isDirty() {\n      return this.$oldContent != this.getContent();\n    },\n    getContent: function getContent() {\n      return this.$textarea.val();\n    },\n    setContent: function setContent(content) {\n      this.$textarea.val(content);\n      return this;\n    },\n    findSelection: function findSelection(chunk) {\n      var content = this.getContent(),\n          startChunkPosition;\n\n      if (startChunkPosition = content.indexOf(chunk), startChunkPosition >= 0 && chunk.length > 0) {\n        var oldSelection = this.getSelection(),\n            selection;\n        this.setSelection(startChunkPosition, startChunkPosition + chunk.length);\n        selection = this.getSelection();\n        this.setSelection(oldSelection.start, oldSelection.end);\n        return selection;\n      } else {\n        return null;\n      }\n    },\n    getSelection: function getSelection() {\n      var e = this.$textarea[0];\n      return ('selectionStart' in e && function () {\n        var l = e.selectionEnd - e.selectionStart;\n        return {\n          start: e.selectionStart,\n          end: e.selectionEnd,\n          length: l,\n          text: e.value.substr(e.selectionStart, l)\n        };\n      } ||\n      /* browser not supported */\n      function () {\n        return null;\n      })();\n    },\n    setSelection: function setSelection(start, end) {\n      var e = this.$textarea[0];\n      return ('selectionStart' in e && function () {\n        e.selectionStart = start;\n        e.selectionEnd = end;\n        return;\n      } ||\n      /* browser not supported */\n      function () {\n        return null;\n      })();\n    },\n    replaceSelection: function replaceSelection(text) {\n      var e = this.$textarea[0];\n      return ('selectionStart' in e && function () {\n        e.value = e.value.substr(0, e.selectionStart) + text + e.value.substr(e.selectionEnd, e.value.length); // Set cursor to the last replacement end\n\n        e.selectionStart = e.value.length;\n        return this;\n      } ||\n      /* browser not supported */\n      function () {\n        e.value += text;\n        return jQuery(e);\n      })();\n    },\n    getNextTab: function getNextTab() {\n      // Shift the nextTab\n      if (this.$nextTab.length === 0) {\n        return null;\n      } else {\n        var nextTab,\n            tab = this.$nextTab.shift();\n\n        if (typeof tab == 'function') {\n          nextTab = tab();\n        } else if (typeof tab == 'object' && tab.length > 0) {\n          nextTab = tab;\n        }\n\n        return nextTab;\n      }\n    },\n    setNextTab: function setNextTab(start, end) {\n      // Push new selection into nextTab collections\n      if (typeof start == 'string') {\n        var that = this;\n        this.$nextTab.push(function () {\n          return that.findSelection(start);\n        });\n      } else if (typeof start == 'number' && typeof end == 'number') {\n        var oldSelection = this.getSelection();\n        this.setSelection(start, end);\n        this.$nextTab.push(this.getSelection());\n        this.setSelection(oldSelection.start, oldSelection.end);\n      }\n\n      return;\n    },\n    __parseButtonNameParam: function __parseButtonNameParam(names) {\n      return typeof names == 'string' ? names.split(' ') : names;\n    },\n    enableButtons: function enableButtons(name) {\n      var buttons = this.__parseButtonNameParam(name),\n          that = this;\n\n      $.each(buttons, function (i, v) {\n        that.__alterButtons(buttons[i], function (el) {\n          el.removeAttr('disabled');\n        });\n      });\n      return this;\n    },\n    disableButtons: function disableButtons(name) {\n      var buttons = this.__parseButtonNameParam(name),\n          that = this;\n\n      $.each(buttons, function (i, v) {\n        that.__alterButtons(buttons[i], function (el) {\n          el.attr('disabled', 'disabled');\n        });\n      });\n      return this;\n    },\n    hideButtons: function hideButtons(name) {\n      var buttons = this.__parseButtonNameParam(name),\n          that = this;\n\n      $.each(buttons, function (i, v) {\n        that.__alterButtons(buttons[i], function (el) {\n          el.addClass('hidden');\n        });\n      });\n      return this;\n    },\n    showButtons: function showButtons(name) {\n      var buttons = this.__parseButtonNameParam(name),\n          that = this;\n\n      $.each(buttons, function (i, v) {\n        that.__alterButtons(buttons[i], function (el) {\n          el.removeClass('hidden');\n        });\n      });\n      return this;\n    },\n    eventSupported: function eventSupported(eventName) {\n      var isSupported = eventName in this.$element;\n\n      if (!isSupported) {\n        this.$element.setAttribute(eventName, 'return;');\n        isSupported = typeof this.$element[eventName] === 'function';\n      }\n\n      return isSupported;\n    },\n    keyup: function keyup(e) {\n      var blocked = false;\n\n      switch (e.keyCode) {\n        case 40: // down arrow\n\n        case 38: // up arrow\n\n        case 16: // shift\n\n        case 17: // ctrl\n\n        case 18:\n          // alt\n          break;\n\n        case 9:\n          // tab\n          var nextTab;\n\n          if (nextTab = this.getNextTab(), nextTab !== null) {\n            // Get the nextTab if exists\n            var that = this;\n            setTimeout(function () {\n              that.setSelection(nextTab.start, nextTab.end);\n            }, 500);\n            blocked = true;\n          } else {\n            // The next tab memory contains nothing...\n            // check the cursor position to determine tab action\n            var cursor = this.getSelection();\n\n            if (cursor.start == cursor.end && cursor.end == this.getContent().length) {\n              // The cursor already reach the end of the content\n              blocked = false;\n            } else {\n              // Put the cursor to the end\n              this.setSelection(this.getContent().length, this.getContent().length);\n              blocked = true;\n            }\n          }\n\n          break;\n\n        case 13:\n          // enter\n          blocked = false;\n          break;\n\n        case 27:\n          // escape\n          if (this.$isFullscreen) this.setFullscreen(false);\n          blocked = false;\n          break;\n\n        default:\n          blocked = false;\n      }\n\n      if (blocked) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n\n      this.$options.onChange(this);\n    },\n    change: function change(e) {\n      this.$options.onChange(this);\n      return this;\n    },\n    select: function select(e) {\n      this.$options.onSelect(this);\n      return this;\n    },\n    focus: function focus(e) {\n      var options = this.$options,\n          isHideable = options.hideable,\n          editor = this.$editor;\n      editor.addClass('active'); // Blur other markdown(s)\n\n      $(document).find('.md-editor').each(function () {\n        if ($(this).attr('id') !== editor.attr('id')) {\n          var attachedMarkdown;\n\n          if (attachedMarkdown = $(this).find('textarea').data('markdown'), attachedMarkdown === null) {\n            attachedMarkdown = $(this).find('div[data-provider=\"markdown-preview\"]').data('markdown');\n          }\n\n          if (attachedMarkdown) {\n            attachedMarkdown.blur();\n          }\n        }\n      }); // Trigger the onFocus hook\n\n      options.onFocus(this);\n      return this;\n    },\n    blur: function blur(e) {\n      var options = this.$options,\n          isHideable = options.hideable,\n          editor = this.$editor,\n          editable = this.$editable;\n\n      if (editor.hasClass('active') || this.$element.parent().length === 0) {\n        editor.removeClass('active');\n\n        if (isHideable) {\n          // Check for editable elements\n          if (editable.el !== null) {\n            // Build the original element\n            var oldElement = $('<' + editable.type + '/>'),\n                content = this.getContent(),\n                currentContent = this.parseContent(content);\n            $(editable.attrKeys).each(function (k, v) {\n              oldElement.attr(editable.attrKeys[k], editable.attrValues[k]);\n            }); // Get the editor content\n\n            oldElement.html(currentContent);\n            editor.replaceWith(oldElement);\n          } else {\n            editor.hide();\n          }\n        } // Trigger the onBlur hook\n\n\n        options.onBlur(this);\n      }\n\n      return this;\n    }\n  };\n  /* MARKDOWN PLUGIN DEFINITION\n   * ========================== */\n\n  var old = $.fn.markdown;\n\n  $.fn.markdown = function (option) {\n    return this.each(function () {\n      var $this = $(this),\n          data = $this.data('markdown'),\n          options = typeof option == 'object' && option;\n      if (!data) $this.data('markdown', data = new Markdown(this, options));\n    });\n  };\n\n  $.fn.markdown.messages = {};\n  $.fn.markdown.defaults = {\n    /* Editor Properties */\n    autofocus: false,\n    hideable: false,\n    savable: false,\n    width: 'inherit',\n    height: 'inherit',\n    resize: 'none',\n    iconlibrary: 'glyph',\n    language: 'en',\n    initialstate: 'editor',\n    parser: null,\n\n    /* Buttons Properties */\n    buttons: [[{\n      name: 'groupFont',\n      data: [{\n        name: 'cmdBold',\n        hotkey: 'Ctrl+B',\n        title: 'Bold',\n        icon: {\n          glyph: 'glyphicon glyphicon-bold',\n          fa: 'fa fa-bold',\n          'fa-3': 'icon-bold'\n        },\n        callback: function callback(e) {\n          // Give/remove ** surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent();\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('strong text');\n          } else {\n            chunk = selected.text;\n          } // transform selection and set the cursor into chunked text\n\n\n          if (content.substr(selected.start - 2, 2) === '**' && content.substr(selected.end, 2) === '**') {\n            e.setSelection(selected.start - 2, selected.end + 2);\n            e.replaceSelection(chunk);\n            cursor = selected.start - 2;\n          } else {\n            e.replaceSelection('**' + chunk + '**');\n            cursor = selected.start + 2;\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }, {\n        name: 'cmdItalic',\n        title: 'Italic',\n        hotkey: 'Ctrl+I',\n        icon: {\n          glyph: 'glyphicon glyphicon-italic',\n          fa: 'fa fa-italic',\n          'fa-3': 'icon-italic'\n        },\n        callback: function callback(e) {\n          // Give/remove * surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent();\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('emphasized text');\n          } else {\n            chunk = selected.text;\n          } // transform selection and set the cursor into chunked text\n\n\n          if (content.substr(selected.start - 1, 1) === '_' && content.substr(selected.end, 1) === '_') {\n            e.setSelection(selected.start - 1, selected.end + 1);\n            e.replaceSelection(chunk);\n            cursor = selected.start - 1;\n          } else {\n            e.replaceSelection('_' + chunk + '_');\n            cursor = selected.start + 1;\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }, {\n        name: 'cmdHeading',\n        title: 'Heading',\n        hotkey: 'Ctrl+H',\n        icon: {\n          glyph: 'glyphicon glyphicon-header',\n          fa: 'fa fa-header',\n          'fa-3': 'icon-font'\n        },\n        callback: function callback(e) {\n          // Append/remove ### surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent(),\n              pointer,\n              prevChar;\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('heading text');\n          } else {\n            chunk = selected.text + '\\n';\n          } // transform selection and set the cursor into chunked text\n\n\n          if ((pointer = 4, content.substr(selected.start - pointer, pointer) === '### ') || (pointer = 3, content.substr(selected.start - pointer, pointer) === '###')) {\n            e.setSelection(selected.start - pointer, selected.end);\n            e.replaceSelection(chunk);\n            cursor = selected.start - pointer;\n          } else if (selected.start > 0 && (prevChar = content.substr(selected.start - 1, 1), !!prevChar && prevChar != '\\n')) {\n            e.replaceSelection('\\n\\n### ' + chunk);\n            cursor = selected.start + 6;\n          } else {\n            // Empty string before element\n            e.replaceSelection('### ' + chunk);\n            cursor = selected.start + 4;\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }]\n    }, {\n      name: 'groupLink',\n      data: [{\n        name: 'cmdUrl',\n        title: 'URL/Link',\n        hotkey: 'Ctrl+L',\n        icon: {\n          glyph: 'glyphicon glyphicon-link',\n          fa: 'fa fa-link',\n          'fa-3': 'icon-link'\n        },\n        callback: function callback(e) {\n          // Give [] surround the selection and prepend the link\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent(),\n              link;\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('enter link description here');\n          } else {\n            chunk = selected.text;\n          }\n\n          link = prompt(e.__localize('Insert Hyperlink'), 'http://');\n          var urlRegex = new RegExp('^((http|https)://|(mailto:)|(//))[a-z0-9]', 'i');\n\n          if (link !== null && link !== '' && link !== 'http://' && urlRegex.test(link)) {\n            var sanitizedLink = $('<div>' + link + '</div>').text(); // transform selection and set the cursor into chunked text\n\n            e.replaceSelection('[' + chunk + '](' + sanitizedLink + ')');\n            cursor = selected.start + 1; // Set the cursor\n\n            e.setSelection(cursor, cursor + chunk.length);\n          }\n        }\n      }, {\n        name: 'cmdImage',\n        title: 'Image',\n        hotkey: 'Ctrl+G',\n        icon: {\n          glyph: 'glyphicon glyphicon-picture',\n          fa: 'fa fa-picture-o',\n          'fa-3': 'icon-picture'\n        },\n        callback: function callback(e) {\n          // Give ![] surround the selection and prepend the image link\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent(),\n              link;\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('enter image description here');\n          } else {\n            chunk = selected.text;\n          }\n\n          link = prompt(e.__localize('Insert Image Hyperlink'), 'http://');\n          var urlRegex = new RegExp('^((http|https)://|(//))[a-z0-9]', 'i');\n\n          if (link !== null && link !== '' && link !== 'http://' && urlRegex.test(link)) {\n            var sanitizedLink = $('<div>' + link + '</div>').text(); // transform selection and set the cursor into chunked text\n\n            e.replaceSelection('![' + chunk + '](' + sanitizedLink + ' \"' + e.__localize('enter image title here') + '\")');\n            cursor = selected.start + 2; // Set the next tab\n\n            e.setNextTab(e.__localize('enter image title here')); // Set the cursor\n\n            e.setSelection(cursor, cursor + chunk.length);\n          }\n        }\n      }]\n    }, {\n      name: 'groupMisc',\n      data: [{\n        name: 'cmdList',\n        hotkey: 'Ctrl+U',\n        title: 'Unordered List',\n        icon: {\n          glyph: 'glyphicon glyphicon-list',\n          fa: 'fa fa-list',\n          'fa-3': 'icon-list-ul'\n        },\n        callback: function callback(e) {\n          // Prepend/Give - surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent(); // transform selection and set the cursor into chunked text\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('list text here');\n            e.replaceSelection('- ' + chunk); // Set the cursor\n\n            cursor = selected.start + 2;\n          } else {\n            if (selected.text.indexOf('\\n') < 0) {\n              chunk = selected.text;\n              e.replaceSelection('- ' + chunk); // Set the cursor\n\n              cursor = selected.start + 2;\n            } else {\n              var list = [];\n              list = selected.text.split('\\n');\n              chunk = list[0];\n              $.each(list, function (k, v) {\n                list[k] = '- ' + v;\n              });\n              e.replaceSelection('\\n\\n' + list.join('\\n')); // Set the cursor\n\n              cursor = selected.start + 4;\n            }\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }, {\n        name: 'cmdListO',\n        hotkey: 'Ctrl+O',\n        title: 'Ordered List',\n        icon: {\n          glyph: 'glyphicon glyphicon-th-list',\n          fa: 'fa fa-list-ol',\n          'fa-3': 'icon-list-ol'\n        },\n        callback: function callback(e) {\n          // Prepend/Give - surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent(); // transform selection and set the cursor into chunked text\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('list text here');\n            e.replaceSelection('1. ' + chunk); // Set the cursor\n\n            cursor = selected.start + 3;\n          } else {\n            if (selected.text.indexOf('\\n') < 0) {\n              chunk = selected.text;\n              e.replaceSelection('1. ' + chunk); // Set the cursor\n\n              cursor = selected.start + 3;\n            } else {\n              var list = [];\n              list = selected.text.split('\\n');\n              chunk = list[0];\n              $.each(list, function (k, v) {\n                list[k] = '1. ' + v;\n              });\n              e.replaceSelection('\\n\\n' + list.join('\\n')); // Set the cursor\n\n              cursor = selected.start + 5;\n            }\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }, {\n        name: 'cmdCode',\n        hotkey: 'Ctrl+K',\n        title: 'Code',\n        icon: {\n          glyph: 'glyphicon glyphicon-asterisk',\n          fa: 'fa fa-code',\n          'fa-3': 'icon-code'\n        },\n        callback: function callback(e) {\n          // Give/remove ** surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent();\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('code text here');\n          } else {\n            chunk = selected.text;\n          } // transform selection and set the cursor into chunked text\n\n\n          if (content.substr(selected.start - 4, 4) === '```\\n' && content.substr(selected.end, 4) === '\\n```') {\n            e.setSelection(selected.start - 4, selected.end + 4);\n            e.replaceSelection(chunk);\n            cursor = selected.start - 4;\n          } else if (content.substr(selected.start - 1, 1) === '`' && content.substr(selected.end, 1) === '`') {\n            e.setSelection(selected.start - 1, selected.end + 1);\n            e.replaceSelection(chunk);\n            cursor = selected.start - 1;\n          } else if (content.indexOf('\\n') > -1) {\n            e.replaceSelection('```\\n' + chunk + '\\n```');\n            cursor = selected.start + 4;\n          } else {\n            e.replaceSelection('`' + chunk + '`');\n            cursor = selected.start + 1;\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }, {\n        name: 'cmdQuote',\n        hotkey: 'Ctrl+Q',\n        title: 'Quote',\n        icon: {\n          glyph: 'glyphicon glyphicon-comment',\n          fa: 'fa fa-quote-left',\n          'fa-3': 'icon-quote-left'\n        },\n        callback: function callback(e) {\n          // Prepend/Give - surround the selection\n          var chunk,\n              cursor,\n              selected = e.getSelection(),\n              content = e.getContent(); // transform selection and set the cursor into chunked text\n\n          if (selected.length === 0) {\n            // Give extra word\n            chunk = e.__localize('quote here');\n            e.replaceSelection('> ' + chunk); // Set the cursor\n\n            cursor = selected.start + 2;\n          } else {\n            if (selected.text.indexOf('\\n') < 0) {\n              chunk = selected.text;\n              e.replaceSelection('> ' + chunk); // Set the cursor\n\n              cursor = selected.start + 2;\n            } else {\n              var list = [];\n              list = selected.text.split('\\n');\n              chunk = list[0];\n              $.each(list, function (k, v) {\n                list[k] = '> ' + v;\n              });\n              e.replaceSelection('\\n\\n' + list.join('\\n')); // Set the cursor\n\n              cursor = selected.start + 4;\n            }\n          } // Set the cursor\n\n\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }]\n    }, {\n      name: 'groupUtil',\n      data: [{\n        name: 'cmdPreview',\n        toggle: true,\n        hotkey: 'Ctrl+P',\n        title: 'Preview',\n        btnText: 'Preview',\n        btnClass: 'btn btn-primary btn-sm',\n        icon: {\n          glyph: 'glyphicon glyphicon-search',\n          fa: 'fa fa-search',\n          'fa-3': 'icon-search'\n        },\n        callback: function callback(e) {\n          // Check the preview mode and toggle based on this flag\n          var isPreview = e.$isPreview,\n              content;\n\n          if (isPreview === false) {\n            // Give flag that tell the editor enter preview mode\n            e.showPreview();\n          } else {\n            e.hidePreview();\n          }\n        }\n      }]\n    }]],\n    additionalButtons: [],\n    // Place to hook more buttons by code\n    reorderButtonGroups: [],\n    hiddenButtons: [],\n    // Default hidden buttons\n    disabledButtons: [],\n    // Default disabled buttons\n    footer: '',\n    fullscreen: {\n      enable: true,\n      icons: {\n        fullscreenOn: {\n          fa: 'fa fa-expand',\n          glyph: 'glyphicon glyphicon-fullscreen',\n          'fa-3': 'icon-resize-full'\n        },\n        fullscreenOff: {\n          fa: 'fa fa-compress',\n          glyph: 'glyphicon glyphicon-fullscreen',\n          'fa-3': 'icon-resize-small'\n        }\n      }\n    },\n\n    /* Events hook */\n    onShow: function onShow(e) {},\n    onPreview: function onPreview(e) {},\n    onSave: function onSave(e) {},\n    onBlur: function onBlur(e) {},\n    onFocus: function onFocus(e) {},\n    onChange: function onChange(e) {},\n    onFullscreen: function onFullscreen(e) {},\n    onSelect: function onSelect(e) {}\n  };\n  $.fn.markdown.Constructor = Markdown;\n  /* MARKDOWN NO CONFLICT\n   * ==================== */\n\n  $.fn.markdown.noConflict = function () {\n    $.fn.markdown = old;\n    return this;\n  };\n  /* MARKDOWN GLOBAL FUNCTION & DATA-API\n  * ==================================== */\n\n\n  var initMarkdown = function initMarkdown(el) {\n    var $this = el;\n\n    if ($this.data('markdown')) {\n      $this.data('markdown').showEditor();\n      return;\n    }\n\n    $this.markdown();\n  };\n\n  var blurNonFocused = function blurNonFocused(e) {\n    var $activeElement = $(document.activeElement); // Blur event\n\n    $(document).find('.md-editor').each(function () {\n      var $this = $(this),\n          focused = $activeElement.closest('.md-editor')[0] === this,\n          attachedMarkdown = $this.find('textarea').data('markdown') || $this.find('div[data-provider=\"markdown-preview\"]').data('markdown');\n\n      if (attachedMarkdown && !focused) {\n        attachedMarkdown.blur();\n      }\n    });\n  };\n\n  $(document).on('click.markdown.data-api', '[data-provide=\"markdown-editable\"]', function (e) {\n    initMarkdown($(this));\n    e.preventDefault();\n  }).on('click focusin', function (e) {\n    blurNonFocused(e);\n  }).ready(function () {\n    $('textarea[data-provide=\"markdown\"]').each(function () {\n      initMarkdown($(this));\n    });\n  });\n});","map":null,"metadata":{},"sourceType":"script"}