{"ast":null,"code":"/**\n * @license\n * Copyright 2011 Paul Felix (paul.eric.felix@gmail.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/*global Dygraph:false,TouchEvent:false */\n\n/**\n * @fileoverview This file contains the RangeSelector plugin used to provide\n * a timeline range selector widget for dygraphs.\n */\n\n/*global Dygraph:false */\n\"use strict\";\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nvar _dygraphUtils = require('../dygraph-utils');\n\nvar utils = _interopRequireWildcard(_dygraphUtils);\n\nvar _dygraphInteractionModel = require('../dygraph-interaction-model');\n\nvar _dygraphInteractionModel2 = _interopRequireDefault(_dygraphInteractionModel);\n\nvar _iframeTarp = require('../iframe-tarp');\n\nvar _iframeTarp2 = _interopRequireDefault(_iframeTarp);\n\nvar rangeSelector = function rangeSelector() {\n  this.hasTouchInterface_ = typeof TouchEvent != 'undefined';\n  this.isMobileDevice_ = /mobile|android/gi.test(navigator.appVersion);\n  this.interfaceCreated_ = false;\n};\n\nrangeSelector.prototype.toString = function () {\n  return \"RangeSelector Plugin\";\n};\n\nrangeSelector.prototype.activate = function (dygraph) {\n  this.dygraph_ = dygraph;\n\n  if (this.getOption_('showRangeSelector')) {\n    this.createInterface_();\n  }\n\n  return {\n    layout: this.reserveSpace_,\n    predraw: this.renderStaticLayer_,\n    didDrawChart: this.renderInteractiveLayer_\n  };\n};\n\nrangeSelector.prototype.destroy = function () {\n  this.bgcanvas_ = null;\n  this.fgcanvas_ = null;\n  this.leftZoomHandle_ = null;\n  this.rightZoomHandle_ = null;\n}; //------------------------------------------------------------------\n// Private methods\n//------------------------------------------------------------------\n\n\nrangeSelector.prototype.getOption_ = function (name, opt_series) {\n  return this.dygraph_.getOption(name, opt_series);\n};\n\nrangeSelector.prototype.setDefaultOption_ = function (name, value) {\n  this.dygraph_.attrs_[name] = value;\n};\n/**\n * @private\n * Creates the range selector elements and adds them to the graph.\n */\n\n\nrangeSelector.prototype.createInterface_ = function () {\n  this.createCanvases_();\n  this.createZoomHandles_();\n  this.initInteraction_(); // Range selector and animatedZooms have a bad interaction. See issue 359.\n\n  if (this.getOption_('animatedZooms')) {\n    console.warn('Animated zooms and range selector are not compatible; disabling animatedZooms.');\n    this.dygraph_.updateOptions({\n      animatedZooms: false\n    }, true);\n  }\n\n  this.interfaceCreated_ = true;\n  this.addToGraph_();\n};\n/**\n * @private\n * Adds the range selector to the graph.\n */\n\n\nrangeSelector.prototype.addToGraph_ = function () {\n  var graphDiv = this.graphDiv_ = this.dygraph_.graphDiv;\n  graphDiv.appendChild(this.bgcanvas_);\n  graphDiv.appendChild(this.fgcanvas_);\n  graphDiv.appendChild(this.leftZoomHandle_);\n  graphDiv.appendChild(this.rightZoomHandle_);\n};\n/**\n * @private\n * Removes the range selector from the graph.\n */\n\n\nrangeSelector.prototype.removeFromGraph_ = function () {\n  var graphDiv = this.graphDiv_;\n  graphDiv.removeChild(this.bgcanvas_);\n  graphDiv.removeChild(this.fgcanvas_);\n  graphDiv.removeChild(this.leftZoomHandle_);\n  graphDiv.removeChild(this.rightZoomHandle_);\n  this.graphDiv_ = null;\n};\n/**\n * @private\n * Called by Layout to allow range selector to reserve its space.\n */\n\n\nrangeSelector.prototype.reserveSpace_ = function (e) {\n  if (this.getOption_('showRangeSelector')) {\n    e.reserveSpaceBottom(this.getOption_('rangeSelectorHeight') + 4);\n  }\n};\n/**\n * @private\n * Renders the static portion of the range selector at the predraw stage.\n */\n\n\nrangeSelector.prototype.renderStaticLayer_ = function () {\n  if (!this.updateVisibility_()) {\n    return;\n  }\n\n  this.resize_();\n  this.drawStaticLayer_();\n};\n/**\n * @private\n * Renders the interactive portion of the range selector after the chart has been drawn.\n */\n\n\nrangeSelector.prototype.renderInteractiveLayer_ = function () {\n  if (!this.updateVisibility_() || this.isChangingRange_) {\n    return;\n  }\n\n  this.placeZoomHandles_();\n  this.drawInteractiveLayer_();\n};\n/**\n * @private\n * Check to see if the range selector is enabled/disabled and update visibility accordingly.\n */\n\n\nrangeSelector.prototype.updateVisibility_ = function () {\n  var enabled = this.getOption_('showRangeSelector');\n\n  if (enabled) {\n    if (!this.interfaceCreated_) {\n      this.createInterface_();\n    } else if (!this.graphDiv_ || !this.graphDiv_.parentNode) {\n      this.addToGraph_();\n    }\n  } else if (this.graphDiv_) {\n    this.removeFromGraph_();\n    var dygraph = this.dygraph_;\n    setTimeout(function () {\n      dygraph.width_ = 0;\n      dygraph.resize();\n    }, 1);\n  }\n\n  return enabled;\n};\n/**\n * @private\n * Resizes the range selector.\n */\n\n\nrangeSelector.prototype.resize_ = function () {\n  function setElementRect(canvas, context, rect, pixelRatioOption) {\n    var canvasScale = pixelRatioOption || utils.getContextPixelRatio(context);\n    canvas.style.top = rect.y + 'px';\n    canvas.style.left = rect.x + 'px';\n    canvas.width = rect.w * canvasScale;\n    canvas.height = rect.h * canvasScale;\n    canvas.style.width = rect.w + 'px';\n    canvas.style.height = rect.h + 'px';\n\n    if (canvasScale != 1) {\n      context.scale(canvasScale, canvasScale);\n    }\n  }\n\n  var plotArea = this.dygraph_.layout_.getPlotArea();\n  var xAxisLabelHeight = 0;\n\n  if (this.dygraph_.getOptionForAxis('drawAxis', 'x')) {\n    xAxisLabelHeight = this.getOption_('xAxisHeight') || this.getOption_('axisLabelFontSize') + 2 * this.getOption_('axisTickSize');\n  }\n\n  this.canvasRect_ = {\n    x: plotArea.x,\n    y: plotArea.y + plotArea.h + xAxisLabelHeight + 4,\n    w: plotArea.w,\n    h: this.getOption_('rangeSelectorHeight')\n  };\n  var pixelRatioOption = this.dygraph_.getNumericOption('pixelRatio');\n  setElementRect(this.bgcanvas_, this.bgcanvas_ctx_, this.canvasRect_, pixelRatioOption);\n  setElementRect(this.fgcanvas_, this.fgcanvas_ctx_, this.canvasRect_, pixelRatioOption);\n};\n/**\n * @private\n * Creates the background and foreground canvases.\n */\n\n\nrangeSelector.prototype.createCanvases_ = function () {\n  this.bgcanvas_ = utils.createCanvas();\n  this.bgcanvas_.className = 'dygraph-rangesel-bgcanvas';\n  this.bgcanvas_.style.position = 'absolute';\n  this.bgcanvas_.style.zIndex = 9;\n  this.bgcanvas_ctx_ = utils.getContext(this.bgcanvas_);\n  this.fgcanvas_ = utils.createCanvas();\n  this.fgcanvas_.className = 'dygraph-rangesel-fgcanvas';\n  this.fgcanvas_.style.position = 'absolute';\n  this.fgcanvas_.style.zIndex = 9;\n  this.fgcanvas_.style.cursor = 'default';\n  this.fgcanvas_ctx_ = utils.getContext(this.fgcanvas_);\n};\n/**\n * @private\n * Creates the zoom handle elements.\n */\n\n\nrangeSelector.prototype.createZoomHandles_ = function () {\n  var img = new Image();\n  img.className = 'dygraph-rangesel-zoomhandle';\n  img.style.position = 'absolute';\n  img.style.zIndex = 10;\n  img.style.visibility = 'hidden'; // Initially hidden so they don't show up in the wrong place.\n\n  img.style.cursor = 'col-resize'; // TODO: change image to more options\n\n  img.width = 9;\n  img.height = 16;\n  img.src = 'data:image/png;base64,' + 'iVBORw0KGgoAAAANSUhEUgAAAAkAAAAQCAYAAADESFVDAAAAAXNSR0IArs4c6QAAAAZiS0dEANAA' + 'zwDP4Z7KegAAAAlwSFlzAAAOxAAADsQBlSsOGwAAAAd0SU1FB9sHGw0cMqdt1UwAAAAZdEVYdENv' + 'bW1lbnQAQ3JlYXRlZCB3aXRoIEdJTVBXgQ4XAAAAaElEQVQoz+3SsRFAQBCF4Z9WJM8KCDVwownl' + '6YXsTmCUsyKGkZzcl7zkz3YLkypgAnreFmDEpHkIwVOMfpdi9CEEN2nGpFdwD03yEqDtOgCaun7s' + 'qSTDH32I1pQA2Pb9sZecAxc5r3IAb21d6878xsAAAAAASUVORK5CYII=';\n\n  if (this.isMobileDevice_) {\n    img.width *= 2;\n    img.height *= 2;\n  }\n\n  this.leftZoomHandle_ = img;\n  this.rightZoomHandle_ = img.cloneNode(false);\n};\n/**\n * @private\n * Sets up the interaction for the range selector.\n */\n\n\nrangeSelector.prototype.initInteraction_ = function () {\n  var self = this;\n  var topElem = document;\n  var clientXLast = 0;\n  var handle = null;\n  var isZooming = false;\n  var isPanning = false;\n  var dynamic = !this.isMobileDevice_; // We cover iframes during mouse interactions. See comments in\n  // dygraph-utils.js for more info on why this is a good idea.\n\n  var tarp = new _iframeTarp2['default'](); // functions, defined below.  Defining them this way (rather than with\n  // \"function foo() {...}\" makes JSHint happy.\n\n  var toXDataWindow, onZoomStart, onZoom, _onZoomEnd, doZoom, isMouseInPanZone, onPanStart, onPan, _onPanEnd, doPan, onCanvasHover; // Touch event functions\n\n\n  var onZoomHandleTouchEvent, onCanvasTouchEvent, addTouchEvents;\n\n  toXDataWindow = function toXDataWindow(zoomHandleStatus) {\n    var xDataLimits = self.dygraph_.xAxisExtremes();\n    var fact = (xDataLimits[1] - xDataLimits[0]) / self.canvasRect_.w;\n    var xDataMin = xDataLimits[0] + (zoomHandleStatus.leftHandlePos - self.canvasRect_.x) * fact;\n    var xDataMax = xDataLimits[0] + (zoomHandleStatus.rightHandlePos - self.canvasRect_.x) * fact;\n    return [xDataMin, xDataMax];\n  };\n\n  onZoomStart = function onZoomStart(e) {\n    utils.cancelEvent(e);\n    isZooming = true;\n    clientXLast = e.clientX;\n    handle = e.target ? e.target : e.srcElement;\n\n    if (e.type === 'mousedown' || e.type === 'dragstart') {\n      // These events are removed manually.\n      utils.addEvent(topElem, 'mousemove', onZoom);\n      utils.addEvent(topElem, 'mouseup', _onZoomEnd);\n    }\n\n    self.fgcanvas_.style.cursor = 'col-resize';\n    tarp.cover();\n    return true;\n  };\n\n  onZoom = function onZoom(e) {\n    if (!isZooming) {\n      return false;\n    }\n\n    utils.cancelEvent(e);\n    var delX = e.clientX - clientXLast;\n\n    if (Math.abs(delX) < 4) {\n      return true;\n    }\n\n    clientXLast = e.clientX; // Move handle.\n\n    var zoomHandleStatus = self.getZoomHandleStatus_();\n    var newPos;\n\n    if (handle == self.leftZoomHandle_) {\n      newPos = zoomHandleStatus.leftHandlePos + delX;\n      newPos = Math.min(newPos, zoomHandleStatus.rightHandlePos - handle.width - 3);\n      newPos = Math.max(newPos, self.canvasRect_.x);\n    } else {\n      newPos = zoomHandleStatus.rightHandlePos + delX;\n      newPos = Math.min(newPos, self.canvasRect_.x + self.canvasRect_.w);\n      newPos = Math.max(newPos, zoomHandleStatus.leftHandlePos + handle.width + 3);\n    }\n\n    var halfHandleWidth = handle.width / 2;\n    handle.style.left = newPos - halfHandleWidth + 'px';\n    self.drawInteractiveLayer_(); // Zoom on the fly.\n\n    if (dynamic) {\n      doZoom();\n    }\n\n    return true;\n  };\n\n  _onZoomEnd = function onZoomEnd(e) {\n    if (!isZooming) {\n      return false;\n    }\n\n    isZooming = false;\n    tarp.uncover();\n    utils.removeEvent(topElem, 'mousemove', onZoom);\n    utils.removeEvent(topElem, 'mouseup', _onZoomEnd);\n    self.fgcanvas_.style.cursor = 'default'; // If on a slower device, zoom now.\n\n    if (!dynamic) {\n      doZoom();\n    }\n\n    return true;\n  };\n\n  doZoom = function doZoom() {\n    try {\n      var zoomHandleStatus = self.getZoomHandleStatus_();\n      self.isChangingRange_ = true;\n\n      if (!zoomHandleStatus.isZoomed) {\n        self.dygraph_.resetZoom();\n      } else {\n        var xDataWindow = toXDataWindow(zoomHandleStatus);\n        self.dygraph_.doZoomXDates_(xDataWindow[0], xDataWindow[1]);\n      }\n    } finally {\n      self.isChangingRange_ = false;\n    }\n  };\n\n  isMouseInPanZone = function isMouseInPanZone(e) {\n    var rect = self.leftZoomHandle_.getBoundingClientRect();\n    var leftHandleClientX = rect.left + rect.width / 2;\n    rect = self.rightZoomHandle_.getBoundingClientRect();\n    var rightHandleClientX = rect.left + rect.width / 2;\n    return e.clientX > leftHandleClientX && e.clientX < rightHandleClientX;\n  };\n\n  onPanStart = function onPanStart(e) {\n    if (!isPanning && isMouseInPanZone(e) && self.getZoomHandleStatus_().isZoomed) {\n      utils.cancelEvent(e);\n      isPanning = true;\n      clientXLast = e.clientX;\n\n      if (e.type === 'mousedown') {\n        // These events are removed manually.\n        utils.addEvent(topElem, 'mousemove', onPan);\n        utils.addEvent(topElem, 'mouseup', _onPanEnd);\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  onPan = function onPan(e) {\n    if (!isPanning) {\n      return false;\n    }\n\n    utils.cancelEvent(e);\n    var delX = e.clientX - clientXLast;\n\n    if (Math.abs(delX) < 4) {\n      return true;\n    }\n\n    clientXLast = e.clientX; // Move range view\n\n    var zoomHandleStatus = self.getZoomHandleStatus_();\n    var leftHandlePos = zoomHandleStatus.leftHandlePos;\n    var rightHandlePos = zoomHandleStatus.rightHandlePos;\n    var rangeSize = rightHandlePos - leftHandlePos;\n\n    if (leftHandlePos + delX <= self.canvasRect_.x) {\n      leftHandlePos = self.canvasRect_.x;\n      rightHandlePos = leftHandlePos + rangeSize;\n    } else if (rightHandlePos + delX >= self.canvasRect_.x + self.canvasRect_.w) {\n      rightHandlePos = self.canvasRect_.x + self.canvasRect_.w;\n      leftHandlePos = rightHandlePos - rangeSize;\n    } else {\n      leftHandlePos += delX;\n      rightHandlePos += delX;\n    }\n\n    var halfHandleWidth = self.leftZoomHandle_.width / 2;\n    self.leftZoomHandle_.style.left = leftHandlePos - halfHandleWidth + 'px';\n    self.rightZoomHandle_.style.left = rightHandlePos - halfHandleWidth + 'px';\n    self.drawInteractiveLayer_(); // Do pan on the fly.\n\n    if (dynamic) {\n      doPan();\n    }\n\n    return true;\n  };\n\n  _onPanEnd = function onPanEnd(e) {\n    if (!isPanning) {\n      return false;\n    }\n\n    isPanning = false;\n    utils.removeEvent(topElem, 'mousemove', onPan);\n    utils.removeEvent(topElem, 'mouseup', _onPanEnd); // If on a slower device, do pan now.\n\n    if (!dynamic) {\n      doPan();\n    }\n\n    return true;\n  };\n\n  doPan = function doPan() {\n    try {\n      self.isChangingRange_ = true;\n      self.dygraph_.dateWindow_ = toXDataWindow(self.getZoomHandleStatus_());\n      self.dygraph_.drawGraph_(false);\n    } finally {\n      self.isChangingRange_ = false;\n    }\n  };\n\n  onCanvasHover = function onCanvasHover(e) {\n    if (isZooming || isPanning) {\n      return;\n    }\n\n    var cursor = isMouseInPanZone(e) ? 'move' : 'default';\n\n    if (cursor != self.fgcanvas_.style.cursor) {\n      self.fgcanvas_.style.cursor = cursor;\n    }\n  };\n\n  onZoomHandleTouchEvent = function onZoomHandleTouchEvent(e) {\n    if (e.type == 'touchstart' && e.targetTouches.length == 1) {\n      if (onZoomStart(e.targetTouches[0])) {\n        utils.cancelEvent(e);\n      }\n    } else if (e.type == 'touchmove' && e.targetTouches.length == 1) {\n      if (onZoom(e.targetTouches[0])) {\n        utils.cancelEvent(e);\n      }\n    } else {\n      _onZoomEnd(e);\n    }\n  };\n\n  onCanvasTouchEvent = function onCanvasTouchEvent(e) {\n    if (e.type == 'touchstart' && e.targetTouches.length == 1) {\n      if (onPanStart(e.targetTouches[0])) {\n        utils.cancelEvent(e);\n      }\n    } else if (e.type == 'touchmove' && e.targetTouches.length == 1) {\n      if (onPan(e.targetTouches[0])) {\n        utils.cancelEvent(e);\n      }\n    } else {\n      _onPanEnd(e);\n    }\n  };\n\n  addTouchEvents = function addTouchEvents(elem, fn) {\n    var types = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];\n\n    for (var i = 0; i < types.length; i++) {\n      self.dygraph_.addAndTrackEvent(elem, types[i], fn);\n    }\n  };\n\n  this.setDefaultOption_('interactionModel', _dygraphInteractionModel2['default'].dragIsPanInteractionModel);\n  this.setDefaultOption_('panEdgeFraction', 0.0001);\n  var dragStartEvent = window.opera ? 'mousedown' : 'dragstart';\n  this.dygraph_.addAndTrackEvent(this.leftZoomHandle_, dragStartEvent, onZoomStart);\n  this.dygraph_.addAndTrackEvent(this.rightZoomHandle_, dragStartEvent, onZoomStart);\n  this.dygraph_.addAndTrackEvent(this.fgcanvas_, 'mousedown', onPanStart);\n  this.dygraph_.addAndTrackEvent(this.fgcanvas_, 'mousemove', onCanvasHover); // Touch events\n\n  if (this.hasTouchInterface_) {\n    addTouchEvents(this.leftZoomHandle_, onZoomHandleTouchEvent);\n    addTouchEvents(this.rightZoomHandle_, onZoomHandleTouchEvent);\n    addTouchEvents(this.fgcanvas_, onCanvasTouchEvent);\n  }\n};\n/**\n * @private\n * Draws the static layer in the background canvas.\n */\n\n\nrangeSelector.prototype.drawStaticLayer_ = function () {\n  var ctx = this.bgcanvas_ctx_;\n  ctx.clearRect(0, 0, this.canvasRect_.w, this.canvasRect_.h);\n\n  try {\n    this.drawMiniPlot_();\n  } catch (ex) {\n    console.warn(ex);\n  }\n\n  var margin = 0.5;\n  this.bgcanvas_ctx_.lineWidth = this.getOption_('rangeSelectorBackgroundLineWidth');\n  ctx.strokeStyle = this.getOption_('rangeSelectorBackgroundStrokeColor');\n  ctx.beginPath();\n  ctx.moveTo(margin, margin);\n  ctx.lineTo(margin, this.canvasRect_.h - margin);\n  ctx.lineTo(this.canvasRect_.w - margin, this.canvasRect_.h - margin);\n  ctx.lineTo(this.canvasRect_.w - margin, margin);\n  ctx.stroke();\n};\n/**\n * @private\n * Draws the mini plot in the background canvas.\n */\n\n\nrangeSelector.prototype.drawMiniPlot_ = function () {\n  var fillStyle = this.getOption_('rangeSelectorPlotFillColor');\n  var fillGradientStyle = this.getOption_('rangeSelectorPlotFillGradientColor');\n  var strokeStyle = this.getOption_('rangeSelectorPlotStrokeColor');\n\n  if (!fillStyle && !strokeStyle) {\n    return;\n  }\n\n  var stepPlot = this.getOption_('stepPlot');\n  var combinedSeriesData = this.computeCombinedSeriesAndLimits_();\n  var yRange = combinedSeriesData.yMax - combinedSeriesData.yMin; // Draw the mini plot.\n\n  var ctx = this.bgcanvas_ctx_;\n  var margin = 0.5;\n  var xExtremes = this.dygraph_.xAxisExtremes();\n  var xRange = Math.max(xExtremes[1] - xExtremes[0], 1.e-30);\n  var xFact = (this.canvasRect_.w - margin) / xRange;\n  var yFact = (this.canvasRect_.h - margin) / yRange;\n  var canvasWidth = this.canvasRect_.w - margin;\n  var canvasHeight = this.canvasRect_.h - margin;\n  var prevX = null,\n      prevY = null;\n  ctx.beginPath();\n  ctx.moveTo(margin, canvasHeight);\n\n  for (var i = 0; i < combinedSeriesData.data.length; i++) {\n    var dataPoint = combinedSeriesData.data[i];\n    var x = dataPoint[0] !== null ? (dataPoint[0] - xExtremes[0]) * xFact : NaN;\n    var y = dataPoint[1] !== null ? canvasHeight - (dataPoint[1] - combinedSeriesData.yMin) * yFact : NaN; // Skip points that don't change the x-value. Overly fine-grained points\n    // can cause major slowdowns with the ctx.fill() call below.\n\n    if (!stepPlot && prevX !== null && Math.round(x) == Math.round(prevX)) {\n      continue;\n    }\n\n    if (isFinite(x) && isFinite(y)) {\n      if (prevX === null) {\n        ctx.lineTo(x, canvasHeight);\n      } else if (stepPlot) {\n        ctx.lineTo(x, prevY);\n      }\n\n      ctx.lineTo(x, y);\n      prevX = x;\n      prevY = y;\n    } else {\n      if (prevX !== null) {\n        if (stepPlot) {\n          ctx.lineTo(x, prevY);\n          ctx.lineTo(x, canvasHeight);\n        } else {\n          ctx.lineTo(prevX, canvasHeight);\n        }\n      }\n\n      prevX = prevY = null;\n    }\n  }\n\n  ctx.lineTo(canvasWidth, canvasHeight);\n  ctx.closePath();\n\n  if (fillStyle) {\n    var lingrad = this.bgcanvas_ctx_.createLinearGradient(0, 0, 0, canvasHeight);\n\n    if (fillGradientStyle) {\n      lingrad.addColorStop(0, fillGradientStyle);\n    }\n\n    lingrad.addColorStop(1, fillStyle);\n    this.bgcanvas_ctx_.fillStyle = lingrad;\n    ctx.fill();\n  }\n\n  if (strokeStyle) {\n    this.bgcanvas_ctx_.strokeStyle = strokeStyle;\n    this.bgcanvas_ctx_.lineWidth = this.getOption_('rangeSelectorPlotLineWidth');\n    ctx.stroke();\n  }\n};\n/**\n * @private\n * Computes and returns the combined series data along with min/max for the mini plot.\n * The combined series consists of averaged values for all series.\n * When series have error bars, the error bars are ignored.\n * @return {Object} An object containing combined series array, ymin, ymax.\n */\n\n\nrangeSelector.prototype.computeCombinedSeriesAndLimits_ = function () {\n  var g = this.dygraph_;\n  var logscale = this.getOption_('logscale');\n  var i; // Select series to combine. By default, all series are combined.\n\n  var numColumns = g.numColumns();\n  var labels = g.getLabels();\n  var includeSeries = new Array(numColumns);\n  var anySet = false;\n  var visibility = g.visibility();\n  var inclusion = [];\n\n  for (i = 1; i < numColumns; i++) {\n    var include = this.getOption_('showInRangeSelector', labels[i]);\n    inclusion.push(include);\n    if (include !== null) anySet = true; // it's set explicitly for this series\n  }\n\n  if (anySet) {\n    for (i = 1; i < numColumns; i++) {\n      includeSeries[i] = inclusion[i - 1];\n    }\n  } else {\n    for (i = 1; i < numColumns; i++) {\n      includeSeries[i] = visibility[i - 1];\n    }\n  } // Create a combined series (average of selected series values).\n  // TODO(danvk): short-circuit if there's only one series.\n\n\n  var rolledSeries = [];\n  var dataHandler = g.dataHandler_;\n  var options = g.attributes_;\n\n  for (i = 1; i < g.numColumns(); i++) {\n    if (!includeSeries[i]) continue;\n    var series = dataHandler.extractSeries(g.rawData_, i, options);\n\n    if (g.rollPeriod() > 1) {\n      series = dataHandler.rollingAverage(series, g.rollPeriod(), options);\n    }\n\n    rolledSeries.push(series);\n  }\n\n  var combinedSeries = [];\n\n  for (i = 0; i < rolledSeries[0].length; i++) {\n    var sum = 0;\n    var count = 0;\n\n    for (var j = 0; j < rolledSeries.length; j++) {\n      var y = rolledSeries[j][i][1];\n      if (y === null || isNaN(y)) continue;\n      count++;\n      sum += y;\n    }\n\n    combinedSeries.push([rolledSeries[0][i][0], sum / count]);\n  } // Compute the y range.\n\n\n  var yMin = Number.MAX_VALUE;\n  var yMax = -Number.MAX_VALUE;\n\n  for (i = 0; i < combinedSeries.length; i++) {\n    var yVal = combinedSeries[i][1];\n\n    if (yVal !== null && isFinite(yVal) && (!logscale || yVal > 0)) {\n      yMin = Math.min(yMin, yVal);\n      yMax = Math.max(yMax, yVal);\n    }\n  } // Convert Y data to log scale if needed.\n  // Also, expand the Y range to compress the mini plot a little.\n\n\n  var extraPercent = 0.25;\n\n  if (logscale) {\n    yMax = utils.log10(yMax);\n    yMax += yMax * extraPercent;\n    yMin = utils.log10(yMin);\n\n    for (i = 0; i < combinedSeries.length; i++) {\n      combinedSeries[i][1] = utils.log10(combinedSeries[i][1]);\n    }\n  } else {\n    var yExtra;\n    var yRange = yMax - yMin;\n\n    if (yRange <= Number.MIN_VALUE) {\n      yExtra = yMax * extraPercent;\n    } else {\n      yExtra = yRange * extraPercent;\n    }\n\n    yMax += yExtra;\n    yMin -= yExtra;\n  }\n\n  return {\n    data: combinedSeries,\n    yMin: yMin,\n    yMax: yMax\n  };\n};\n/**\n * @private\n * Places the zoom handles in the proper position based on the current X data window.\n */\n\n\nrangeSelector.prototype.placeZoomHandles_ = function () {\n  var xExtremes = this.dygraph_.xAxisExtremes();\n  var xWindowLimits = this.dygraph_.xAxisRange();\n  var xRange = xExtremes[1] - xExtremes[0];\n  var leftPercent = Math.max(0, (xWindowLimits[0] - xExtremes[0]) / xRange);\n  var rightPercent = Math.max(0, (xExtremes[1] - xWindowLimits[1]) / xRange);\n  var leftCoord = this.canvasRect_.x + this.canvasRect_.w * leftPercent;\n  var rightCoord = this.canvasRect_.x + this.canvasRect_.w * (1 - rightPercent);\n  var handleTop = Math.max(this.canvasRect_.y, this.canvasRect_.y + (this.canvasRect_.h - this.leftZoomHandle_.height) / 2);\n  var halfHandleWidth = this.leftZoomHandle_.width / 2;\n  this.leftZoomHandle_.style.left = leftCoord - halfHandleWidth + 'px';\n  this.leftZoomHandle_.style.top = handleTop + 'px';\n  this.rightZoomHandle_.style.left = rightCoord - halfHandleWidth + 'px';\n  this.rightZoomHandle_.style.top = this.leftZoomHandle_.style.top;\n  this.leftZoomHandle_.style.visibility = 'visible';\n  this.rightZoomHandle_.style.visibility = 'visible';\n};\n/**\n * @private\n * Draws the interactive layer in the foreground canvas.\n */\n\n\nrangeSelector.prototype.drawInteractiveLayer_ = function () {\n  var ctx = this.fgcanvas_ctx_;\n  ctx.clearRect(0, 0, this.canvasRect_.w, this.canvasRect_.h);\n  var margin = 1;\n  var width = this.canvasRect_.w - margin;\n  var height = this.canvasRect_.h - margin;\n  var zoomHandleStatus = this.getZoomHandleStatus_();\n  ctx.strokeStyle = this.getOption_('rangeSelectorForegroundStrokeColor');\n  ctx.lineWidth = this.getOption_('rangeSelectorForegroundLineWidth');\n\n  if (!zoomHandleStatus.isZoomed) {\n    ctx.beginPath();\n    ctx.moveTo(margin, margin);\n    ctx.lineTo(margin, height);\n    ctx.lineTo(width, height);\n    ctx.lineTo(width, margin);\n    ctx.stroke();\n  } else {\n    var leftHandleCanvasPos = Math.max(margin, zoomHandleStatus.leftHandlePos - this.canvasRect_.x);\n    var rightHandleCanvasPos = Math.min(width, zoomHandleStatus.rightHandlePos - this.canvasRect_.x);\n    ctx.fillStyle = 'rgba(240, 240, 240, ' + this.getOption_('rangeSelectorAlpha').toString() + ')';\n    ctx.fillRect(0, 0, leftHandleCanvasPos, this.canvasRect_.h);\n    ctx.fillRect(rightHandleCanvasPos, 0, this.canvasRect_.w - rightHandleCanvasPos, this.canvasRect_.h);\n    ctx.beginPath();\n    ctx.moveTo(margin, margin);\n    ctx.lineTo(leftHandleCanvasPos, margin);\n    ctx.lineTo(leftHandleCanvasPos, height);\n    ctx.lineTo(rightHandleCanvasPos, height);\n    ctx.lineTo(rightHandleCanvasPos, margin);\n    ctx.lineTo(width, margin);\n    ctx.stroke();\n  }\n};\n/**\n * @private\n * Returns the current zoom handle position information.\n * @return {Object} The zoom handle status.\n */\n\n\nrangeSelector.prototype.getZoomHandleStatus_ = function () {\n  var halfHandleWidth = this.leftZoomHandle_.width / 2;\n  var leftHandlePos = parseFloat(this.leftZoomHandle_.style.left) + halfHandleWidth;\n  var rightHandlePos = parseFloat(this.rightZoomHandle_.style.left) + halfHandleWidth;\n  return {\n    leftHandlePos: leftHandlePos,\n    rightHandlePos: rightHandlePos,\n    isZoomed: leftHandlePos - 1 > this.canvasRect_.x || rightHandlePos + 1 < this.canvasRect_.x + this.canvasRect_.w\n  };\n};\n\nexports['default'] = rangeSelector;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}