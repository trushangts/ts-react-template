{"ast":null,"code":"'use strict';\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nexports.__esModule = true;\n\nvar GenericResponse = require(\"http-response-object\");\n\nvar Promise = require(\"promise\");\n\nvar ResponsePromise_1 = require(\"./ResponsePromise\");\n\nexports.ResponsePromise = ResponsePromise_1.ResponsePromise;\n\nvar handle_qs_1 = require(\"./handle-qs\");\n\nfunction request(method, url, options) {\n  return ResponsePromise_1[\"default\"](new Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest(); // check types of arguments\n\n    if (typeof method !== 'string') {\n      throw new TypeError('The method must be a string.');\n    }\n\n    if (typeof url !== 'string') {\n      throw new TypeError('The URL/path must be a string.');\n    }\n\n    if (options == null) {\n      options = {};\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('Options must be an object (or null).');\n    }\n\n    method = method.toUpperCase();\n\n    function attempt(n, options) {\n      request(method, url, {\n        qs: options.qs,\n        headers: options.headers,\n        timeout: options.timeout\n      }).nodeify(function (err, res) {\n        var retry = !!(err || res.statusCode >= 400);\n\n        if (typeof options.retry === 'function') {\n          retry = options.retry(err, res, n + 1);\n        }\n\n        if (n >= (options.maxRetries || 5)) {\n          retry = false;\n        }\n\n        if (retry) {\n          var delay = options.retryDelay;\n\n          if (typeof options.retryDelay === 'function') {\n            delay = options.retryDelay(err, res, n + 1);\n          }\n\n          delay = delay || 200;\n          setTimeout(function () {\n            attempt(n + 1, options);\n          }, delay);\n        } else {\n          if (err) reject(err);else resolve(res);\n        }\n      });\n    }\n\n    if (options.retry && method === 'GET') {\n      return attempt(0, options);\n    }\n\n    var headers = options.headers || {}; // handle cross domain\n\n    var match;\n    var crossDomain = !!((match = /^([\\w-]+:)?\\/\\/([^\\/]+)/.exec(url)) && match[2] != location.host);\n\n    if (!crossDomain) {\n      headers = __assign({}, headers, {\n        'X-Requested-With': 'XMLHttpRequest'\n      });\n    } // handle query string\n\n\n    if (options.qs) {\n      url = handle_qs_1[\"default\"](url, options.qs);\n    } // handle json body\n\n\n    if (options.json) {\n      options.body = JSON.stringify(options.json);\n      headers = __assign({}, headers, {\n        'Content-Type': 'application/json'\n      });\n    }\n\n    if (options.form) {\n      options.body = options.form;\n    }\n\n    if (options.timeout) {\n      xhr.timeout = options.timeout;\n      var start_1 = Date.now();\n\n      xhr.ontimeout = function () {\n        var duration = Date.now() - start_1;\n        var err = new Error('Request timed out after ' + duration + 'ms');\n        err.timeout = true;\n        err.duration = duration;\n        reject(err);\n      };\n    }\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        var headers = {};\n        xhr.getAllResponseHeaders().split('\\r\\n').forEach(function (header) {\n          var h = header.split(':');\n\n          if (h.length > 1) {\n            headers[h[0].toLowerCase()] = h.slice(1).join(':').trim();\n          }\n        });\n        var res = new GenericResponse(xhr.status, headers, xhr.responseText, url);\n        resolve(res);\n      }\n    }; // method, url, async\n\n\n    xhr.open(method, url, true);\n\n    for (var name in headers) {\n      xhr.setRequestHeader(name, headers[name]);\n    } // avoid sending empty string (#319)\n\n\n    xhr.send(options.body ? options.body : null);\n  }));\n}\n\nvar fd = FormData;\nexports.FormData = fd;\nexports[\"default\"] = request;\nmodule.exports = request;\nmodule.exports[\"default\"] = request;\nmodule.exports.FormData = fd;","map":null,"metadata":{},"sourceType":"script"}