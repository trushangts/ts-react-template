{"ast":null,"code":"/*         ______________________________________\r\n  ________|                                      |_______\r\n  \\       |             JarvisWidget             |      /\r\n   \\      |      Copyright Â© 2014 MyOrange       |     /\r\n   /      |______________________________________|     \\\r\n  /__________)                                (_________\\\r\n\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n * =======================================================================\r\n * JarvisWidget is FULLY owned and LICENSED by MYORANGE INC.\r\n * This script may NOT be RESOLD or REDISTRUBUTED on its own under any\r\n * circumstances, and is only to be used with this purchased\r\n * copy of SmartAdmin Template.\r\n * =======================================================================\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n * =======================================================================\r\n * original filename: jarvis.widget.js\r\n * filesize: 56.7 KB (58,158 bytes)\r\n * author: Sunny (@bootstraphunt)\r\n * email: info@myorange.ca\r\n */\nimport $ from \"jquery\"; //\"use strict\";\n\nvar pluginName = \"jarvisWidgets\";\n/**\r\n * Check for touch support and set right click events.\r\n **/\n\nvar clickEvent = (\"ontouchstart\" in window || window.DocumentTouch && document instanceof DocumentTouch ? \"touchstart\" : \"click\") + \".\" + pluginName;\n\nfunction Plugin(element, options) {\n  /**\r\n   * Variables.\r\n   **/\n  this.obj = $(element);\n  this.o = $.extend({}, $.fn[pluginName].defaults, options);\n  this.objId = this.obj.attr(\"id\");\n  this.pwCtrls = \".jarviswidget-ctrls\";\n  this.widget = this.obj.find(this.o.widgets);\n  this.toggleClass = this.o.toggleClass.split(\"|\");\n  this.editClass = this.o.editClass.split(\"|\");\n  this.fullscreenClass = this.o.fullscreenClass.split(\"|\");\n  this.customClass = this.o.customClass.split(\"|\");\n  this.storage = {\n    enabled: this.o.localStorage\n  };\n  this.initialized = false;\n  this.init();\n}\n\nPlugin.prototype = {\n  /**\r\n   * Function for the indicator image.\r\n   *\r\n   * @param:\r\n   **/\n  _runLoaderWidget: function _runLoaderWidget(elm) {\n    var self = this;\n\n    if (self.o.indicator === true) {\n      elm.parents(self.o.widgets).find(\".jarviswidget-loader:first\").stop(true, true).fadeIn(100).delay(self.o.indicatorTime).fadeOut(100);\n    }\n  },\n\n  /**\r\n   * Create a fixed timestamp.\r\n   *\r\n   * @param: t | date | Current date.\r\n   **/\n  _getPastTimestamp: function _getPastTimestamp(t) {\n    var self = this;\n    var da = new Date(t);\n    /**\r\n     * Get and set the date and time.\r\n     **/\n\n    var tsMonth = da.getMonth() + 1; // index based\n\n    var tsDay = da.getDate();\n    var tsYear = da.getFullYear();\n    var tsHours = da.getHours();\n    var tsMinutes = da.getMinutes();\n    var tsSeconds = da.getUTCSeconds();\n    /**\r\n     * Checking for one digit values, if so add an zero.\r\n     **/\n\n    if (tsMonth < 10) {\n      tsMonth = \"0\" + tsMonth;\n    }\n\n    if (tsDay < 10) {\n      tsDay = \"0\" + tsDay;\n    }\n\n    if (tsHours < 10) {\n      tsHours = \"0\" + tsHours;\n    }\n\n    if (tsMinutes < 10) {\n      tsMinutes = \"0\" + tsMinutes;\n    }\n\n    if (tsSeconds < 10) {\n      tsSeconds = \"0\" + tsSeconds;\n    }\n    /**\r\n     * The output, how you want it.\r\n     **/\n\n\n    var format = self.o.timestampFormat.replace(/%d%/g, tsDay).replace(/%m%/g, tsMonth).replace(/%y%/g, tsYear).replace(/%h%/g, tsHours).replace(/%i%/g, tsMinutes).replace(/%s%/g, tsSeconds);\n    return format;\n  },\n\n  /**\r\n   * AJAX load File, which get and shows the .\r\n   *\r\n   * @param: awidget | object  | The widget.\r\n   * @param: file    | file    | The file thats beeing loaded.\r\n   * @param: loader  | object  | The widget.\r\n   **/\n  _loadAjaxFile: function _loadAjaxFile(awidget, file, loader) {\n    var self = this;\n    awidget.find(\".widget-body\").load(file, function (response, status, xhr) {\n      var $this = $(this);\n      /**\r\n       * If action runs into an error display an error msg.\r\n       **/\n\n      if (status == \"error\") {\n        $this.html('<h4 class=\"alert alert-danger\">' + self.o.labelError + \"<b> \" + xhr.status + \" \" + xhr.statusText + \"</b></h4>\");\n      }\n      /**\r\n       * Run if there are no errors.\r\n       **/\n\n\n      if (status == \"success\") {\n        /**\r\n         * Show a timestamp.\r\n         **/\n        var aPalceholder = awidget.find(self.o.timestampPlaceholder);\n\n        if (aPalceholder.length) {\n          aPalceholder.html(self._getPastTimestamp(new Date()));\n        }\n        /**\r\n         * Run the callback function.\r\n         **/\n\n\n        if (typeof self.o.afterLoad == \"function\") {\n          self.o.afterLoad.call(this, awidget);\n        }\n      }\n\n      self = null;\n    });\n    /**\r\n     * Run function for the indicator image.\r\n     **/\n\n    this._runLoaderWidget(loader);\n  },\n  _loadKeys: function _loadKeys() {\n    var self = this; //*****************************************************************//\n    /////////////////////////// SET/GET KEYS ////////////////////////////\n    //*****************************************************************//\n    // TODO : Push state does not work on IE9, try to find a way to detect IE and use a seperate filter\n\n    if (self.o.ajaxnav === true) {\n      var widget_url = location.hash.replace(/^#/, \"\");\n      self.storage.keySettings = \"Plugin_settings_\" + widget_url + \"_\" + self.objId;\n      self.storage.keyPosition = \"Plugin_position_\" + widget_url + \"_\" + self.objId;\n    } else if (self.initialized === false) {\n      var widget_url = self.o.pageKey || location.pathname;\n      self.storage.keySettings = \"jarvisWidgets_settings_\" + widget_url + \"_\" + self.objId;\n      self.storage.keyPosition = \"jarvisWidgets_position_\" + widget_url + \"_\" + self.objId;\n    }\n  },\n\n  /**\r\n   * Save all settings to the localStorage.\r\n   *\r\n   * @param:\r\n   **/\n  _saveSettingsWidget: function _saveSettingsWidget() {\n    var self = this;\n    var storage = self.storage;\n\n    self._loadKeys();\n\n    var storeSettings = self.obj.find(self.o.widgets).map(function () {\n      var storeSettingsStr = {};\n      storeSettingsStr.id = $(this).attr(\"id\");\n      storeSettingsStr.style = $(this).attr(\"data-widget-attstyle\");\n      storeSettingsStr.title = $(this).children(\"header\").children(\"h2\").text();\n      storeSettingsStr.hidden = $(this).css(\"display\") == \"none\" ? 1 : 0;\n      storeSettingsStr.collapsed = $(this).hasClass(\"jarviswidget-collapsed\") ? 1 : 0;\n      return storeSettingsStr;\n    }).get();\n    var storeSettingsObj = JSON.stringify({\n      widget: storeSettings\n    });\n    /* Place it in the storage(only if needed) */\n\n    if (storage.enabled && storage.getKeySettings != storeSettingsObj) {\n      localStorage.setItem(storage.keySettings, storeSettingsObj);\n      storage.getKeySettings = storeSettingsObj;\n    }\n    /**\r\n     * Run the callback function.\r\n     **/\n\n\n    if (typeof self.o.onSave == \"function\") {\n      self.o.onSave.call(this, null, storeSettingsObj, storage.keySettings);\n    }\n  },\n\n  /**\r\n   * Save positions to the localStorage.\r\n   *\r\n   * @param:\r\n   **/\n  _savePositionWidget: function _savePositionWidget() {\n    var self = this;\n    var storage = self.storage;\n\n    self._loadKeys();\n\n    var mainArr = self.obj.find(self.o.grid + \".sortable-grid\").map(function () {\n      var subArr = $(this).find(self.o.widgets).map(function () {\n        return {\n          id: $(this).attr(\"id\")\n        };\n      }).get();\n      return {\n        section: subArr\n      };\n    }).get();\n    var storePositionObj = JSON.stringify({\n      grid: mainArr\n    });\n    /* Place it in the storage(only if needed) */\n\n    if (storage.enabled && storage.getKeyPosition != storePositionObj) {\n      localStorage.setItem(storage.keyPosition, storePositionObj);\n      storage.getKeyPosition = storePositionObj;\n    }\n    /**\r\n     * Run the callback function.\r\n     **/\n\n\n    if (typeof self.o.onSave == \"function\") {\n      self.o.onSave.call(this, storePositionObj, storage.keyPosition);\n    }\n  },\n\n  /**\r\n   * Code that we run at the start.\r\n   *\r\n   * @param:\r\n   **/\n  init: function init() {\n    var self = this;\n    if (self.initialized) return;\n\n    self._initStorage(self.storage);\n    /**\r\n     * Force users to use an id(it's needed for the local storage).\r\n     **/\n\n\n    if (!$(\"#\" + self.objId).length) {\n      alert(\"It looks like your using a class instead of an ID, dont do that!\");\n    }\n    /**\r\n     * Add RTL support.\r\n     **/\n\n\n    if (self.o.rtl === true) {\n      $(\"body\").addClass(\"rtl\");\n    }\n    /**\r\n     * This will add an extra class that we use to store the\r\n     * widgets in the right order.(savety)\r\n     **/\n\n\n    $(self.o.grid).each(function () {\n      if ($(this).find(self.o.widgets).length) {\n        $(this).addClass(\"sortable-grid\");\n      }\n    }); //*****************************************************************//\n    //////////////////////// SET POSITION WIDGET ////////////////////////\n    //*****************************************************************//\n\n    /**\r\n     * Run if data is present.\r\n     **/\n\n    if (self.storage.enabled && self.storage.getKeyPosition) {\n      var jsonPosition = JSON.parse(self.storage.getKeyPosition);\n      /**\r\n       * Loop the data, and put every widget on the right place.\r\n       **/\n\n      for (var key in jsonPosition.grid) {\n        var changeOrder = self.obj.find(self.o.grid + \".sortable-grid\").eq(key);\n\n        for (var key2 in jsonPosition.grid[key].section) {\n          changeOrder.append($(\"#\" + jsonPosition.grid[key].section[key2].id));\n        }\n      }\n    } //*****************************************************************//\n    /////////////////////// SET SETTINGS WIDGET /////////////////////////\n    //*****************************************************************//\n\n    /**\r\n     * Run if data is present.\r\n     **/\n\n\n    if (self.storage.enabled && self.storage.getKeySettings) {\n      var jsonSettings = JSON.parse(self.storage.getKeySettings);\n      /**\r\n       * Loop the data and hide/show the widgets and set the inputs in\r\n       * panel to checked(if hidden) and add an indicator class to the div.\r\n       * Loop all labels and update the widget titles.\r\n       **/\n\n      for (var key in jsonSettings.widget) {\n        var widgetId = $(\"#\" + jsonSettings.widget[key].id);\n        /**\r\n         * Set a style(if present).\r\n         **/\n\n        if (jsonSettings.widget[key].style) {\n          //console.log(\"test\");\n          widgetId.removeClassPrefix(\"jarviswidget-color-\").addClass(jsonSettings.widget[key].style).attr(\"data-widget-attstyle\", \"\" + jsonSettings.widget[key].style + \"\");\n        }\n        /**\r\n         * Hide/show widget.\r\n         **/\n\n\n        if (jsonSettings.widget[key].hidden == 1) {\n          widgetId.hide(1);\n        } else {\n          widgetId.show(1).removeAttr(\"data-widget-hidden\");\n        }\n        /**\r\n         * Toggle content widget.\r\n         **/\n\n\n        if (jsonSettings.widget[key].collapsed == 1) {\n          widgetId.addClass(\"jarviswidget-collapsed\").children(\"div\").hide(1);\n        }\n        /**\r\n         * Update title widget (if needed).\r\n         **/\n\n\n        if (widgetId.children(\"header\").children(\"h2\").text() != jsonSettings.widget[key].title) {\n          widgetId.children(\"header\").children(\"h2\").text(jsonSettings.widget[key].title);\n        }\n      }\n    } //*****************************************************************//\n    ////////////////////////// LOOP AL WIDGETS //////////////////////////\n    //*****************************************************************//\n\n    /**\r\n     * This will add/edit/remove the settings to all widgets\r\n     **/\n\n\n    self.widget.each(function () {\n      var tWidget = $(this),\n          thisHeader = $(this).children(\"header\"),\n          customBtn,\n          deleteBtn,\n          editBtn,\n          fullscreenBtn,\n          widgetcolorBtn,\n          toggleBtn,\n          toggleSettings,\n          refreshBtn;\n      /**\r\n       * Dont double wrap(check).\r\n       **/\n\n      if (!thisHeader.parent().attr(\"role\")) {\n        /**\r\n         * Hide the widget if the dataset 'widget-hidden' is set to true.\r\n         **/\n        if (tWidget.data(\"widget-hidden\") === true) {\n          tWidget.hide();\n        }\n        /**\r\n        * Hide the content of the widget if the dataset\r\n        * 'widget-collapsed' is set to true.\r\n        **/\n\n\n        if (tWidget.data(\"widget-collapsed\") === true) {\n          tWidget.addClass(\"jarviswidget-collapsed\").children(\"div\").hide();\n        }\n        /**\r\n         * Check for the dataset 'widget-icon' if so get the icon\r\n         * and attach it to the widget header.\r\n         * NOTE: MOVED THIS TO PHYSICAL for more control\r\n         **/\n        //if(tWidget.data('widget-icon')){\n        //\tthisHeader.prepend('<i class=\"jarviswidget-icon '+tWidget.data('widget-icon')+'\"></i>');\n        //}\n\n        /**\r\n         * Add a delete button to the widget header (if set to true).\r\n         **/\n\n\n        if (self.o.customButton === true && tWidget.data(\"widget-custombutton\") === undefined && self.customClass[0].length !== 0) {\n          customBtn = '<a href=\"javascript:void(0);\" class=\"button-icon jarviswidget-custom-btn\"><i class=\"' + self.customClass[0] + '\"></i></a>';\n        } else {\n          customBtn = \"\";\n        }\n        /**\r\n         * Add a delete button to the widget header (if set to true).\r\n         **/\n\n\n        if (self.o.deleteButton === true && tWidget.data(\"widget-deletebutton\") === undefined) {\n          deleteBtn = '<a href=\"javascript:void(0);\" class=\"button-icon jarviswidget-delete-btn\" rel=\"tooltip\" title=\"Delete\" data-placement=\"bottom\"><i class=\"' + self.o.deleteClass + '\"></i></a>';\n        } else {\n          deleteBtn = \"\";\n        }\n        /**\r\n         * Add a delete button to the widget header (if set to true).\r\n         **/\n\n\n        if (self.o.editButton === true && tWidget.data(\"widget-editbutton\") === undefined) {\n          editBtn = '<a href=\"javascript:void(0);\" class=\"button-icon jarviswidget-edit-btn\" rel=\"tooltip\" title=\"Edit\" data-placement=\"bottom\"><i class=\"' + self.editClass[0] + '\"></i></a>';\n        } else {\n          editBtn = \"\";\n        }\n        /**\r\n         * Add a delete button to the widget header (if set to true).\r\n         **/\n\n\n        if (self.o.fullscreenButton === true && tWidget.data(\"widget-fullscreenbutton\") === undefined) {\n          fullscreenBtn = '<a href=\"javascript:void(0);\" class=\"button-icon jarviswidget-fullscreen-btn\" rel=\"tooltip\" title=\"Fullscreen\" data-placement=\"bottom\"><i class=\"' + self.fullscreenClass[0] + '\"></i></a>';\n        } else {\n          fullscreenBtn = \"\";\n        }\n        /**\r\n         * Add a delete button to the widget header (if set to true).\r\n         **/\n\n\n        if (self.o.colorButton === true && tWidget.data(\"widget-colorbutton\") === undefined) {\n          widgetcolorBtn = '<a data-toggle=\"dropdown\" class=\"dropdown-toggle color-box selector\" href=\"javascript:void(0);\"></a><ul class=\"dropdown-menu arrow-box-up-right color-select pull-right\"><li><span class=\"bg-color-green\" data-widget-setstyle=\"jarviswidget-color-green\" rel=\"tooltip\" data-placement=\"left\" data-original-title=\"Green Grass\"></span></li><li><span class=\"bg-color-greenDark\" data-widget-setstyle=\"jarviswidget-color-greenDark\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Dark Green\"></span></li><li><span class=\"bg-color-greenLight\" data-widget-setstyle=\"jarviswidget-color-greenLight\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Light Green\"></span></li><li><span class=\"bg-color-purple\" data-widget-setstyle=\"jarviswidget-color-purple\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Purple\"></span></li><li><span class=\"bg-color-magenta\" data-widget-setstyle=\"jarviswidget-color-magenta\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Magenta\"></span></li><li><span class=\"bg-color-pink\" data-widget-setstyle=\"jarviswidget-color-pink\" rel=\"tooltip\" data-placement=\"right\" data-original-title=\"Pink\"></span></li><li><span class=\"bg-color-pinkDark\" data-widget-setstyle=\"jarviswidget-color-pinkDark\" rel=\"tooltip\" data-placement=\"left\" data-original-title=\"Fade Pink\"></span></li><li><span class=\"bg-color-blueLight\" data-widget-setstyle=\"jarviswidget-color-blueLight\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Light Blue\"></span></li><li><span class=\"bg-color-teal\" data-widget-setstyle=\"jarviswidget-color-teal\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Teal\"></span></li><li><span class=\"bg-color-blue\" data-widget-setstyle=\"jarviswidget-color-blue\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Ocean Blue\"></span></li><li><span class=\"bg-color-blueDark\" data-widget-setstyle=\"jarviswidget-color-blueDark\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Night Sky\"></span></li><li><span class=\"bg-color-darken\" data-widget-setstyle=\"jarviswidget-color-darken\" rel=\"tooltip\" data-placement=\"right\" data-original-title=\"Night\"></span></li><li><span class=\"bg-color-yellow\" data-widget-setstyle=\"jarviswidget-color-yellow\" rel=\"tooltip\" data-placement=\"left\" data-original-title=\"Day Light\"></span></li><li><span class=\"bg-color-orange\" data-widget-setstyle=\"jarviswidget-color-orange\" rel=\"tooltip\" data-placement=\"bottom\" data-original-title=\"Orange\"></span></li><li><span class=\"bg-color-orangeDark\" data-widget-setstyle=\"jarviswidget-color-orangeDark\" rel=\"tooltip\" data-placement=\"bottom\" data-original-title=\"Dark Orange\"></span></li><li><span class=\"bg-color-red\" data-widget-setstyle=\"jarviswidget-color-red\" rel=\"tooltip\" data-placement=\"bottom\" data-original-title=\"Red Rose\"></span></li><li><span class=\"bg-color-redLight\" data-widget-setstyle=\"jarviswidget-color-redLight\" rel=\"tooltip\" data-placement=\"bottom\" data-original-title=\"Light Red\"></span></li><li><span class=\"bg-color-white\" data-widget-setstyle=\"jarviswidget-color-white\" rel=\"tooltip\" data-placement=\"right\" data-original-title=\"Purity\"></span></li><li><a href=\"javascript:void(0);\" class=\"jarviswidget-remove-colors\" data-widget-setstyle=\"\" rel=\"tooltip\" data-placement=\"bottom\" data-original-title=\"Reset widget color to default\">Remove</a></li></ul>';\n          thisHeader.prepend('<div class=\"widget-toolbar\">' + widgetcolorBtn + \"</div>\");\n        } else {\n          widgetcolorBtn = \"\";\n        }\n        /**\r\n         * Add a toggle button to the widget header (if set to true).\r\n         **/\n\n\n        if (self.o.toggleButton === true && tWidget.data(\"widget-togglebutton\") === undefined) {\n          if (tWidget.data(\"widget-collapsed\") === true || tWidget.hasClass(\"jarviswidget-collapsed\")) {\n            toggleSettings = self.toggleClass[1];\n          } else {\n            toggleSettings = self.toggleClass[0];\n          }\n\n          toggleBtn = '<a href=\"javascript:void(0);\" class=\"button-icon jarviswidget-toggle-btn\" rel=\"tooltip\" title=\"Collapse\" data-placement=\"bottom\"><i class=\"' + toggleSettings + '\"></i></a>';\n        } else {\n          toggleBtn = \"\";\n        }\n        /**\r\n         * Add a refresh button to the widget header (if set to true).\r\n         **/\n\n\n        if (self.o.refreshButton === true && tWidget.data(\"widget-refreshbutton\") !== false && tWidget.data(\"widget-load\")) {\n          refreshBtn = '<a href=\"javascript:void(0);\" class=\"button-icon jarviswidget-refresh-btn\" data-loading-text=\"&nbsp;&nbsp;Loading...&nbsp;\" rel=\"tooltip\" title=\"Refresh\" data-placement=\"bottom\"><i class=\"' + self.o.refreshButtonClass + '\"></i></a>';\n        } else {\n          refreshBtn = \"\";\n        }\n        /**\r\n         * Set the buttons order.\r\n         **/\n\n\n        var formatButtons = self.o.buttonOrder.replace(/%refresh%/g, refreshBtn).replace(/%delete%/g, deleteBtn).replace(/%custom%/g, customBtn).replace(/%fullscreen%/g, fullscreenBtn).replace(/%edit%/g, editBtn).replace(/%toggle%/g, toggleBtn);\n        /**\r\n         * Add a button wrapper to the header.\r\n         **/\n\n        if (refreshBtn !== \"\" || deleteBtn !== \"\" || customBtn !== \"\" || fullscreenBtn !== \"\" || editBtn !== \"\" || toggleBtn !== \"\") {\n          thisHeader.prepend('<div class=\"jarviswidget-ctrls\">' + formatButtons + \"</div>\");\n        }\n        /**\r\n         * Adding a helper class to all sortable widgets, this will be\r\n         * used to find the widgets that are sortable, it will skip the widgets\r\n         * that have the dataset 'widget-sortable=\"false\"' set to false.\r\n         **/\n\n\n        if (self.o.sortable === true && tWidget.data(\"widget-sortable\") === undefined) {\n          tWidget.addClass(\"jarviswidget-sortable\");\n        }\n        /**\r\n         * If the edit box is present copy the title to the input.\r\n         **/\n\n\n        if (tWidget.find(self.o.editPlaceholder).length) {\n          tWidget.find(self.o.editPlaceholder).find(\"input\").val($.trim(thisHeader.children(\"h2\").text()));\n        }\n        /**\r\n         * Prepend the image to the widget header.\r\n         **/\n\n\n        thisHeader.append('<span class=\"jarviswidget-loader\"><i class=\"fa fa-refresh fa-spin\"></i></span>');\n        /**\r\n         * Adding roles to some parts.\r\n         **/\n\n        tWidget.attr(\"role\", \"widget\").children(\"div\").attr(\"role\", \"content\").prev(\"header\").attr(\"role\", \"heading\").children(\"div\").attr(\"role\", \"menu\");\n      }\n    });\n    /**\r\n     * Hide all buttons if option is set to true.\r\n     **/\n\n    if (self.o.buttonsHidden === true) {\n      $(self.o.pwCtrls).hide();\n    }\n    /* activate all tooltips */\n    // $(\".jarviswidget header [rel=tooltip]\")\n    //     .tooltip();\n    //******************************************************************//\n    //////////////////////////////// AJAX ////////////////////////////////\n    //******************************************************************//\n\n    /**\r\n     * Loop all ajax widgets.\r\n     **/\n    // $.intervalArr = new Array(); - decleared in app.js\n\n\n    self.obj.find(\"[data-widget-load]\").each(function () {\n      /**\r\n       * Variables.\r\n       **/\n      var thisItem = $(this),\n          thisItemHeader = thisItem.children(),\n          pathToFile = thisItem.data(\"widget-load\"),\n          reloadTime = thisItem.data(\"widget-refresh\") * 1000,\n          ajaxLoader = thisItem.children();\n\n      if (!thisItem.find(\".jarviswidget-ajax-placeholder\").length) {\n        /**\r\n         * Append a AJAX placeholder.\r\n         **/\n        thisItem.children(\"widget-body\").append('<div class=\"jarviswidget-ajax-placeholder\">' + self.o.loadingLabel + \"</div>\");\n        /**\r\n         * If widget has a reload time refresh the widget, if the value\r\n         * has been set to 0 dont reload.\r\n         **/\n\n        if (thisItem.data(\"widget-refresh\") > 0) {\n          /**\r\n           * Load file on start.\r\n           **/\n          self._loadAjaxFile(thisItem, pathToFile, thisItemHeader);\n          /**\r\n           * Set an interval to reload the content every XXX seconds.\r\n           * intervalArr.push(setInterval(intervalOne, 2000)  );\r\n           **/\n\n\n          $.intervalArr.push(setInterval(function () {\n            self._loadAjaxFile(thisItem, pathToFile, thisItemHeader);\n          }, reloadTime));\n        } else {\n          /**\r\n           * Load the content just once.\r\n           **/\n          self._loadAjaxFile(thisItem, pathToFile, thisItemHeader);\n        }\n      }\n    }); //******************************************************************//\n    ////////////////////////////// SORTABLE //////////////////////////////\n    //******************************************************************//\n\n    /**\r\n     * jQuery UI soratble, this allows users to sort the widgets.\r\n     * Notice that this part needs the jquery-ui core to work.\r\n     **/\n\n    if (self.o.sortable === true && $.ui) {\n      var sortItem = self.obj.find(self.o.grid + \".sortable-grid\").not(\"[data-widget-excludegrid]\");\n      sortItem.sortable({\n        items: sortItem.find(self.o.widgets + \".jarviswidget-sortable\"),\n        connectWith: sortItem,\n        placeholder: self.o.placeholderClass,\n        cursor: \"move\",\n        revert: true,\n        opacity: self.o.opacity,\n        delay: 200,\n        cancel: \".button-icon, #jarviswidget-fullscreen-mode > div\",\n        zIndex: 10000,\n        handle: self.o.dragHandle,\n        forcePlaceholderSize: true,\n        forceHelperSize: true,\n        update: function update(event, ui) {\n          /* run pre-loader in the widget */\n          self._runLoaderWidget(ui.item.children());\n          /* store the positions of the plugins */\n\n\n          self._savePositionWidget();\n          /**\r\n           * Run the callback function.\r\n           **/\n\n\n          if (typeof self.o.onChange == \"function\") {\n            self.o.onChange.call(this, ui.item);\n          }\n        }\n      });\n    } //*****************************************************************//\n    ////////////////////////// BUTTONS VISIBLE //////////////////////////\n    //*****************************************************************//\n\n    /**\r\n     * Show and hide the widget control buttons, the buttons will be\r\n     * visible if the users hover over the widgets header. At default the\r\n     * buttons are always visible.\r\n     **/\n\n\n    if (self.o.buttonsHidden === true) {\n      /**\r\n       * Show and hide the buttons.\r\n       **/\n      self.widget.children(\"header\").on(\"mouseenter.\" + pluginName, function () {\n        $(this).children(self.o.pwCtrls).stop(true, true).fadeTo(100, 1.0);\n      }).on(\"mouseleave.\" + pluginName, function () {\n        $(this).children(self.o.pwCtrls).stop(true, true).fadeTo(100, 0.0);\n      });\n    } //*****************************************************************//\n    ///////////////////////// CLICKEVENTS //////////////////////////\n    //*****************************************************************//\n\n\n    self._clickEvents(); //*****************************************************************//\n    ///////////////////// DELETE LOCAL STORAGE KEYS /////////////////////\n    //*****************************************************************//\n\n\n    if (self.storage.enabled) {\n      /**\r\n       * Delete the settings key.\r\n       **/\n      $(self.o.deleteSettingsKey).on(clickEvent, this, function (e) {\n        var cleared = confirm(self.o.settingsKeyLabel);\n\n        if (cleared) {\n          localStorage.removeItem(keySettings);\n        }\n\n        e.preventDefault();\n      });\n      /**\r\n       * Delete the position key.\r\n       **/\n\n      $(self.o.deletePositionKey).on(clickEvent, this, function (e) {\n        var cleared = confirm(self.o.positionKeyLabel);\n\n        if (cleared) {\n          localStorage.removeItem(keyPosition);\n        }\n\n        e.preventDefault();\n      });\n    }\n\n    self.initialized = true;\n  },\n\n  /**\r\n   * Initialize storage.\r\n   *\r\n   * @param:\r\n   **/\n  _initStorage: function _initStorage(storage) {\n    //*****************************************************************//\n    //////////////////////// LOCALSTORAGE CHECK /////////////////////////\n    //*****************************************************************//\n    storage.enabled = storage.enabled && !!function () {\n      var result,\n          uid = +new Date();\n\n      try {\n        localStorage.setItem(uid, uid);\n        result = localStorage.getItem(uid) == uid;\n        localStorage.removeItem(uid);\n        return result;\n      } catch (e) {}\n    }();\n\n    this._loadKeys();\n\n    if (storage.enabled) {\n      storage.getKeySettings = localStorage.getItem(storage.keySettings);\n      storage.getKeyPosition = localStorage.getItem(storage.keyPosition);\n    } // end if\n\n  },\n\n  /**\r\n   * All of the click events.\r\n   *\r\n   * @param:\r\n   **/\n  _clickEvents: function _clickEvents() {\n    var self = this;\n    var headers = self.widget.children(\"header\"); //*****************************************************************//\n    /////////////////////////// TOGGLE WIDGETS //////////////////////////\n    //*****************************************************************//\n\n    /**\r\n     * Allow users to toggle the content of the widgets.\r\n     **/\n\n    headers.on(clickEvent, \".jarviswidget-toggle-btn\", function (e) {\n      var tWidget = $(this);\n      var pWidget = tWidget.parents(self.o.widgets);\n      /**\r\n       * Run function for the indicator image.\r\n       **/\n\n      self._runLoaderWidget(tWidget);\n      /**\r\n       * Change the class and hide/show the widgets content.\r\n       **/\n\n\n      if (pWidget.hasClass(\"jarviswidget-collapsed\")) {\n        tWidget.children().removeClass(self.toggleClass[1]).addClass(self.toggleClass[0]).parents(self.o.widgets).removeClass(\"jarviswidget-collapsed\").children(\"[role=content]\").slideDown(self.o.toggleSpeed, function () {\n          self._saveSettingsWidget();\n        });\n      } else {\n        tWidget.children().removeClass(self.toggleClass[0]).addClass(self.toggleClass[1]).parents(self.o.widgets).addClass(\"jarviswidget-collapsed\").children(\"[role=content]\").slideUp(self.o.toggleSpeed, function () {\n          self._saveSettingsWidget();\n        });\n      }\n      /**\r\n       * Run the callback function.\r\n       **/\n\n\n      if (typeof self.o.onToggle == \"function\") {\n        self.o.onToggle.call(this, pWidget);\n      }\n\n      e.preventDefault();\n    }); //*****************************************************************//\n    ///////////////////////// FULLSCREEN WIDGETS ////////////////////////\n    //*****************************************************************//\n\n    /**\r\n     * Set fullscreen height function.\r\n     **/\n\n    function heightFullscreen() {\n      if ($(\"#jarviswidget-fullscreen-mode\").length) {\n        /**\r\n         * Setting height variables.\r\n         **/\n        var heightWindow = $(window).height();\n        var heightHeader = $(\"#jarviswidget-fullscreen-mode\").children(self.o.widgets).children(\"header\").height();\n        /**\r\n         * Setting the height to the right widget.\r\n         **/\n\n        $(\"#jarviswidget-fullscreen-mode\").children(self.o.widgets).children(\"div\").height(heightWindow - heightHeader - 15);\n      }\n    }\n    /**\r\n     * On click go to fullscreen mode.\r\n     **/\n\n\n    headers.on(clickEvent, \".jarviswidget-fullscreen-btn\", function (e) {\n      var thisWidget = $(this).parents(self.o.widgets);\n      var thisWidgetContent = thisWidget.children(\"div\");\n      /**\r\n       * Run function for the indicator image.\r\n       **/\n\n      self._runLoaderWidget($(this));\n      /**\r\n       * Wrap the widget and go fullsize.\r\n       **/\n\n\n      if ($(\"#jarviswidget-fullscreen-mode\").length) {\n        /**\r\n         * Remove class from the body.\r\n         **/\n        $(\".nooverflow\").removeClass(\"nooverflow\");\n        /**\r\n         * Unwrap the widget, remove the height, set the right\r\n         * fulscreen button back, and show all other buttons.\r\n         **/\n\n        thisWidget.unwrap(\"div\").children(\"div\").removeAttr(\"style\").end().find(\".jarviswidget-fullscreen-btn:first\").children().removeClass(self.fullscreenClass[1]).addClass(self.fullscreenClass[0]).parents(self.pwCtrls).children(\"a\").show();\n        /**\r\n         * Reset collapsed widgets.\r\n         **/\n\n        if (thisWidgetContent.hasClass(\"jarviswidget-visible\")) {\n          thisWidgetContent.hide().removeClass(\"jarviswidget-visible\");\n        }\n      } else {\n        /**\r\n         * Prevent the body from scrolling.\r\n         **/\n        $(\"body\").addClass(\"nooverflow\");\n        /**\r\n        * Wrap, append it to the body, show the right button\r\n        * and hide all other buttons.\r\n        **/\n\n        thisWidget.wrap('<div id=\"jarviswidget-fullscreen-mode\"/>').parent().find(\".jarviswidget-fullscreen-btn:first\").children().removeClass(self.fullscreenClass[0]).addClass(self.fullscreenClass[1]).parents(self.pwCtrls).children(\"a:not(.jarviswidget-fullscreen-btn)\").hide();\n        /**\r\n         * Show collapsed widgets.\r\n         **/\n\n        if (thisWidgetContent.is(\":hidden\")) {\n          thisWidgetContent.show().addClass(\"jarviswidget-visible\");\n        }\n      }\n      /**\r\n       * Run the set height function.\r\n       **/\n\n\n      heightFullscreen();\n      /**\r\n       * Run the callback function.\r\n       **/\n\n      if (typeof self.o.onFullscreen == \"function\") {\n        self.o.onFullscreen.call(this, thisWidget);\n      }\n\n      e.preventDefault();\n    });\n    /**\r\n     * Run the set fullscreen height function when the screen resizes.\r\n     **/\n\n    $(window).on(\"resize.\" + pluginName, function () {\n      /**\r\n       * Run the set height function.\r\n       **/\n      heightFullscreen();\n    }); //*****************************************************************//\n    //////////////////////////// EDIT WIDGETS ///////////////////////////\n    //*****************************************************************//\n\n    /**\r\n     * Allow users to show/hide a edit box.\r\n     **/\n\n    headers.on(clickEvent, \".jarviswidget-edit-btn\", function (e) {\n      var tWidget = $(this).parents(self.o.widgets);\n      /**\r\n       * Run function for the indicator image.\r\n       **/\n\n      self._runLoaderWidget($(this));\n      /**\r\n       * Show/hide the edit box.\r\n       **/\n\n\n      if (tWidget.find(self.o.editPlaceholder).is(\":visible\")) {\n        $(this).children().removeClass(self.editClass[1]).addClass(self.editClass[0]).parents(self.o.widgets).find(self.o.editPlaceholder).slideUp(self.o.editSpeed, function () {\n          self._saveSettingsWidget();\n        });\n      } else {\n        $(this).children().removeClass(self.editClass[0]).addClass(self.editClass[1]).parents(self.o.widgets).find(self.o.editPlaceholder).slideDown(self.o.editSpeed);\n      }\n      /**\r\n       * Run the callback function.\r\n       **/\n\n\n      if (typeof self.o.onEdit == \"function\") {\n        self.o.onEdit.call(this, tWidget);\n      }\n\n      e.preventDefault();\n    });\n    /**\r\n     * Update the widgets title by using the edit input.\r\n     **/\n\n    $(self.o.editPlaceholder).find(\"input\").keyup(function () {\n      $(this).parents(self.o.widgets).children(\"header\").children(\"h2\").text($(this).val());\n    });\n    /**\r\n     * Set a custom style.\r\n     **/\n\n    headers.on(clickEvent, \"[data-widget-setstyle]\", function (e) {\n      var val = $(this).data(\"widget-setstyle\");\n      var styles = \"\";\n      /**\r\n       * Get all other styles, in order to remove it.\r\n       **/\n\n      $(this).parents(self.o.editPlaceholder).find(\"[data-widget-setstyle]\").each(function () {\n        styles += $(this).data(\"widget-setstyle\") + \" \";\n      });\n      /**\r\n       * Set the new style.\r\n       **/\n\n      $(this).parents(self.o.widgets).attr(\"data-widget-attstyle\", \"\" + val + \"\").removeClassPrefix(\"jarviswidget-color-\").addClass(val);\n      /**\r\n       * Run function for the indicator image.\r\n       **/\n\n      self._runLoaderWidget($(this));\n      /**\r\n       * Lets save the setings.\r\n       **/\n\n\n      self._saveSettingsWidget();\n\n      e.preventDefault();\n    }); //*****************************************************************//\n    /////////////////////////// CUSTOM ACTION ///////////////////////////\n    //*****************************************************************//\n\n    /**\r\n     * Allow users to show/hide a edit box.\r\n     **/\n\n    headers.on(clickEvent, \".jarviswidget-custom-btn\", function (e) {\n      var w = $(this).parents(self.o.widgets);\n      /**\r\n       * Run function for the indicator image.\r\n       **/\n\n      self._runLoaderWidget($(this));\n      /**\r\n       * Start and end custom action.\r\n       **/\n\n\n      if ($(this).children(\".\" + self.customClass[0]).length) {\n        $(this).children().removeClass(self.customClass[0]).addClass(self.customClass[1]);\n        /**\r\n         * Run the callback function.\r\n         **/\n\n        if (typeof self.o.customStart == \"function\") {\n          self.o.customStart.call(this, w);\n        }\n      } else {\n        $(this).children().removeClass(self.customClass[1]).addClass(self.customClass[0]);\n        /**\r\n         * Run the callback function.\r\n         **/\n\n        if (typeof self.o.customEnd == \"function\") {\n          self.o.customEnd.call(this, w);\n        }\n      }\n      /**\r\n       * Lets save the setings.\r\n       **/\n\n\n      self._saveSettingsWidget();\n\n      e.preventDefault();\n    }); //*****************************************************************//\n    /////////////////////////// DELETE WIDGETS //////////////////////////\n    //*****************************************************************//\n\n    /**\r\n     * Allow users to delete the widgets.\r\n     **/\n\n    headers.on(clickEvent, \".jarviswidget-delete-btn\", function (e) {\n      var tWidget = $(this).parents(self.o.widgets);\n      var removeId = tWidget.attr(\"id\");\n      var widTitle = tWidget.children(\"header\").children(\"h2\").text();\n      /**\r\n       * Delete the widgets with a confirm popup.\r\n       **/\n\n      if ($.SmartMessageBox) {\n        $.SmartMessageBox({\n          title: \"<i class='fa fa-times' style='color:#ed1c24'></i> \" + self.o.labelDelete + ' \"' + widTitle + '\"',\n          content: self.o.deleteMsg,\n          buttons: \"[No][Yes]\"\n        }, function (ButtonPressed) {\n          //console.log(ButtonPressed);\n          if (ButtonPressed == \"Yes\") {\n            /**\r\n             * Run function for the indicator image.\r\n             **/\n            self._runLoaderWidget($(this));\n            /**\r\n             * Delete the right widget.\r\n             **/\n\n\n            $(\"#\" + removeId).fadeOut(self.o.deleteSpeed, function () {\n              $(this).remove();\n              /**\r\n               * Run the callback function.\r\n               **/\n\n              if (typeof self.o.onDelete == \"function\") {\n                self.o.onDelete.call(this, tWidget);\n              }\n            });\n          }\n        });\n      } else {\n        /**\r\n         * Delete the right widget.\r\n         **/\n        $(\"#\" + removeId).fadeOut(self.o.deleteSpeed, function () {\n          $(this).remove();\n          /**\r\n           * Run the callback function.\r\n           **/\n\n          if (typeof self.o.onDelete == \"function\") {\n            self.o.onDelete.call(this, tWidget);\n          }\n        });\n      }\n\n      e.preventDefault();\n    }); //******************************************************************//\n    /////////////////////////// REFRESH BUTTON ///////////////////////////\n    //******************************************************************//\n\n    /**\r\n     * Refresh ajax upon clicking refresh link.\r\n     **/\n\n    headers.on(clickEvent, \".jarviswidget-refresh-btn\", function (e) {\n      /**\r\n       * Variables.\r\n       **/\n      var rItem = $(this).parents(self.o.widgets),\n          pathToFile = rItem.data(\"widget-load\"),\n          ajaxLoader = rItem.children(),\n          btn = $(this);\n      /**\r\n       * Run the ajax function.\r\n       **/\n\n      btn.button(\"loading\");\n      ajaxLoader.addClass(\"widget-body-ajax-loading\");\n      setTimeout(function () {\n        btn.button(\"reset\");\n        ajaxLoader.removeClass(\"widget-body-ajax-loading\");\n\n        self._loadAjaxFile(rItem, pathToFile, ajaxLoader);\n      }, 1000);\n      e.preventDefault();\n    });\n    headers = null;\n  },\n\n  /**\r\n   * Destroy.\r\n   *\r\n   * @param:\r\n   **/\n  destroy: function destroy() {\n    var self = this,\n        namespace = \".\" + pluginName,\n        sortItem = self.obj.find(self.o.grid + \".sortable-grid\").not(\"[data-widget-excludegrid]\");\n    sortItem.sortable(\"destroy\");\n    self.widget.children(\"header\").off(namespace);\n    $(self.o.deleteSettingsKey).off(namespace);\n    $(self.o.deletePositionKey).off(namespace);\n    $(window).off(namespace);\n    self.obj.removeData(pluginName);\n  }\n};\n\n$.fn[pluginName] = function (option) {\n  return this.each(function () {\n    var $this = $(this);\n    var data = $this.data(pluginName);\n\n    if (!data) {\n      var options = typeof option == \"object\" && option;\n      $this.data(pluginName, data = new Plugin(this, options));\n    }\n\n    if (typeof option == \"string\") {\n      data[option]();\n    }\n  });\n};\n/**\r\n * Default settings(dont change).\r\n * You can globally override these options\r\n * by using $.fn.pluginName.key = 'value';\r\n **/\n\n\n$.fn[pluginName].defaults = {\n  grid: \"section\",\n  widgets: \".jarviswidget\",\n  localStorage: true,\n  deleteSettingsKey: \"\",\n  settingsKeyLabel: \"Reset settings?\",\n  deletePositionKey: \"\",\n  positionKeyLabel: \"Reset position?\",\n  sortable: true,\n  buttonsHidden: false,\n  toggleButton: true,\n  toggleClass: \"min-10 | plus-10\",\n  toggleSpeed: 200,\n  onToggle: function onToggle() {},\n  deleteButton: true,\n  deleteMsg: \"Warning: This action cannot be undone\",\n  deleteClass: \"trashcan-10\",\n  deleteSpeed: 200,\n  onDelete: function onDelete() {},\n  editButton: true,\n  editPlaceholder: \".jarviswidget-editbox\",\n  editClass: \"pencil-10 | delete-10\",\n  editSpeed: 200,\n  onEdit: function onEdit() {},\n  colorButton: true,\n  fullscreenButton: true,\n  fullscreenClass: \"fullscreen-10 | normalscreen-10\",\n  fullscreenDiff: 3,\n  onFullscreen: function onFullscreen() {},\n  customButton: true,\n  customClass: \"\",\n  customStart: function customStart() {},\n  customEnd: function customEnd() {},\n  buttonOrder: \"%refresh% %delete% %custom% %edit% %fullscreen% %toggle%\",\n  opacity: 1.0,\n  dragHandle: \"> header\",\n  placeholderClass: \"jarviswidget-placeholder\",\n  indicator: true,\n  indicatorTime: 600,\n  ajax: true,\n  loadingLabel: \"loading...\",\n  timestampPlaceholder: \".jarviswidget-timestamp\",\n  timestampFormat: \"Last update: %m%/%d%/%y% %h%:%i%:%s%\",\n  refreshButton: true,\n  refreshButtonClass: \"refresh-10\",\n  labelError: \"Sorry but there was a error:\",\n  labelUpdated: \"Last Update:\",\n  labelRefresh: \"Refresh\",\n  labelDelete: \"Delete widget:\",\n  afterLoad: function afterLoad() {},\n  rtl: false,\n  onChange: function onChange() {},\n  onSave: function onSave() {},\n  ajaxnav: true\n};\n/*\r\n     * REMOVE CSS CLASS WITH PREFIX\r\n     * Description: Remove classes that have given prefix. You have an element with classes\r\n     * \t\t\t\t\"widget widget-color-red\"\r\n     * Usage: $elem.removeClassPrefix('widget-color-');\r\n     */\n\n$.fn.removeClassPrefix = function (prefix) {\n  this.each(function (i, it) {\n    var classes = it.className.split(\" \").map(function (item) {\n      return item.indexOf(prefix) === 0 ? \"\" : item;\n    }); //it.className = classes.join(\" \");\n\n    it.className = $.trim(classes.join(\" \"));\n  });\n  return this;\n};","map":null,"metadata":{},"sourceType":"module"}