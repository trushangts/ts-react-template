{"ast":null,"code":"/**\n * @license\n * Copyright 2011 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/**\n * @fileoverview A wrapper around the Dygraph class which implements the\n * interface for a GViz (aka Google Visualization API) visualization.\n * It is designed to be a drop-in replacement for Google's AnnotatedTimeline,\n * so the documentation at\n * http://code.google.com/apis/chart/interactive/docs/gallery/annotatedtimeline.html\n * translates over directly.\n *\n * For a full demo, see:\n * - http://dygraphs.com/tests/gviz.html\n * - http://dygraphs.com/tests/annotation-gviz.html\n */\n\n/*global Dygraph:false */\n\"use strict\";\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _dygraph = require('./dygraph');\n\nvar _dygraph2 = _interopRequireDefault(_dygraph);\n/**\n * A wrapper around Dygraph that implements the gviz API.\n * @param {!HTMLDivElement} container The DOM object the visualization should\n *     live in.\n * @constructor\n */\n\n\nvar GVizChart = function GVizChart(container) {\n  this.container = container;\n};\n/**\n * @param {GVizDataTable} data\n * @param {Object.<*>} options\n */\n\n\nGVizChart.prototype.draw = function (data, options) {\n  // Clear out any existing dygraph.\n  // TODO(danvk): would it make more sense to simply redraw using the current\n  // date_graph object?\n  this.container.innerHTML = '';\n\n  if (typeof this.date_graph != 'undefined') {\n    this.date_graph.destroy();\n  }\n\n  this.date_graph = new _dygraph2['default'](this.container, data, options);\n};\n/**\n * Google charts compatible setSelection\n * Only row selection is supported, all points in the row will be highlighted\n * @param {Array.<{row:number}>} selection_array array of the selected cells\n * @public\n */\n\n\nGVizChart.prototype.setSelection = function (selection_array) {\n  var row = false;\n\n  if (selection_array.length) {\n    row = selection_array[0].row;\n  }\n\n  this.date_graph.setSelection(row);\n};\n/**\n * Google charts compatible getSelection implementation\n * @return {Array.<{row:number,column:number}>} array of the selected cells\n * @public\n */\n\n\nGVizChart.prototype.getSelection = function () {\n  var selection = [];\n  var row = this.date_graph.getSelection();\n  if (row < 0) return selection;\n  var points = this.date_graph.layout_.points;\n\n  for (var setIdx = 0; setIdx < points.length; ++setIdx) {\n    selection.push({\n      row: row,\n      column: setIdx + 1\n    });\n  }\n\n  return selection;\n};\n\nexports['default'] = GVizChart;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}