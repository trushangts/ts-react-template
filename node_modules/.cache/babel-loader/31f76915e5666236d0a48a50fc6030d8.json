{"ast":null,"code":"/*! Select for DataTables 1.3.1\n * 2015-2019 SpryMedia Ltd - datatables.net/license/mit\n */\n\n/**\n * @summary     Select for DataTables\n * @description A collection of API methods, events and buttons for DataTables\n *   that provides selection options of the items in a DataTable\n * @version     1.3.1\n * @file        dataTables.select.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     datatables.net/forums\n * @copyright   Copyright 2015-2019 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net/extensions/select\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable; // Version information for debugger\n\n  DataTable.select = {};\n  DataTable.select.version = '1.3.1';\n\n  DataTable.select.init = function (dt) {\n    var ctx = dt.settings()[0];\n    var init = ctx.oInit.select;\n    var defaults = DataTable.defaults.select;\n    var opts = init === undefined ? defaults : init; // Set defaults\n\n    var items = 'row';\n    var style = 'api';\n    var blurable = false;\n    var toggleable = true;\n    var info = true;\n    var selector = 'td, th';\n    var className = 'selected';\n    var setStyle = false;\n    ctx._select = {}; // Initialisation customisations\n\n    if (opts === true) {\n      style = 'os';\n      setStyle = true;\n    } else if (typeof opts === 'string') {\n      style = opts;\n      setStyle = true;\n    } else if ($.isPlainObject(opts)) {\n      if (opts.blurable !== undefined) {\n        blurable = opts.blurable;\n      }\n\n      if (opts.toggleable !== undefined) {\n        toggleable = opts.toggleable;\n      }\n\n      if (opts.info !== undefined) {\n        info = opts.info;\n      }\n\n      if (opts.items !== undefined) {\n        items = opts.items;\n      }\n\n      if (opts.style !== undefined) {\n        style = opts.style;\n        setStyle = true;\n      } else {\n        style = 'os';\n        setStyle = true;\n      }\n\n      if (opts.selector !== undefined) {\n        selector = opts.selector;\n      }\n\n      if (opts.className !== undefined) {\n        className = opts.className;\n      }\n    }\n\n    dt.select.selector(selector);\n    dt.select.items(items);\n    dt.select.style(style);\n    dt.select.blurable(blurable);\n    dt.select.toggleable(toggleable);\n    dt.select.info(info);\n    ctx._select.className = className; // Sort table based on selected rows. Requires Select Datatables extension\n\n    $.fn.dataTable.ext.order['select-checkbox'] = function (settings, col) {\n      return this.api().column(col, {\n        order: 'index'\n      }).nodes().map(function (td) {\n        if (settings._select.items === 'row') {\n          return $(td).parent().hasClass(settings._select.className);\n        } else if (settings._select.items === 'cell') {\n          return $(td).hasClass(settings._select.className);\n        }\n\n        return false;\n      });\n    }; // If the init options haven't enabled select, but there is a selectable\n    // class name, then enable\n\n\n    if (!setStyle && $(dt.table().node()).hasClass('selectable')) {\n      dt.select.style('os');\n    }\n  };\n  /*\n  \n  Select is a collection of API methods, event handlers, event emitters and\n  buttons (for the `Buttons` extension) for DataTables. It provides the following\n  features, with an overview of how they are implemented:\n  \n  ## Selection of rows, columns and cells. Whether an item is selected or not is\n     stored in:\n  \n  * rows: a `_select_selected` property which contains a boolean value of the\n    DataTables' `aoData` object for each row\n  * columns: a `_select_selected` property which contains a boolean value of the\n    DataTables' `aoColumns` object for each column\n  * cells: a `_selected_cells` property which contains an array of boolean values\n    of the `aoData` object for each row. The array is the same length as the\n    columns array, with each element of it representing a cell.\n  \n  This method of using boolean flags allows Select to operate when nodes have not\n  been created for rows / cells (DataTables' defer rendering feature).\n  \n  ## API methods\n  \n  A range of API methods are available for triggering selection and de-selection\n  of rows. Methods are also available to configure the selection events that can\n  be triggered by an end user (such as which items are to be selected). To a large\n  extent, these of API methods *is* Select. It is basically a collection of helper\n  functions that can be used to select items in a DataTable.\n  \n  Configuration of select is held in the object `_select` which is attached to the\n  DataTables settings object on initialisation. Select being available on a table\n  is not optional when Select is loaded, but its default is for selection only to\n  be available via the API - so the end user wouldn't be able to select rows\n  without additional configuration.\n  \n  The `_select` object contains the following properties:\n  \n  ```\n  {\n  \titems:string       - Can be `rows`, `columns` or `cells`. Defines what item \n  \t                     will be selected if the user is allowed to activate row\n  \t                     selection using the mouse.\n  \tstyle:string       - Can be `none`, `single`, `multi` or `os`. Defines the\n  \t                     interaction style when selecting items\n  \tblurable:boolean   - If row selection can be cleared by clicking outside of\n  \t                     the table\n  \ttoggleable:boolean - If row selection can be cancelled by repeated clicking\n  \t                     on the row\n  \tinfo:boolean       - If the selection summary should be shown in the table\n  \t                     information elements\n  }\n  ```\n  \n  In addition to the API methods, Select also extends the DataTables selector\n  options for rows, columns and cells adding a `selected` option to the selector\n  options object, allowing the developer to select only selected items or\n  unselected items.\n  \n  ## Mouse selection of items\n  \n  Clicking on items can be used to select items. This is done by a simple event\n  handler that will select the items using the API methods.\n  \n   */\n\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Local functions\n   */\n\n  /**\n   * Add one or more cells to the selection when shift clicking in OS selection\n   * style cell selection.\n   *\n   * Cell range is more complicated than row and column as we want to select\n   * in the visible grid rather than by index in sequence. For example, if you\n   * click first in cell 1-1 and then shift click in 2-2 - cells 1-2 and 2-1\n   * should also be selected (and not 1-3, 1-4. etc)\n   * \n   * @param  {DataTable.Api} dt   DataTable\n   * @param  {object}        idx  Cell index to select to\n   * @param  {object}        last Cell index to select from\n   * @private\n   */\n\n\n  function cellRange(dt, idx, last) {\n    var indexes;\n    var columnIndexes;\n    var rowIndexes;\n\n    var selectColumns = function selectColumns(start, end) {\n      if (start > end) {\n        var tmp = end;\n        end = start;\n        start = tmp;\n      }\n\n      var record = false;\n      return dt.columns(':visible').indexes().filter(function (i) {\n        if (i === start) {\n          record = true;\n        }\n\n        if (i === end) {\n          // not else if, as start might === end\n          record = false;\n          return true;\n        }\n\n        return record;\n      });\n    };\n\n    var selectRows = function selectRows(start, end) {\n      var indexes = dt.rows({\n        search: 'applied'\n      }).indexes(); // Which comes first - might need to swap\n\n      if (indexes.indexOf(start) > indexes.indexOf(end)) {\n        var tmp = end;\n        end = start;\n        start = tmp;\n      }\n\n      var record = false;\n      return indexes.filter(function (i) {\n        if (i === start) {\n          record = true;\n        }\n\n        if (i === end) {\n          record = false;\n          return true;\n        }\n\n        return record;\n      });\n    };\n\n    if (!dt.cells({\n      selected: true\n    }).any() && !last) {\n      // select from the top left cell to this one\n      columnIndexes = selectColumns(0, idx.column);\n      rowIndexes = selectRows(0, idx.row);\n    } else {\n      // Get column indexes between old and new\n      columnIndexes = selectColumns(last.column, idx.column);\n      rowIndexes = selectRows(last.row, idx.row);\n    }\n\n    indexes = dt.cells(rowIndexes, columnIndexes).flatten();\n\n    if (!dt.cells(idx, {\n      selected: true\n    }).any()) {\n      // Select range\n      dt.cells(indexes).select();\n    } else {\n      // Deselect range\n      dt.cells(indexes).deselect();\n    }\n  }\n  /**\n   * Disable mouse selection by removing the selectors\n   *\n   * @param {DataTable.Api} dt DataTable to remove events from\n   * @private\n   */\n\n\n  function disableMouseSelection(dt) {\n    var ctx = dt.settings()[0];\n    var selector = ctx._select.selector;\n    $(dt.table().container()).off('mousedown.dtSelect', selector).off('mouseup.dtSelect', selector).off('click.dtSelect', selector);\n    $('body').off('click.dtSelect' + _safeId(dt.table().node()));\n  }\n  /**\n   * Attach mouse listeners to the table to allow mouse selection of items\n   *\n   * @param {DataTable.Api} dt DataTable to remove events from\n   * @private\n   */\n\n\n  function enableMouseSelection(dt) {\n    var container = $(dt.table().container());\n    var ctx = dt.settings()[0];\n    var selector = ctx._select.selector;\n    var matchSelection;\n    container.on('mousedown.dtSelect', selector, function (e) {\n      // Disallow text selection for shift clicking on the table so multi\n      // element selection doesn't look terrible!\n      if (e.shiftKey || e.metaKey || e.ctrlKey) {\n        container.css('-moz-user-select', 'none').one('selectstart.dtSelect', selector, function () {\n          return false;\n        });\n      }\n\n      if (window.getSelection) {\n        matchSelection = window.getSelection();\n      }\n    }).on('mouseup.dtSelect', selector, function () {\n      // Allow text selection to occur again, Mozilla style (tested in FF\n      // 35.0.1 - still required)\n      container.css('-moz-user-select', '');\n    }).on('click.dtSelect', selector, function (e) {\n      var items = dt.select.items();\n      var idx; // If text was selected (click and drag), then we shouldn't change\n      // the row's selected state\n\n      if (matchSelection) {\n        var selection = window.getSelection(); // If the element that contains the selection is not in the table, we can ignore it\n        // This can happen if the developer selects text from the click event\n\n        if (!selection.anchorNode || $(selection.anchorNode).closest('table')[0] === dt.table().node()) {\n          if (selection !== matchSelection) {\n            return;\n          }\n        }\n      }\n\n      var ctx = dt.settings()[0];\n      var wrapperClass = $.trim(dt.settings()[0].oClasses.sWrapper).replace(/ +/g, '.'); // Ignore clicks inside a sub-table\n\n      if ($(e.target).closest('div.' + wrapperClass)[0] != dt.table().container()) {\n        return;\n      }\n\n      var cell = dt.cell($(e.target).closest('td, th')); // Check the cell actually belongs to the host DataTable (so child\n      // rows, etc, are ignored)\n\n      if (!cell.any()) {\n        return;\n      }\n\n      var event = $.Event('user-select.dt');\n      eventTrigger(dt, event, [items, cell, e]);\n\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n\n      var cellIndex = cell.index();\n\n      if (items === 'row') {\n        idx = cellIndex.row;\n        typeSelect(e, dt, ctx, 'row', idx);\n      } else if (items === 'column') {\n        idx = cell.index().column;\n        typeSelect(e, dt, ctx, 'column', idx);\n      } else if (items === 'cell') {\n        idx = cell.index();\n        typeSelect(e, dt, ctx, 'cell', idx);\n      }\n\n      ctx._select_lastCell = cellIndex;\n    }); // Blurable\n\n    $('body').on('click.dtSelect' + _safeId(dt.table().node()), function (e) {\n      if (ctx._select.blurable) {\n        // If the click was inside the DataTables container, don't blur\n        if ($(e.target).parents().filter(dt.table().container()).length) {\n          return;\n        } // Ignore elements which have been removed from the DOM (i.e. paging\n        // buttons)\n\n\n        if ($(e.target).parents('html').length === 0) {\n          return;\n        } // Don't blur in Editor form\n\n\n        if ($(e.target).parents('div.DTE').length) {\n          return;\n        }\n\n        clear(ctx, true);\n      }\n    });\n  }\n  /**\n   * Trigger an event on a DataTable\n   *\n   * @param {DataTable.Api} api      DataTable to trigger events on\n   * @param  {boolean}      selected true if selected, false if deselected\n   * @param  {string}       type     Item type acting on\n   * @param  {boolean}      any      Require that there are values before\n   *     triggering\n   * @private\n   */\n\n\n  function eventTrigger(api, type, args, any) {\n    if (any && !api.flatten().length) {\n      return;\n    }\n\n    if (typeof type === 'string') {\n      type = type + '.dt';\n    }\n\n    args.unshift(api);\n    $(api.table().node()).trigger(type, args);\n  }\n  /**\n   * Update the information element of the DataTable showing information about the\n   * items selected. This is done by adding tags to the existing text\n   * \n   * @param {DataTable.Api} api DataTable to update\n   * @private\n   */\n\n\n  function info(api) {\n    var ctx = api.settings()[0];\n\n    if (!ctx._select.info || !ctx.aanFeatures.i) {\n      return;\n    }\n\n    if (api.select.style() === 'api') {\n      return;\n    }\n\n    var rows = api.rows({\n      selected: true\n    }).flatten().length;\n    var columns = api.columns({\n      selected: true\n    }).flatten().length;\n    var cells = api.cells({\n      selected: true\n    }).flatten().length;\n\n    var add = function add(el, name, num) {\n      el.append($('<span class=\"select-item\"/>').append(api.i18n('select.' + name + 's', {\n        _: '%d ' + name + 's selected',\n        0: '',\n        1: '1 ' + name + ' selected'\n      }, num)));\n    }; // Internal knowledge of DataTables to loop over all information elements\n\n\n    $.each(ctx.aanFeatures.i, function (i, el) {\n      el = $(el);\n      var output = $('<span class=\"select-info\"/>');\n      add(output, 'row', rows);\n      add(output, 'column', columns);\n      add(output, 'cell', cells);\n      var exisiting = el.children('span.select-info');\n\n      if (exisiting.length) {\n        exisiting.remove();\n      }\n\n      if (output.text() !== '') {\n        el.append(output);\n      }\n    });\n  }\n  /**\n   * Initialisation of a new table. Attach event handlers and callbacks to allow\n   * Select to operate correctly.\n   *\n   * This will occur _after_ the initial DataTables initialisation, although\n   * before Ajax data is rendered, if there is ajax data\n   *\n   * @param  {DataTable.settings} ctx Settings object to operate on\n   * @private\n   */\n\n\n  function init(ctx) {\n    var api = new DataTable.Api(ctx); // Row callback so that classes can be added to rows and cells if the item\n    // was selected before the element was created. This will happen with the\n    // `deferRender` option enabled.\n    // \n    // This method of attaching to `aoRowCreatedCallback` is a hack until\n    // DataTables has proper events for row manipulation If you are reviewing\n    // this code to create your own plug-ins, please do not do this!\n\n    ctx.aoRowCreatedCallback.push({\n      fn: function fn(row, data, index) {\n        var i, ien;\n        var d = ctx.aoData[index]; // Row\n\n        if (d._select_selected) {\n          $(row).addClass(ctx._select.className);\n        } // Cells and columns - if separated out, we would need to do two\n        // loops, so it makes sense to combine them into a single one\n\n\n        for (i = 0, ien = ctx.aoColumns.length; i < ien; i++) {\n          if (ctx.aoColumns[i]._select_selected || d._selected_cells && d._selected_cells[i]) {\n            $(d.anCells[i]).addClass(ctx._select.className);\n          }\n        }\n      },\n      sName: 'select-deferRender'\n    }); // On Ajax reload we want to reselect all rows which are currently selected,\n    // if there is an rowId (i.e. a unique value to identify each row with)\n\n    api.on('preXhr.dt.dtSelect', function () {\n      // note that column selection doesn't need to be cached and then\n      // reselected, as they are already selected\n      var rows = api.rows({\n        selected: true\n      }).ids(true).filter(function (d) {\n        return d !== undefined;\n      });\n      var cells = api.cells({\n        selected: true\n      }).eq(0).map(function (cellIdx) {\n        var id = api.row(cellIdx.row).id(true);\n        return id ? {\n          row: id,\n          column: cellIdx.column\n        } : undefined;\n      }).filter(function (d) {\n        return d !== undefined;\n      }); // On the next draw, reselect the currently selected items\n\n      api.one('draw.dt.dtSelect', function () {\n        api.rows(rows).select(); // `cells` is not a cell index selector, so it needs a loop\n\n        if (cells.any()) {\n          cells.each(function (id) {\n            api.cells(id.row, id.column).select();\n          });\n        }\n      });\n    }); // Update the table information element with selected item summary\n\n    api.on('draw.dtSelect.dt select.dtSelect.dt deselect.dtSelect.dt info.dt', function () {\n      info(api);\n    }); // Clean up and release\n\n    api.on('destroy.dtSelect', function () {\n      disableMouseSelection(api);\n      api.off('.dtSelect');\n    });\n  }\n  /**\n   * Add one or more items (rows or columns) to the selection when shift clicking\n   * in OS selection style\n   *\n   * @param  {DataTable.Api} dt   DataTable\n   * @param  {string}        type Row or column range selector\n   * @param  {object}        idx  Item index to select to\n   * @param  {object}        last Item index to select from\n   * @private\n   */\n\n\n  function rowColumnRange(dt, type, idx, last) {\n    // Add a range of rows from the last selected row to this one\n    var indexes = dt[type + 's']({\n      search: 'applied'\n    }).indexes();\n    var idx1 = $.inArray(last, indexes);\n    var idx2 = $.inArray(idx, indexes);\n\n    if (!dt[type + 's']({\n      selected: true\n    }).any() && idx1 === -1) {\n      // select from top to here - slightly odd, but both Windows and Mac OS\n      // do this\n      indexes.splice($.inArray(idx, indexes) + 1, indexes.length);\n    } else {\n      // reverse so we can shift click 'up' as well as down\n      if (idx1 > idx2) {\n        var tmp = idx2;\n        idx2 = idx1;\n        idx1 = tmp;\n      }\n\n      indexes.splice(idx2 + 1, indexes.length);\n      indexes.splice(0, idx1);\n    }\n\n    if (!dt[type](idx, {\n      selected: true\n    }).any()) {\n      // Select range\n      dt[type + 's'](indexes).select();\n    } else {\n      // Deselect range - need to keep the clicked on row selected\n      indexes.splice($.inArray(idx, indexes), 1);\n      dt[type + 's'](indexes).deselect();\n    }\n  }\n  /**\n   * Clear all selected items\n   *\n   * @param  {DataTable.settings} ctx Settings object of the host DataTable\n   * @param  {boolean} [force=false] Force the de-selection to happen, regardless\n   *     of selection style\n   * @private\n   */\n\n\n  function clear(ctx, force) {\n    if (force || ctx._select.style === 'single') {\n      var api = new DataTable.Api(ctx);\n      api.rows({\n        selected: true\n      }).deselect();\n      api.columns({\n        selected: true\n      }).deselect();\n      api.cells({\n        selected: true\n      }).deselect();\n    }\n  }\n  /**\n   * Select items based on the current configuration for style and items.\n   *\n   * @param  {object}             e    Mouse event object\n   * @param  {DataTables.Api}     dt   DataTable\n   * @param  {DataTable.settings} ctx  Settings object of the host DataTable\n   * @param  {string}             type Items to select\n   * @param  {int|object}         idx  Index of the item to select\n   * @private\n   */\n\n\n  function typeSelect(e, dt, ctx, type, idx) {\n    var style = dt.select.style();\n    var toggleable = dt.select.toggleable();\n    var isSelected = dt[type](idx, {\n      selected: true\n    }).any();\n\n    if (isSelected && !toggleable) {\n      return;\n    }\n\n    if (style === 'os') {\n      if (e.ctrlKey || e.metaKey) {\n        // Add or remove from the selection\n        dt[type](idx).select(!isSelected);\n      } else if (e.shiftKey) {\n        if (type === 'cell') {\n          cellRange(dt, idx, ctx._select_lastCell || null);\n        } else {\n          rowColumnRange(dt, type, idx, ctx._select_lastCell ? ctx._select_lastCell[type] : null);\n        }\n      } else {\n        // No cmd or shift click - deselect if selected, or select\n        // this row only\n        var selected = dt[type + 's']({\n          selected: true\n        });\n\n        if (isSelected && selected.flatten().length === 1) {\n          dt[type](idx).deselect();\n        } else {\n          selected.deselect();\n          dt[type](idx).select();\n        }\n      }\n    } else if (style == 'multi+shift') {\n      if (e.shiftKey) {\n        if (type === 'cell') {\n          cellRange(dt, idx, ctx._select_lastCell || null);\n        } else {\n          rowColumnRange(dt, type, idx, ctx._select_lastCell ? ctx._select_lastCell[type] : null);\n        }\n      } else {\n        dt[type](idx).select(!isSelected);\n      }\n    } else {\n      dt[type](idx).select(!isSelected);\n    }\n  }\n\n  function _safeId(node) {\n    return node.id.replace(/[^a-zA-Z0-9\\-\\_]/g, '-');\n  }\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables selectors\n   */\n  // row and column are basically identical just assigned to different properties\n  // and checking a different array, so we can dynamically create the functions to\n  // reduce the code size\n\n\n  $.each([{\n    type: 'row',\n    prop: 'aoData'\n  }, {\n    type: 'column',\n    prop: 'aoColumns'\n  }], function (i, o) {\n    DataTable.ext.selector[o.type].push(function (settings, opts, indexes) {\n      var selected = opts.selected;\n      var data;\n      var out = [];\n\n      if (selected !== true && selected !== false) {\n        return indexes;\n      }\n\n      for (var i = 0, ien = indexes.length; i < ien; i++) {\n        data = settings[o.prop][indexes[i]];\n\n        if (selected === true && data._select_selected === true || selected === false && !data._select_selected) {\n          out.push(indexes[i]);\n        }\n      }\n\n      return out;\n    });\n  });\n  DataTable.ext.selector.cell.push(function (settings, opts, cells) {\n    var selected = opts.selected;\n    var rowData;\n    var out = [];\n\n    if (selected === undefined) {\n      return cells;\n    }\n\n    for (var i = 0, ien = cells.length; i < ien; i++) {\n      rowData = settings.aoData[cells[i].row];\n\n      if (selected === true && rowData._selected_cells && rowData._selected_cells[cells[i].column] === true || selected === false && (!rowData._selected_cells || !rowData._selected_cells[cells[i].column])) {\n        out.push(cells[i]);\n      }\n    }\n\n    return out;\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables API\n   *\n   * For complete documentation, please refer to the docs/api directory or the\n   * DataTables site\n   */\n  // Local variables to improve compression\n\n  var apiRegister = DataTable.Api.register;\n  var apiRegisterPlural = DataTable.Api.registerPlural;\n  apiRegister('select()', function () {\n    return this.iterator('table', function (ctx) {\n      DataTable.select.init(new DataTable.Api(ctx));\n    });\n  });\n  apiRegister('select.blurable()', function (flag) {\n    if (flag === undefined) {\n      return this.context[0]._select.blurable;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.blurable = flag;\n    });\n  });\n  apiRegister('select.toggleable()', function (flag) {\n    if (flag === undefined) {\n      return this.context[0]._select.toggleable;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.toggleable = flag;\n    });\n  });\n  apiRegister('select.info()', function (flag) {\n    if (info === undefined) {\n      return this.context[0]._select.info;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.info = flag;\n    });\n  });\n  apiRegister('select.items()', function (items) {\n    if (items === undefined) {\n      return this.context[0]._select.items;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.items = items;\n      eventTrigger(new DataTable.Api(ctx), 'selectItems', [items]);\n    });\n  }); // Takes effect from the _next_ selection. None disables future selection, but\n  // does not clear the current selection. Use the `deselect` methods for that\n\n  apiRegister('select.style()', function (style) {\n    if (style === undefined) {\n      return this.context[0]._select.style;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.style = style;\n\n      if (!ctx._select_init) {\n        init(ctx);\n      } // Add / remove mouse event handlers. They aren't required when only\n      // API selection is available\n\n\n      var dt = new DataTable.Api(ctx);\n      disableMouseSelection(dt);\n\n      if (style !== 'api') {\n        enableMouseSelection(dt);\n      }\n\n      eventTrigger(new DataTable.Api(ctx), 'selectStyle', [style]);\n    });\n  });\n  apiRegister('select.selector()', function (selector) {\n    if (selector === undefined) {\n      return this.context[0]._select.selector;\n    }\n\n    return this.iterator('table', function (ctx) {\n      disableMouseSelection(new DataTable.Api(ctx));\n      ctx._select.selector = selector;\n\n      if (ctx._select.style !== 'api') {\n        enableMouseSelection(new DataTable.Api(ctx));\n      }\n    });\n  });\n  apiRegisterPlural('rows().select()', 'row().select()', function (select) {\n    var api = this;\n\n    if (select === false) {\n      return this.deselect();\n    }\n\n    this.iterator('row', function (ctx, idx) {\n      clear(ctx);\n      ctx.aoData[idx]._select_selected = true;\n      $(ctx.aoData[idx].nTr).addClass(ctx._select.className);\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'select', ['row', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('columns().select()', 'column().select()', function (select) {\n    var api = this;\n\n    if (select === false) {\n      return this.deselect();\n    }\n\n    this.iterator('column', function (ctx, idx) {\n      clear(ctx);\n      ctx.aoColumns[idx]._select_selected = true;\n      var column = new DataTable.Api(ctx).column(idx);\n      $(column.header()).addClass(ctx._select.className);\n      $(column.footer()).addClass(ctx._select.className);\n      column.nodes().to$().addClass(ctx._select.className);\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'select', ['column', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('cells().select()', 'cell().select()', function (select) {\n    var api = this;\n\n    if (select === false) {\n      return this.deselect();\n    }\n\n    this.iterator('cell', function (ctx, rowIdx, colIdx) {\n      clear(ctx);\n      var data = ctx.aoData[rowIdx];\n\n      if (data._selected_cells === undefined) {\n        data._selected_cells = [];\n      }\n\n      data._selected_cells[colIdx] = true;\n\n      if (data.anCells) {\n        $(data.anCells[colIdx]).addClass(ctx._select.className);\n      }\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'select', ['cell', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('rows().deselect()', 'row().deselect()', function () {\n    var api = this;\n    this.iterator('row', function (ctx, idx) {\n      ctx.aoData[idx]._select_selected = false;\n      $(ctx.aoData[idx].nTr).removeClass(ctx._select.className);\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'deselect', ['row', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('columns().deselect()', 'column().deselect()', function () {\n    var api = this;\n    this.iterator('column', function (ctx, idx) {\n      ctx.aoColumns[idx]._select_selected = false;\n      var api = new DataTable.Api(ctx);\n      var column = api.column(idx);\n      $(column.header()).removeClass(ctx._select.className);\n      $(column.footer()).removeClass(ctx._select.className); // Need to loop over each cell, rather than just using\n      // `column().nodes()` as cells which are individually selected should\n      // not have the `selected` class removed from them\n\n      api.cells(null, idx).indexes().each(function (cellIdx) {\n        var data = ctx.aoData[cellIdx.row];\n        var cellSelected = data._selected_cells;\n\n        if (data.anCells && (!cellSelected || !cellSelected[cellIdx.column])) {\n          $(data.anCells[cellIdx.column]).removeClass(ctx._select.className);\n        }\n      });\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'deselect', ['column', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('cells().deselect()', 'cell().deselect()', function () {\n    var api = this;\n    this.iterator('cell', function (ctx, rowIdx, colIdx) {\n      var data = ctx.aoData[rowIdx];\n      data._selected_cells[colIdx] = false; // Remove class only if the cells exist, and the cell is not column\n      // selected, in which case the class should remain (since it is selected\n      // in the column)\n\n      if (data.anCells && !ctx.aoColumns[colIdx]._select_selected) {\n        $(data.anCells[colIdx]).removeClass(ctx._select.className);\n      }\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'deselect', ['cell', api[i]], true);\n    });\n    return this;\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Buttons\n   */\n\n  function i18n(label, def) {\n    return function (dt) {\n      return dt.i18n('buttons.' + label, def);\n    };\n  } // Common events with suitable namespaces\n\n\n  function namespacedEvents(config) {\n    var unique = config._eventNamespace;\n    return 'draw.dt.DT' + unique + ' select.dt.DT' + unique + ' deselect.dt.DT' + unique;\n  }\n\n  function enabled(dt, config) {\n    if ($.inArray('rows', config.limitTo) !== -1 && dt.rows({\n      selected: true\n    }).any()) {\n      return true;\n    }\n\n    if ($.inArray('columns', config.limitTo) !== -1 && dt.columns({\n      selected: true\n    }).any()) {\n      return true;\n    }\n\n    if ($.inArray('cells', config.limitTo) !== -1 && dt.cells({\n      selected: true\n    }).any()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  var _buttonNamespace = 0;\n  $.extend(DataTable.ext.buttons, {\n    selected: {\n      text: i18n('selected', 'Selected'),\n      className: 'buttons-selected',\n      limitTo: ['rows', 'columns', 'cells'],\n      init: function init(dt, node, config) {\n        var that = this;\n        config._eventNamespace = '.select' + _buttonNamespace++; // .DT namespace listeners are removed by DataTables automatically\n        // on table destroy\n\n        dt.on(namespacedEvents(config), function () {\n          that.enable(enabled(dt, config));\n        });\n        this.disable();\n      },\n      destroy: function destroy(dt, node, config) {\n        dt.off(config._eventNamespace);\n      }\n    },\n    selectedSingle: {\n      text: i18n('selectedSingle', 'Selected single'),\n      className: 'buttons-selected-single',\n      init: function init(dt, node, config) {\n        var that = this;\n        config._eventNamespace = '.select' + _buttonNamespace++;\n        dt.on(namespacedEvents(config), function () {\n          var count = dt.rows({\n            selected: true\n          }).flatten().length + dt.columns({\n            selected: true\n          }).flatten().length + dt.cells({\n            selected: true\n          }).flatten().length;\n          that.enable(count === 1);\n        });\n        this.disable();\n      },\n      destroy: function destroy(dt, node, config) {\n        dt.off(config._eventNamespace);\n      }\n    },\n    selectAll: {\n      text: i18n('selectAll', 'Select all'),\n      className: 'buttons-select-all',\n      action: function action() {\n        var items = this.select.items();\n        this[items + 's']().select();\n      }\n    },\n    selectNone: {\n      text: i18n('selectNone', 'Deselect all'),\n      className: 'buttons-select-none',\n      action: function action() {\n        clear(this.settings()[0], true);\n      },\n      init: function init(dt, node, config) {\n        var that = this;\n        config._eventNamespace = '.select' + _buttonNamespace++;\n        dt.on(namespacedEvents(config), function () {\n          var count = dt.rows({\n            selected: true\n          }).flatten().length + dt.columns({\n            selected: true\n          }).flatten().length + dt.cells({\n            selected: true\n          }).flatten().length;\n          that.enable(count > 0);\n        });\n        this.disable();\n      },\n      destroy: function destroy(dt, node, config) {\n        dt.off(config._eventNamespace);\n      }\n    }\n  });\n  $.each(['Row', 'Column', 'Cell'], function (i, item) {\n    var lc = item.toLowerCase();\n    DataTable.ext.buttons['select' + item + 's'] = {\n      text: i18n('select' + item + 's', 'Select ' + lc + 's'),\n      className: 'buttons-select-' + lc + 's',\n      action: function action() {\n        this.select.items(lc);\n      },\n      init: function init(dt) {\n        var that = this;\n        dt.on('selectItems.dt.DT', function (e, ctx, items) {\n          that.active(items === lc);\n        });\n      }\n    };\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Initialisation\n   */\n  // DataTables creation - check if select has been defined in the options. Note\n  // this required that the table be in the document! If it isn't then something\n  // needs to trigger this method unfortunately. The next major release of\n  // DataTables will rework the events and address this.\n\n  $(document).on('preInit.dt.dtSelect', function (e, ctx) {\n    if (e.namespace !== 'dt') {\n      return;\n    }\n\n    DataTable.select.init(new DataTable.Api(ctx));\n  });\n  return DataTable.select;\n});","map":null,"metadata":{},"sourceType":"script"}