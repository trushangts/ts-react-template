{"ast":null,"code":"/**\n * @license\n * Copyright 2011 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/**\n * @fileoverview This file contains utility functions used by dygraphs. These\n * are typically static (i.e. not related to any particular dygraph). Examples\n * include date/time formatting functions, basic algorithms (e.g. binary\n * search) and generic DOM-manipulation functions.\n */\n\n/*global Dygraph:false, Node:false */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeEvent = removeEvent;\nexports.cancelEvent = cancelEvent;\nexports.hsvToRGB = hsvToRGB;\nexports.findPos = findPos;\nexports.pageX = pageX;\nexports.pageY = pageY;\nexports.dragGetX_ = dragGetX_;\nexports.dragGetY_ = dragGetY_;\nexports.isOK = isOK;\nexports.isValidPoint = isValidPoint;\nexports.floatFormat = floatFormat;\nexports.zeropad = zeropad;\nexports.hmsString_ = hmsString_;\nexports.dateString_ = dateString_;\nexports.round_ = round_;\nexports.binarySearch = binarySearch;\nexports.dateParser = dateParser;\nexports.dateStrToMillis = dateStrToMillis;\nexports.update = update;\nexports.updateDeep = updateDeep;\nexports.isArrayLike = isArrayLike;\nexports.isDateLike = isDateLike;\nexports.clone = clone;\nexports.createCanvas = createCanvas;\nexports.getContextPixelRatio = getContextPixelRatio;\nexports.Iterator = Iterator;\nexports.createIterator = createIterator;\nexports.repeatAndCleanup = repeatAndCleanup;\nexports.isPixelChangingOptionList = isPixelChangingOptionList;\nexports.detectLineDelimiter = detectLineDelimiter;\nexports.isNodeContainedBy = isNodeContainedBy;\nexports.pow = pow;\nexports.toRGB_ = toRGB_;\nexports.isCanvasSupported = isCanvasSupported;\nexports.parseFloat_ = parseFloat_;\nexports.numberValueFormatter = numberValueFormatter;\nexports.numberAxisLabelFormatter = numberAxisLabelFormatter;\nexports.dateAxisLabelFormatter = dateAxisLabelFormatter;\nexports.dateValueFormatter = dateValueFormatter;\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nvar _dygraphTickers = require('./dygraph-tickers');\n\nvar DygraphTickers = _interopRequireWildcard(_dygraphTickers);\n\nvar LOG_SCALE = 10;\nexports.LOG_SCALE = LOG_SCALE;\nvar LN_TEN = Math.log(LOG_SCALE);\nexports.LN_TEN = LN_TEN;\n/**\n * @private\n * @param {number} x\n * @return {number}\n */\n\nvar log10 = function log10(x) {\n  return Math.log(x) / LN_TEN;\n};\n\nexports.log10 = log10;\n/**\n * @private\n * @param {number} r0\n * @param {number} r1\n * @param {number} pct\n * @return {number}\n */\n\nvar logRangeFraction = function logRangeFraction(r0, r1, pct) {\n  // Computing the inverse of toPercentXCoord. The function was arrived at with\n  // the following steps:\n  //\n  // Original calcuation:\n  // pct = (log(x) - log(xRange[0])) / (log(xRange[1]) - log(xRange[0])));\n  //\n  // Multiply both sides by the right-side denominator.\n  // pct * (log(xRange[1] - log(xRange[0]))) = log(x) - log(xRange[0])\n  //\n  // add log(xRange[0]) to both sides\n  // log(xRange[0]) + (pct * (log(xRange[1]) - log(xRange[0])) = log(x);\n  //\n  // Swap both sides of the equation,\n  // log(x) = log(xRange[0]) + (pct * (log(xRange[1]) - log(xRange[0]))\n  //\n  // Use both sides as the exponent in 10^exp and we're done.\n  // x = 10 ^ (log(xRange[0]) + (pct * (log(xRange[1]) - log(xRange[0])))\n  var logr0 = log10(r0);\n  var logr1 = log10(r1);\n  var exponent = logr0 + pct * (logr1 - logr0);\n  var value = Math.pow(LOG_SCALE, exponent);\n  return value;\n};\n\nexports.logRangeFraction = logRangeFraction;\n/** A dotted line stroke pattern. */\n\nvar DOTTED_LINE = [2, 2];\nexports.DOTTED_LINE = DOTTED_LINE;\n/** A dashed line stroke pattern. */\n\nvar DASHED_LINE = [7, 3];\nexports.DASHED_LINE = DASHED_LINE;\n/** A dot dash stroke pattern. */\n\nvar DOT_DASH_LINE = [7, 2, 2, 2];\nexports.DOT_DASH_LINE = DOT_DASH_LINE; // Directions for panning and zooming. Use bit operations when combined\n// values are possible.\n\nvar HORIZONTAL = 1;\nexports.HORIZONTAL = HORIZONTAL;\nvar VERTICAL = 2;\nexports.VERTICAL = VERTICAL;\n/**\n * Return the 2d context for a dygraph canvas.\n *\n * This method is only exposed for the sake of replacing the function in\n * automated tests.\n *\n * @param {!HTMLCanvasElement} canvas\n * @return {!CanvasRenderingContext2D}\n * @private\n */\n\nvar getContext = function getContext(canvas) {\n  return (\n    /** @type{!CanvasRenderingContext2D}*/\n    canvas.getContext(\"2d\")\n  );\n};\n\nexports.getContext = getContext;\n/**\n * Add an event handler.\n * @param {!Node} elem The element to add the event to.\n * @param {string} type The type of the event, e.g. 'click' or 'mousemove'.\n * @param {function(Event):(boolean|undefined)} fn The function to call\n *     on the event. The function takes one parameter: the event object.\n * @private\n */\n\nvar addEvent = function addEvent(elem, type, fn) {\n  elem.addEventListener(type, fn, false);\n};\n\nexports.addEvent = addEvent;\n/**\n * Remove an event handler.\n * @param {!Node} elem The element to remove the event from.\n * @param {string} type The type of the event, e.g. 'click' or 'mousemove'.\n * @param {function(Event):(boolean|undefined)} fn The function to call\n *     on the event. The function takes one parameter: the event object.\n */\n\nfunction removeEvent(elem, type, fn) {\n  elem.removeEventListener(type, fn, false);\n}\n\n;\n/**\n * Cancels further processing of an event. This is useful to prevent default\n * browser actions, e.g. highlighting text on a double-click.\n * Based on the article at\n * http://www.switchonthecode.com/tutorials/javascript-tutorial-the-scroll-wheel\n * @param {!Event} e The event whose normal behavior should be canceled.\n * @private\n */\n\nfunction cancelEvent(e) {\n  e = e ? e : window.event;\n\n  if (e.stopPropagation) {\n    e.stopPropagation();\n  }\n\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n\n  e.cancelBubble = true;\n  e.cancel = true;\n  e.returnValue = false;\n  return false;\n}\n\n;\n/**\n * Convert hsv values to an rgb(r,g,b) string. Taken from MochiKit.Color. This\n * is used to generate default series colors which are evenly spaced on the\n * color wheel.\n * @param { number } hue Range is 0.0-1.0.\n * @param { number } saturation Range is 0.0-1.0.\n * @param { number } value Range is 0.0-1.0.\n * @return { string } \"rgb(r,g,b)\" where r, g and b range from 0-255.\n * @private\n */\n\nfunction hsvToRGB(hue, saturation, value) {\n  var red;\n  var green;\n  var blue;\n\n  if (saturation === 0) {\n    red = value;\n    green = value;\n    blue = value;\n  } else {\n    var i = Math.floor(hue * 6);\n    var f = hue * 6 - i;\n    var p = value * (1 - saturation);\n    var q = value * (1 - saturation * f);\n    var t = value * (1 - saturation * (1 - f));\n\n    switch (i) {\n      case 1:\n        red = q;\n        green = value;\n        blue = p;\n        break;\n\n      case 2:\n        red = p;\n        green = value;\n        blue = t;\n        break;\n\n      case 3:\n        red = p;\n        green = q;\n        blue = value;\n        break;\n\n      case 4:\n        red = t;\n        green = p;\n        blue = value;\n        break;\n\n      case 5:\n        red = value;\n        green = p;\n        blue = q;\n        break;\n\n      case 6: // fall through\n\n      case 0:\n        red = value;\n        green = t;\n        blue = p;\n        break;\n    }\n  }\n\n  red = Math.floor(255 * red + 0.5);\n  green = Math.floor(255 * green + 0.5);\n  blue = Math.floor(255 * blue + 0.5);\n  return 'rgb(' + red + ',' + green + ',' + blue + ')';\n}\n\n;\n/**\n * Find the coordinates of an object relative to the top left of the page.\n *\n * @param {Node} obj\n * @return {{x:number,y:number}}\n * @private\n */\n\nfunction findPos(obj) {\n  var p = obj.getBoundingClientRect(),\n      w = window,\n      d = document.documentElement;\n  return {\n    x: p.left + (w.pageXOffset || d.scrollLeft),\n    y: p.top + (w.pageYOffset || d.scrollTop)\n  };\n}\n\n;\n/**\n * Returns the x-coordinate of the event in a coordinate system where the\n * top-left corner of the page (not the window) is (0,0).\n * Taken from MochiKit.Signal\n * @param {!Event} e\n * @return {number}\n * @private\n */\n\nfunction pageX(e) {\n  return !e.pageX || e.pageX < 0 ? 0 : e.pageX;\n}\n\n;\n/**\n * Returns the y-coordinate of the event in a coordinate system where the\n * top-left corner of the page (not the window) is (0,0).\n * Taken from MochiKit.Signal\n * @param {!Event} e\n * @return {number}\n * @private\n */\n\nfunction pageY(e) {\n  return !e.pageY || e.pageY < 0 ? 0 : e.pageY;\n}\n\n;\n/**\n * Converts page the x-coordinate of the event to pixel x-coordinates on the\n * canvas (i.e. DOM Coords).\n * @param {!Event} e Drag event.\n * @param {!DygraphInteractionContext} context Interaction context object.\n * @return {number} The amount by which the drag has moved to the right.\n */\n\nfunction dragGetX_(e, context) {\n  return pageX(e) - context.px;\n}\n\n;\n/**\n * Converts page the y-coordinate of the event to pixel y-coordinates on the\n * canvas (i.e. DOM Coords).\n * @param {!Event} e Drag event.\n * @param {!DygraphInteractionContext} context Interaction context object.\n * @return {number} The amount by which the drag has moved down.\n */\n\nfunction dragGetY_(e, context) {\n  return pageY(e) - context.py;\n}\n\n;\n/**\n * This returns true unless the parameter is 0, null, undefined or NaN.\n * TODO(danvk): rename this function to something like 'isNonZeroNan'.\n *\n * @param {number} x The number to consider.\n * @return {boolean} Whether the number is zero or NaN.\n * @private\n */\n\nfunction isOK(x) {\n  return !!x && !isNaN(x);\n}\n\n;\n/**\n * @param {{x:?number,y:?number,yval:?number}} p The point to consider, valid\n *     points are {x, y} objects\n * @param {boolean=} opt_allowNaNY Treat point with y=NaN as valid\n * @return {boolean} Whether the point has numeric x and y.\n * @private\n */\n\nfunction isValidPoint(p, opt_allowNaNY) {\n  if (!p) return false; // null or undefined object\n\n  if (p.yval === null) return false; // missing point\n\n  if (p.x === null || p.x === undefined) return false;\n  if (p.y === null || p.y === undefined) return false;\n  if (isNaN(p.x) || !opt_allowNaNY && isNaN(p.y)) return false;\n  return true;\n}\n\n;\n/**\n * Number formatting function which mimics the behavior of %g in printf, i.e.\n * either exponential or fixed format (without trailing 0s) is used depending on\n * the length of the generated string.  The advantage of this format is that\n * there is a predictable upper bound on the resulting string length,\n * significant figures are not dropped, and normal numbers are not displayed in\n * exponential notation.\n *\n * NOTE: JavaScript's native toPrecision() is NOT a drop-in replacement for %g.\n * It creates strings which are too long for absolute values between 10^-4 and\n * 10^-6, e.g. '0.00001' instead of '1e-5'. See tests/number-format.html for\n * output examples.\n *\n * @param {number} x The number to format\n * @param {number=} opt_precision The precision to use, default 2.\n * @return {string} A string formatted like %g in printf.  The max generated\n *                  string length should be precision + 6 (e.g 1.123e+300).\n */\n\nfunction floatFormat(x, opt_precision) {\n  // Avoid invalid precision values; [1, 21] is the valid range.\n  var p = Math.min(Math.max(1, opt_precision || 2), 21); // This is deceptively simple.  The actual algorithm comes from:\n  //\n  // Max allowed length = p + 4\n  // where 4 comes from 'e+n' and '.'.\n  //\n  // Length of fixed format = 2 + y + p\n  // where 2 comes from '0.' and y = # of leading zeroes.\n  //\n  // Equating the two and solving for y yields y = 2, or 0.00xxxx which is\n  // 1.0e-3.\n  //\n  // Since the behavior of toPrecision() is identical for larger numbers, we\n  // don't have to worry about the other bound.\n  //\n  // Finally, the argument for toExponential() is the number of trailing digits,\n  // so we take off 1 for the value before the '.'.\n\n  return Math.abs(x) < 1.0e-3 && x !== 0.0 ? x.toExponential(p - 1) : x.toPrecision(p);\n}\n\n;\n/**\n * Converts '9' to '09' (useful for dates)\n * @param {number} x\n * @return {string}\n * @private\n */\n\nfunction zeropad(x) {\n  if (x < 10) return \"0\" + x;else return \"\" + x;\n}\n\n;\n/**\n * Date accessors to get the parts of a calendar date (year, month,\n * day, hour, minute, second and millisecond) according to local time,\n * and factory method to call the Date constructor with an array of arguments.\n */\n\nvar DateAccessorsLocal = {\n  getFullYear: function getFullYear(d) {\n    return d.getFullYear();\n  },\n  getMonth: function getMonth(d) {\n    return d.getMonth();\n  },\n  getDate: function getDate(d) {\n    return d.getDate();\n  },\n  getHours: function getHours(d) {\n    return d.getHours();\n  },\n  getMinutes: function getMinutes(d) {\n    return d.getMinutes();\n  },\n  getSeconds: function getSeconds(d) {\n    return d.getSeconds();\n  },\n  getMilliseconds: function getMilliseconds(d) {\n    return d.getMilliseconds();\n  },\n  getDay: function getDay(d) {\n    return d.getDay();\n  },\n  makeDate: function makeDate(y, m, d, hh, mm, ss, ms) {\n    return new Date(y, m, d, hh, mm, ss, ms);\n  }\n};\nexports.DateAccessorsLocal = DateAccessorsLocal;\n/**\n * Date accessors to get the parts of a calendar date (year, month,\n * day of month, hour, minute, second and millisecond) according to UTC time,\n * and factory method to call the Date constructor with an array of arguments.\n */\n\nvar DateAccessorsUTC = {\n  getFullYear: function getFullYear(d) {\n    return d.getUTCFullYear();\n  },\n  getMonth: function getMonth(d) {\n    return d.getUTCMonth();\n  },\n  getDate: function getDate(d) {\n    return d.getUTCDate();\n  },\n  getHours: function getHours(d) {\n    return d.getUTCHours();\n  },\n  getMinutes: function getMinutes(d) {\n    return d.getUTCMinutes();\n  },\n  getSeconds: function getSeconds(d) {\n    return d.getUTCSeconds();\n  },\n  getMilliseconds: function getMilliseconds(d) {\n    return d.getUTCMilliseconds();\n  },\n  getDay: function getDay(d) {\n    return d.getUTCDay();\n  },\n  makeDate: function makeDate(y, m, d, hh, mm, ss, ms) {\n    return new Date(Date.UTC(y, m, d, hh, mm, ss, ms));\n  }\n};\nexports.DateAccessorsUTC = DateAccessorsUTC;\n/**\n * Return a string version of the hours, minutes and seconds portion of a date.\n * @param {number} hh The hours (from 0-23)\n * @param {number} mm The minutes (from 0-59)\n * @param {number} ss The seconds (from 0-59)\n * @return {string} A time of the form \"HH:MM\" or \"HH:MM:SS\"\n * @private\n */\n\nfunction hmsString_(hh, mm, ss, ms) {\n  var ret = zeropad(hh) + \":\" + zeropad(mm);\n\n  if (ss) {\n    ret += \":\" + zeropad(ss);\n\n    if (ms) {\n      var str = \"\" + ms;\n      ret += \".\" + ('000' + str).substring(str.length);\n    }\n  }\n\n  return ret;\n}\n\n;\n/**\n * Convert a JS date (millis since epoch) to a formatted string.\n * @param {number} time The JavaScript time value (ms since epoch)\n * @param {boolean} utc Whether output UTC or local time\n * @return {string} A date of one of these forms:\n *     \"YYYY/MM/DD\", \"YYYY/MM/DD HH:MM\" or \"YYYY/MM/DD HH:MM:SS\"\n * @private\n */\n\nfunction dateString_(time, utc) {\n  var accessors = utc ? DateAccessorsUTC : DateAccessorsLocal;\n  var date = new Date(time);\n  var y = accessors.getFullYear(date);\n  var m = accessors.getMonth(date);\n  var d = accessors.getDate(date);\n  var hh = accessors.getHours(date);\n  var mm = accessors.getMinutes(date);\n  var ss = accessors.getSeconds(date);\n  var ms = accessors.getMilliseconds(date); // Get a year string:\n\n  var year = \"\" + y; // Get a 0 padded month string\n\n  var month = zeropad(m + 1); //months are 0-offset, sigh\n  // Get a 0 padded day string\n\n  var day = zeropad(d);\n  var frac = hh * 3600 + mm * 60 + ss + 1e-3 * ms;\n  var ret = year + \"/\" + month + \"/\" + day;\n\n  if (frac) {\n    ret += \" \" + hmsString_(hh, mm, ss, ms);\n  }\n\n  return ret;\n}\n\n;\n/**\n * Round a number to the specified number of digits past the decimal point.\n * @param {number} num The number to round\n * @param {number} places The number of decimals to which to round\n * @return {number} The rounded number\n * @private\n */\n\nfunction round_(num, places) {\n  var shift = Math.pow(10, places);\n  return Math.round(num * shift) / shift;\n}\n\n;\n/**\n * Implementation of binary search over an array.\n * Currently does not work when val is outside the range of arry's values.\n * @param {number} val the value to search for\n * @param {Array.<number>} arry is the value over which to search\n * @param {number} abs If abs > 0, find the lowest entry greater than val\n *     If abs < 0, find the highest entry less than val.\n *     If abs == 0, find the entry that equals val.\n * @param {number=} low The first index in arry to consider (optional)\n * @param {number=} high The last index in arry to consider (optional)\n * @return {number} Index of the element, or -1 if it isn't found.\n * @private\n */\n\nfunction binarySearch(_x, _x2, _x3, _x4, _x5) {\n  var _again = true;\n\n  _function: while (_again) {\n    var val = _x,\n        arry = _x2,\n        abs = _x3,\n        low = _x4,\n        high = _x5;\n    _again = false;\n\n    if (low === null || low === undefined || high === null || high === undefined) {\n      low = 0;\n      high = arry.length - 1;\n    }\n\n    if (low > high) {\n      return -1;\n    }\n\n    if (abs === null || abs === undefined) {\n      abs = 0;\n    }\n\n    var validIndex = function validIndex(idx) {\n      return idx >= 0 && idx < arry.length;\n    };\n\n    var mid = parseInt((low + high) / 2, 10);\n    var element = arry[mid];\n    var idx;\n\n    if (element == val) {\n      return mid;\n    } else if (element > val) {\n      if (abs > 0) {\n        // Accept if element > val, but also if prior element < val.\n        idx = mid - 1;\n\n        if (validIndex(idx) && arry[idx] < val) {\n          return mid;\n        }\n      }\n\n      _x = val;\n      _x2 = arry;\n      _x3 = abs;\n      _x4 = low;\n      _x5 = mid - 1;\n      _again = true;\n      validIndex = mid = element = idx = undefined;\n      continue _function;\n    } else if (element < val) {\n      if (abs < 0) {\n        // Accept if element < val, but also if prior element > val.\n        idx = mid + 1;\n\n        if (validIndex(idx) && arry[idx] > val) {\n          return mid;\n        }\n      }\n\n      _x = val;\n      _x2 = arry;\n      _x3 = abs;\n      _x4 = mid + 1;\n      _x5 = high;\n      _again = true;\n      validIndex = mid = element = idx = undefined;\n      continue _function;\n    }\n\n    return -1; // can't actually happen, but makes closure compiler happy\n  }\n}\n\n;\n/**\n * Parses a date, returning the number of milliseconds since epoch. This can be\n * passed in as an xValueParser in the Dygraph constructor.\n * TODO(danvk): enumerate formats that this understands.\n *\n * @param {string} dateStr A date in a variety of possible string formats.\n * @return {number} Milliseconds since epoch.\n * @private\n */\n\nfunction dateParser(dateStr) {\n  var dateStrSlashed;\n  var d; // Let the system try the format first, with one caveat:\n  // YYYY-MM-DD[ HH:MM:SS] is interpreted as UTC by a variety of browsers.\n  // dygraphs displays dates in local time, so this will result in surprising\n  // inconsistencies. But if you specify \"T\" or \"Z\" (i.e. YYYY-MM-DDTHH:MM:SS),\n  // then you probably know what you're doing, so we'll let you go ahead.\n  // Issue: http://code.google.com/p/dygraphs/issues/detail?id=255\n\n  if (dateStr.search(\"-\") == -1 || dateStr.search(\"T\") != -1 || dateStr.search(\"Z\") != -1) {\n    d = dateStrToMillis(dateStr);\n    if (d && !isNaN(d)) return d;\n  }\n\n  if (dateStr.search(\"-\") != -1) {\n    // e.g. '2009-7-12' or '2009-07-12'\n    dateStrSlashed = dateStr.replace(\"-\", \"/\", \"g\");\n\n    while (dateStrSlashed.search(\"-\") != -1) {\n      dateStrSlashed = dateStrSlashed.replace(\"-\", \"/\");\n    }\n\n    d = dateStrToMillis(dateStrSlashed);\n  } else if (dateStr.length == 8) {\n    // e.g. '20090712'\n    // TODO(danvk): remove support for this format. It's confusing.\n    dateStrSlashed = dateStr.substr(0, 4) + \"/\" + dateStr.substr(4, 2) + \"/\" + dateStr.substr(6, 2);\n    d = dateStrToMillis(dateStrSlashed);\n  } else {\n    // Any format that Date.parse will accept, e.g. \"2009/07/12\" or\n    // \"2009/07/12 12:34:56\"\n    d = dateStrToMillis(dateStr);\n  }\n\n  if (!d || isNaN(d)) {\n    console.error(\"Couldn't parse \" + dateStr + \" as a date\");\n  }\n\n  return d;\n}\n\n;\n/**\n * This is identical to JavaScript's built-in Date.parse() method, except that\n * it doesn't get replaced with an incompatible method by aggressive JS\n * libraries like MooTools or Joomla.\n * @param {string} str The date string, e.g. \"2011/05/06\"\n * @return {number} millis since epoch\n * @private\n */\n\nfunction dateStrToMillis(str) {\n  return new Date(str).getTime();\n}\n\n; // These functions are all based on MochiKit.\n\n/**\n * Copies all the properties from o to self.\n *\n * @param {!Object} self\n * @param {!Object} o\n * @return {!Object}\n */\n\nfunction update(self, o) {\n  if (typeof o != 'undefined' && o !== null) {\n    for (var k in o) {\n      if (o.hasOwnProperty(k)) {\n        self[k] = o[k];\n      }\n    }\n  }\n\n  return self;\n}\n\n;\n/**\n * Copies all the properties from o to self.\n *\n * @param {!Object} self\n * @param {!Object} o\n * @return {!Object}\n * @private\n */\n\nfunction updateDeep(self, o) {\n  // Taken from http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object\n  function isNode(o) {\n    return typeof Node === \"object\" ? o instanceof Node : typeof o === \"object\" && typeof o.nodeType === \"number\" && typeof o.nodeName === \"string\";\n  }\n\n  if (typeof o != 'undefined' && o !== null) {\n    for (var k in o) {\n      if (o.hasOwnProperty(k)) {\n        if (o[k] === null) {\n          self[k] = null;\n        } else if (isArrayLike(o[k])) {\n          self[k] = o[k].slice();\n        } else if (isNode(o[k])) {\n          // DOM objects are shallowly-copied.\n          self[k] = o[k];\n        } else if (typeof o[k] == 'object') {\n          if (typeof self[k] != 'object' || self[k] === null) {\n            self[k] = {};\n          }\n\n          updateDeep(self[k], o[k]);\n        } else {\n          self[k] = o[k];\n        }\n      }\n    }\n  }\n\n  return self;\n}\n\n;\n/**\n * @param {*} o\n * @return {boolean}\n * @private\n */\n\nfunction isArrayLike(o) {\n  var typ = typeof o;\n\n  if (typ != 'object' && !(typ == 'function' && typeof o.item == 'function') || o === null || typeof o.length != 'number' || o.nodeType === 3) {\n    return false;\n  }\n\n  return true;\n}\n\n;\n/**\n * @param {Object} o\n * @return {boolean}\n * @private\n */\n\nfunction isDateLike(o) {\n  if (typeof o != \"object\" || o === null || typeof o.getTime != 'function') {\n    return false;\n  }\n\n  return true;\n}\n\n;\n/**\n * Note: this only seems to work for arrays.\n * @param {!Array} o\n * @return {!Array}\n * @private\n */\n\nfunction clone(o) {\n  // TODO(danvk): figure out how MochiKit's version works\n  var r = [];\n\n  for (var i = 0; i < o.length; i++) {\n    if (isArrayLike(o[i])) {\n      r.push(clone(o[i]));\n    } else {\n      r.push(o[i]);\n    }\n  }\n\n  return r;\n}\n\n;\n/**\n * Create a new canvas element.\n *\n * @return {!HTMLCanvasElement}\n * @private\n */\n\nfunction createCanvas() {\n  return document.createElement('canvas');\n}\n\n;\n/**\n * Returns the context's pixel ratio, which is the ratio between the device\n * pixel ratio and the backing store ratio. Typically this is 1 for conventional\n * displays, and > 1 for HiDPI displays (such as the Retina MBP).\n * See http://www.html5rocks.com/en/tutorials/canvas/hidpi/ for more details.\n *\n * @param {!CanvasRenderingContext2D} context The canvas's 2d context.\n * @return {number} The ratio of the device pixel ratio and the backing store\n * ratio for the specified context.\n */\n\nfunction getContextPixelRatio(context) {\n  try {\n    var devicePixelRatio = window.devicePixelRatio;\n    var backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n\n    if (devicePixelRatio !== undefined) {\n      return devicePixelRatio / backingStoreRatio;\n    } else {\n      // At least devicePixelRatio must be defined for this ratio to make sense.\n      // We default backingStoreRatio to 1: this does not exist on some browsers\n      // (i.e. desktop Chrome).\n      return 1;\n    }\n  } catch (e) {\n    return 1;\n  }\n}\n\n;\n/**\n * TODO(danvk): use @template here when it's better supported for classes.\n * @param {!Array} array\n * @param {number} start\n * @param {number} length\n * @param {function(!Array,?):boolean=} predicate\n * @constructor\n */\n\nfunction Iterator(array, start, length, predicate) {\n  start = start || 0;\n  length = length || array.length;\n  this.hasNext = true; // Use to identify if there's another element.\n\n  this.peek = null; // Use for look-ahead\n\n  this.start_ = start;\n  this.array_ = array;\n  this.predicate_ = predicate;\n  this.end_ = Math.min(array.length, start + length);\n  this.nextIdx_ = start - 1; // use -1 so initial advance works.\n\n  this.next(); // ignoring result.\n}\n\n;\n/**\n * @return {Object}\n */\n\nIterator.prototype.next = function () {\n  if (!this.hasNext) {\n    return null;\n  }\n\n  var obj = this.peek;\n  var nextIdx = this.nextIdx_ + 1;\n  var found = false;\n\n  while (nextIdx < this.end_) {\n    if (!this.predicate_ || this.predicate_(this.array_, nextIdx)) {\n      this.peek = this.array_[nextIdx];\n      found = true;\n      break;\n    }\n\n    nextIdx++;\n  }\n\n  this.nextIdx_ = nextIdx;\n\n  if (!found) {\n    this.hasNext = false;\n    this.peek = null;\n  }\n\n  return obj;\n};\n/**\n * Returns a new iterator over array, between indexes start and\n * start + length, and only returns entries that pass the accept function\n *\n * @param {!Array} array the array to iterate over.\n * @param {number} start the first index to iterate over, 0 if absent.\n * @param {number} length the number of elements in the array to iterate over.\n *     This, along with start, defines a slice of the array, and so length\n *     doesn't imply the number of elements in the iterator when accept doesn't\n *     always accept all values. array.length when absent.\n * @param {function(?):boolean=} opt_predicate a function that takes\n *     parameters array and idx, which returns true when the element should be\n *     returned.  If omitted, all elements are accepted.\n * @private\n */\n\n\nfunction createIterator(array, start, length, opt_predicate) {\n  return new Iterator(array, start, length, opt_predicate);\n}\n\n; // Shim layer with setTimeout fallback.\n// From: http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n// Should be called with the window context:\n//   Dygraph.requestAnimFrame.call(window, function() {})\n\nvar requestAnimFrame = function () {\n  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n    window.setTimeout(callback, 1000 / 60);\n  };\n}();\n\nexports.requestAnimFrame = requestAnimFrame;\n/**\n * Call a function at most maxFrames times at an attempted interval of\n * framePeriodInMillis, then call a cleanup function once. repeatFn is called\n * once immediately, then at most (maxFrames - 1) times asynchronously. If\n * maxFrames==1, then cleanup_fn() is also called synchronously.  This function\n * is used to sequence animation.\n * @param {function(number)} repeatFn Called repeatedly -- takes the frame\n *     number (from 0 to maxFrames-1) as an argument.\n * @param {number} maxFrames The max number of times to call repeatFn\n * @param {number} framePeriodInMillis Max requested time between frames.\n * @param {function()} cleanupFn A function to call after all repeatFn calls.\n * @private\n */\n\nfunction repeatAndCleanup(repeatFn, maxFrames, framePeriodInMillis, cleanupFn) {\n  var frameNumber = 0;\n  var previousFrameNumber;\n  var startTime = new Date().getTime();\n  repeatFn(frameNumber);\n\n  if (maxFrames == 1) {\n    cleanupFn();\n    return;\n  }\n\n  var maxFrameArg = maxFrames - 1;\n\n  (function loop() {\n    if (frameNumber >= maxFrames) return;\n    requestAnimFrame.call(window, function () {\n      // Determine which frame to draw based on the delay so far.  Will skip\n      // frames if necessary.\n      var currentTime = new Date().getTime();\n      var delayInMillis = currentTime - startTime;\n      previousFrameNumber = frameNumber;\n      frameNumber = Math.floor(delayInMillis / framePeriodInMillis);\n      var frameDelta = frameNumber - previousFrameNumber; // If we predict that the subsequent repeatFn call will overshoot our\n      // total frame target, so our last call will cause a stutter, then jump to\n      // the last call immediately.  If we're going to cause a stutter, better\n      // to do it faster than slower.\n\n      var predictOvershootStutter = frameNumber + frameDelta > maxFrameArg;\n\n      if (predictOvershootStutter || frameNumber >= maxFrameArg) {\n        repeatFn(maxFrameArg); // Ensure final call with maxFrameArg.\n\n        cleanupFn();\n      } else {\n        if (frameDelta !== 0) {\n          // Don't call repeatFn with duplicate frames.\n          repeatFn(frameNumber);\n        }\n\n        loop();\n      }\n    });\n  })();\n}\n\n; // A whitelist of options that do not change pixel positions.\n\nvar pixelSafeOptions = {\n  'annotationClickHandler': true,\n  'annotationDblClickHandler': true,\n  'annotationMouseOutHandler': true,\n  'annotationMouseOverHandler': true,\n  'axisLineColor': true,\n  'axisLineWidth': true,\n  'clickCallback': true,\n  'drawCallback': true,\n  'drawHighlightPointCallback': true,\n  'drawPoints': true,\n  'drawPointCallback': true,\n  'drawGrid': true,\n  'fillAlpha': true,\n  'gridLineColor': true,\n  'gridLineWidth': true,\n  'hideOverlayOnMouseOut': true,\n  'highlightCallback': true,\n  'highlightCircleSize': true,\n  'interactionModel': true,\n  'labelsDiv': true,\n  'labelsKMB': true,\n  'labelsKMG2': true,\n  'labelsSeparateLines': true,\n  'labelsShowZeroValues': true,\n  'legend': true,\n  'panEdgeFraction': true,\n  'pixelsPerYLabel': true,\n  'pointClickCallback': true,\n  'pointSize': true,\n  'rangeSelectorPlotFillColor': true,\n  'rangeSelectorPlotFillGradientColor': true,\n  'rangeSelectorPlotStrokeColor': true,\n  'rangeSelectorBackgroundStrokeColor': true,\n  'rangeSelectorBackgroundLineWidth': true,\n  'rangeSelectorPlotLineWidth': true,\n  'rangeSelectorForegroundStrokeColor': true,\n  'rangeSelectorForegroundLineWidth': true,\n  'rangeSelectorAlpha': true,\n  'showLabelsOnHighlight': true,\n  'showRoller': true,\n  'strokeWidth': true,\n  'underlayCallback': true,\n  'unhighlightCallback': true,\n  'zoomCallback': true\n};\n/**\n * This function will scan the option list and determine if they\n * require us to recalculate the pixel positions of each point.\n * TODO: move this into dygraph-options.js\n * @param {!Array.<string>} labels a list of options to check.\n * @param {!Object} attrs\n * @return {boolean} true if the graph needs new points else false.\n * @private\n */\n\nfunction isPixelChangingOptionList(labels, attrs) {\n  // Assume that we do not require new points.\n  // This will change to true if we actually do need new points.\n  // Create a dictionary of series names for faster lookup.\n  // If there are no labels, then the dictionary stays empty.\n  var seriesNamesDictionary = {};\n\n  if (labels) {\n    for (var i = 1; i < labels.length; i++) {\n      seriesNamesDictionary[labels[i]] = true;\n    }\n  } // Scan through a flat (i.e. non-nested) object of options.\n  // Returns true/false depending on whether new points are needed.\n\n\n  var scanFlatOptions = function scanFlatOptions(options) {\n    for (var property in options) {\n      if (options.hasOwnProperty(property) && !pixelSafeOptions[property]) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // Iterate through the list of updated options.\n\n\n  for (var property in attrs) {\n    if (!attrs.hasOwnProperty(property)) continue; // Find out of this field is actually a series specific options list.\n\n    if (property == 'highlightSeriesOpts' || seriesNamesDictionary[property] && !attrs.series) {\n      // This property value is a list of options for this series.\n      if (scanFlatOptions(attrs[property])) return true;\n    } else if (property == 'series' || property == 'axes') {\n      // This is twice-nested options list.\n      var perSeries = attrs[property];\n\n      for (var series in perSeries) {\n        if (perSeries.hasOwnProperty(series) && scanFlatOptions(perSeries[series])) {\n          return true;\n        }\n      }\n    } else {\n      // If this was not a series specific option list, check if it's a pixel\n      // changing property.\n      if (!pixelSafeOptions[property]) return true;\n    }\n  }\n\n  return false;\n}\n\n;\nvar Circles = {\n  DEFAULT: function DEFAULT(g, name, ctx, canvasx, canvasy, color, radius) {\n    ctx.beginPath();\n    ctx.fillStyle = color;\n    ctx.arc(canvasx, canvasy, radius, 0, 2 * Math.PI, false);\n    ctx.fill();\n  } // For more shapes, include extras/shapes.js\n\n};\nexports.Circles = Circles;\n/**\n * Determine whether |data| is delimited by CR, CRLF, LF, LFCR.\n * @param {string} data\n * @return {?string} the delimiter that was detected (or null on failure).\n */\n\nfunction detectLineDelimiter(data) {\n  for (var i = 0; i < data.length; i++) {\n    var code = data.charAt(i);\n\n    if (code === '\\r') {\n      // Might actually be \"\\r\\n\".\n      if (i + 1 < data.length && data.charAt(i + 1) === '\\n') {\n        return '\\r\\n';\n      }\n\n      return code;\n    }\n\n    if (code === '\\n') {\n      // Might actually be \"\\n\\r\".\n      if (i + 1 < data.length && data.charAt(i + 1) === '\\r') {\n        return '\\n\\r';\n      }\n\n      return code;\n    }\n  }\n\n  return null;\n}\n\n;\n/**\n * Is one node contained by another?\n * @param {Node} containee The contained node.\n * @param {Node} container The container node.\n * @return {boolean} Whether containee is inside (or equal to) container.\n * @private\n */\n\nfunction isNodeContainedBy(containee, container) {\n  if (container === null || containee === null) {\n    return false;\n  }\n\n  var containeeNode =\n  /** @type {Node} */\n  containee;\n\n  while (containeeNode && containeeNode !== container) {\n    containeeNode = containeeNode.parentNode;\n  }\n\n  return containeeNode === container;\n}\n\n; // This masks some numeric issues in older versions of Firefox,\n// where 1.0/Math.pow(10,2) != Math.pow(10,-2).\n\n/** @type {function(number,number):number} */\n\nfunction pow(base, exp) {\n  if (exp < 0) {\n    return 1.0 / Math.pow(base, -exp);\n  }\n\n  return Math.pow(base, exp);\n}\n\n;\nvar RGBA_RE = /^rgba?\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})(?:,\\s*([01](?:\\.\\d+)?))?\\)$/;\n/**\n * Helper for toRGB_ which parses strings of the form:\n * rgb(123, 45, 67)\n * rgba(123, 45, 67, 0.5)\n * @return parsed {r,g,b,a?} tuple or null.\n */\n\nfunction parseRGBA(rgbStr) {\n  var bits = RGBA_RE.exec(rgbStr);\n  if (!bits) return null;\n  var r = parseInt(bits[1], 10),\n      g = parseInt(bits[2], 10),\n      b = parseInt(bits[3], 10);\n\n  if (bits[4]) {\n    return {\n      r: r,\n      g: g,\n      b: b,\n      a: parseFloat(bits[4])\n    };\n  } else {\n    return {\n      r: r,\n      g: g,\n      b: b\n    };\n  }\n}\n/**\n * Converts any valid CSS color (hex, rgb(), named color) to an RGB tuple.\n *\n * @param {!string} colorStr Any valid CSS color string.\n * @return {{r:number,g:number,b:number,a:number?}} Parsed RGB tuple.\n * @private\n */\n\n\nfunction toRGB_(colorStr) {\n  // Strategy: First try to parse colorStr directly. This is fast & avoids DOM\n  // manipulation.  If that fails (e.g. for named colors like 'red'), then\n  // create a hidden DOM element and parse its computed color.\n  var rgb = parseRGBA(colorStr);\n  if (rgb) return rgb;\n  var div = document.createElement('div');\n  div.style.backgroundColor = colorStr;\n  div.style.visibility = 'hidden';\n  document.body.appendChild(div);\n  var rgbStr = window.getComputedStyle(div, null).backgroundColor;\n  document.body.removeChild(div);\n  return parseRGBA(rgbStr);\n}\n\n;\n/**\n * Checks whether the browser supports the &lt;canvas&gt; tag.\n * @param {HTMLCanvasElement=} opt_canvasElement Pass a canvas element as an\n *     optimization if you have one.\n * @return {boolean} Whether the browser supports canvas.\n */\n\nfunction isCanvasSupported(opt_canvasElement) {\n  try {\n    var canvas = opt_canvasElement || document.createElement(\"canvas\");\n    canvas.getContext(\"2d\");\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\n;\n/**\n * Parses the value as a floating point number. This is like the parseFloat()\n * built-in, but with a few differences:\n * - the empty string is parsed as null, rather than NaN.\n * - if the string cannot be parsed at all, an error is logged.\n * If the string can't be parsed, this method returns null.\n * @param {string} x The string to be parsed\n * @param {number=} opt_line_no The line number from which the string comes.\n * @param {string=} opt_line The text of the line from which the string comes.\n */\n\nfunction parseFloat_(x, opt_line_no, opt_line) {\n  var val = parseFloat(x);\n  if (!isNaN(val)) return val; // Try to figure out what happeend.\n  // If the value is the empty string, parse it as null.\n\n  if (/^ *$/.test(x)) return null; // If it was actually \"NaN\", return it as NaN.\n\n  if (/^ *nan *$/i.test(x)) return NaN; // Looks like a parsing error.\n\n  var msg = \"Unable to parse '\" + x + \"' as a number\";\n\n  if (opt_line !== undefined && opt_line_no !== undefined) {\n    msg += \" on line \" + (1 + (opt_line_no || 0)) + \" ('\" + opt_line + \"') of CSV.\";\n  }\n\n  console.error(msg);\n  return null;\n}\n\n; // Label constants for the labelsKMB and labelsKMG2 options.\n// (i.e. '100000' -> '100K')\n\nvar KMB_LABELS = ['K', 'M', 'B', 'T', 'Q'];\nvar KMG2_BIG_LABELS = ['k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\nvar KMG2_SMALL_LABELS = ['m', 'u', 'n', 'p', 'f', 'a', 'z', 'y'];\n/**\n * @private\n * Return a string version of a number. This respects the digitsAfterDecimal\n * and maxNumberWidth options.\n * @param {number} x The number to be formatted\n * @param {Dygraph} opts An options view\n */\n\nfunction numberValueFormatter(x, opts) {\n  var sigFigs = opts('sigFigs');\n\n  if (sigFigs !== null) {\n    // User has opted for a fixed number of significant figures.\n    return floatFormat(x, sigFigs);\n  }\n\n  var digits = opts('digitsAfterDecimal');\n  var maxNumberWidth = opts('maxNumberWidth');\n  var kmb = opts('labelsKMB');\n  var kmg2 = opts('labelsKMG2');\n  var label; // switch to scientific notation if we underflow or overflow fixed display.\n\n  if (x !== 0.0 && (Math.abs(x) >= Math.pow(10, maxNumberWidth) || Math.abs(x) < Math.pow(10, -digits))) {\n    label = x.toExponential(digits);\n  } else {\n    label = '' + round_(x, digits);\n  }\n\n  if (kmb || kmg2) {\n    var k;\n    var k_labels = [];\n    var m_labels = [];\n\n    if (kmb) {\n      k = 1000;\n      k_labels = KMB_LABELS;\n    }\n\n    if (kmg2) {\n      if (kmb) console.warn(\"Setting both labelsKMB and labelsKMG2. Pick one!\");\n      k = 1024;\n      k_labels = KMG2_BIG_LABELS;\n      m_labels = KMG2_SMALL_LABELS;\n    }\n\n    var absx = Math.abs(x);\n    var n = pow(k, k_labels.length);\n\n    for (var j = k_labels.length - 1; j >= 0; j--, n /= k) {\n      if (absx >= n) {\n        label = round_(x / n, digits) + k_labels[j];\n        break;\n      }\n    }\n\n    if (kmg2) {\n      // TODO(danvk): clean up this logic. Why so different than kmb?\n      var x_parts = String(x.toExponential()).split('e-');\n\n      if (x_parts.length === 2 && x_parts[1] >= 3 && x_parts[1] <= 24) {\n        if (x_parts[1] % 3 > 0) {\n          label = round_(x_parts[0] / pow(10, x_parts[1] % 3), digits);\n        } else {\n          label = Number(x_parts[0]).toFixed(2);\n        }\n\n        label += m_labels[Math.floor(x_parts[1] / 3) - 1];\n      }\n    }\n  }\n\n  return label;\n}\n\n;\n/**\n * variant for use as an axisLabelFormatter.\n * @private\n */\n\nfunction numberAxisLabelFormatter(x, granularity, opts) {\n  return numberValueFormatter.call(this, x, opts);\n}\n\n;\n/**\n * @type {!Array.<string>}\n * @private\n * @constant\n */\n\nvar SHORT_MONTH_NAMES_ = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n/**\n * Convert a JS date to a string appropriate to display on an axis that\n * is displaying values at the stated granularity. This respects the\n * labelsUTC option.\n * @param {Date} date The date to format\n * @param {number} granularity One of the Dygraph granularity constants\n * @param {Dygraph} opts An options view\n * @return {string} The date formatted as local time\n * @private\n */\n\nfunction dateAxisLabelFormatter(date, granularity, opts) {\n  var utc = opts('labelsUTC');\n  var accessors = utc ? DateAccessorsUTC : DateAccessorsLocal;\n  var year = accessors.getFullYear(date),\n      month = accessors.getMonth(date),\n      day = accessors.getDate(date),\n      hours = accessors.getHours(date),\n      mins = accessors.getMinutes(date),\n      secs = accessors.getSeconds(date),\n      millis = accessors.getMilliseconds(date);\n\n  if (granularity >= DygraphTickers.Granularity.DECADAL) {\n    return '' + year;\n  } else if (granularity >= DygraphTickers.Granularity.MONTHLY) {\n    return SHORT_MONTH_NAMES_[month] + '&#160;' + year;\n  } else {\n    var frac = hours * 3600 + mins * 60 + secs + 1e-3 * millis;\n\n    if (frac === 0 || granularity >= DygraphTickers.Granularity.DAILY) {\n      // e.g. '21 Jan' (%d%b)\n      return zeropad(day) + '&#160;' + SHORT_MONTH_NAMES_[month];\n    } else if (granularity < DygraphTickers.Granularity.SECONDLY) {\n      // e.g. 40.310 (meaning 40 seconds and 310 milliseconds)\n      var str = \"\" + millis;\n      return zeropad(secs) + \".\" + ('000' + str).substring(str.length);\n    } else if (granularity > DygraphTickers.Granularity.MINUTELY) {\n      return hmsString_(hours, mins, secs, 0);\n    } else {\n      return hmsString_(hours, mins, secs, millis);\n    }\n  }\n}\n\n; // alias in case anyone is referencing the old method.\n// Dygraph.dateAxisFormatter = Dygraph.dateAxisLabelFormatter;\n\n/**\n * Return a string version of a JS date for a value label. This respects the\n * labelsUTC option.\n * @param {Date} date The date to be formatted\n * @param {Dygraph} opts An options view\n * @private\n */\n\nfunction dateValueFormatter(d, opts) {\n  return dateString_(d, opts('labelsUTC'));\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}