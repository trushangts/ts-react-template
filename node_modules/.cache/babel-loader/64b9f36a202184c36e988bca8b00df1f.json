{"ast":null,"code":"/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/**\n * @fileoverview DataHandler base implementation for the \"bar\" \n * data formats. This implementation must be extended and the\n * extractSeries and rollingAverage must be implemented.\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n */\n\n/*global Dygraph:false */\n\n/*global DygraphLayout:false */\n\"use strict\";\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _datahandler = require('./datahandler');\n\nvar _datahandler2 = _interopRequireDefault(_datahandler);\n\nvar _dygraphLayout = require('../dygraph-layout');\n\nvar _dygraphLayout2 = _interopRequireDefault(_dygraphLayout);\n/**\n * @constructor\n * @extends {Dygraph.DataHandler}\n */\n\n\nvar BarsHandler = function BarsHandler() {\n  _datahandler2['default'].call(this);\n};\n\nBarsHandler.prototype = new _datahandler2['default'](); // TODO(danvk): figure out why the jsdoc has to be copy/pasted from superclass.\n//   (I get closure compiler errors if this isn't here.)\n\n/**\n * @override\n * @param {!Array.<Array>} rawData The raw data passed into dygraphs where \n *     rawData[i] = [x,ySeries1,...,ySeriesN].\n * @param {!number} seriesIndex Index of the series to extract. All other\n *     series should be ignored.\n * @param {!DygraphOptions} options Dygraph options.\n * @return {Array.<[!number,?number,?]>} The series in the unified data format\n *     where series[i] = [x,y,{extras}]. \n */\n\nBarsHandler.prototype.extractSeries = function (rawData, seriesIndex, options) {// Not implemented here must be extended\n};\n/**\n * @override\n * @param {!Array.<[!number,?number,?]>} series The series in the unified \n *          data format where series[i] = [x,y,{extras}].\n * @param {!number} rollPeriod The number of points over which to average the data\n * @param {!DygraphOptions} options The dygraph options.\n * TODO(danvk): be more specific than \"Array\" here.\n * @return {!Array.<[!number,?number,?]>} the rolled series.\n */\n\n\nBarsHandler.prototype.rollingAverage = function (series, rollPeriod, options) {// Not implemented here, must be extended.\n};\n/** @inheritDoc */\n\n\nBarsHandler.prototype.onPointsCreated_ = function (series, points) {\n  for (var i = 0; i < series.length; ++i) {\n    var item = series[i];\n    var point = points[i];\n    point.y_top = NaN;\n    point.y_bottom = NaN;\n    point.yval_minus = _datahandler2['default'].parseFloat(item[2][0]);\n    point.yval_plus = _datahandler2['default'].parseFloat(item[2][1]);\n  }\n};\n/** @inheritDoc */\n\n\nBarsHandler.prototype.getExtremeYValues = function (series, dateWindow, options) {\n  var minY = null,\n      maxY = null,\n      y;\n  var firstIdx = 0;\n  var lastIdx = series.length - 1;\n\n  for (var j = firstIdx; j <= lastIdx; j++) {\n    y = series[j][1];\n    if (y === null || isNaN(y)) continue;\n    var low = series[j][2][0];\n    var high = series[j][2][1];\n    if (low > y) low = y; // this can happen with custom bars,\n\n    if (high < y) high = y; // e.g. in tests/custom-bars.html\n\n    if (maxY === null || high > maxY) maxY = high;\n    if (minY === null || low < minY) minY = low;\n  }\n\n  return [minY, maxY];\n};\n/** @inheritDoc */\n\n\nBarsHandler.prototype.onLineEvaluated = function (points, axis, logscale) {\n  var point;\n\n  for (var j = 0; j < points.length; j++) {\n    // Copy over the error terms\n    point = points[j];\n    point.y_top = _dygraphLayout2['default'].calcYNormal_(axis, point.yval_minus, logscale);\n    point.y_bottom = _dygraphLayout2['default'].calcYNormal_(axis, point.yval_plus, logscale);\n  }\n};\n\nexports['default'] = BarsHandler;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}