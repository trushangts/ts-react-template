{"ast":null,"code":"(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // Node/CommonJS\n    factory(require('jquery'));\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  var ua = navigator.userAgent,\n      iPhone = /iphone/i.test(ua),\n      chrome = /chrome/i.test(ua),\n      android = /android/i.test(ua),\n      caretTimeoutId;\n  $.mask = {\n    //Predefined character definitions\n    definitions: {\n      '9': \"[0-9]\",\n      'a': \"[A-Za-z]\",\n      '*': \"[A-Za-z0-9]\"\n    },\n    autoclear: true,\n    dataName: \"rawMaskFn\",\n    placeholder: '_'\n  };\n  $.fn.extend({\n    //Helper Function for Caret positioning\n    caret: function caret(begin, end) {\n      var range;\n\n      if (this.length === 0 || this.is(\":hidden\") || this.get(0) !== document.activeElement) {\n        return;\n      }\n\n      if (typeof begin == 'number') {\n        end = typeof end === 'number' ? end : begin;\n        return this.each(function () {\n          if (this.setSelectionRange) {\n            this.setSelectionRange(begin, end);\n          } else if (this.createTextRange) {\n            range = this.createTextRange();\n            range.collapse(true);\n            range.moveEnd('character', end);\n            range.moveStart('character', begin);\n            range.select();\n          }\n        });\n      } else {\n        if (this[0].setSelectionRange) {\n          begin = this[0].selectionStart;\n          end = this[0].selectionEnd;\n        } else if (document.selection && document.selection.createRange) {\n          range = document.selection.createRange();\n          begin = 0 - range.duplicate().moveStart('character', -100000);\n          end = begin + range.text.length;\n        }\n\n        return {\n          begin: begin,\n          end: end\n        };\n      }\n    },\n    unmask: function unmask() {\n      return this.trigger(\"unmask\");\n    },\n    mask: function mask(_mask, settings) {\n      var input, defs, tests, partialPosition, firstNonMaskPos, lastRequiredNonMaskPos, len, oldVal;\n\n      if (!_mask && this.length > 0) {\n        input = $(this[0]);\n        var fn = input.data($.mask.dataName);\n        return fn ? fn() : undefined;\n      }\n\n      settings = $.extend({\n        autoclear: $.mask.autoclear,\n        placeholder: $.mask.placeholder,\n        // Load default placeholder\n        completed: null\n      }, settings);\n      defs = $.mask.definitions;\n      tests = [];\n      partialPosition = len = _mask.length;\n      firstNonMaskPos = null;\n      _mask = String(_mask);\n      $.each(_mask.split(\"\"), function (i, c) {\n        if (c == '?') {\n          len--;\n          partialPosition = i;\n        } else if (defs[c]) {\n          tests.push(new RegExp(defs[c]));\n\n          if (firstNonMaskPos === null) {\n            firstNonMaskPos = tests.length - 1;\n          }\n\n          if (i < partialPosition) {\n            lastRequiredNonMaskPos = tests.length - 1;\n          }\n        } else {\n          tests.push(null);\n        }\n      });\n      return this.trigger(\"unmask\").each(function () {\n        var input = $(this),\n            buffer = $.map(_mask.split(\"\"), function (c, i) {\n          if (c != '?') {\n            return defs[c] ? getPlaceholder(i) : c;\n          }\n        }),\n            defaultBuffer = buffer.join(''),\n            focusText = input.val();\n\n        function tryFireCompleted() {\n          if (!settings.completed) {\n            return;\n          }\n\n          for (var i = firstNonMaskPos; i <= lastRequiredNonMaskPos; i++) {\n            if (tests[i] && buffer[i] === getPlaceholder(i)) {\n              return;\n            }\n          }\n\n          settings.completed.call(input);\n        }\n\n        function getPlaceholder(i) {\n          if (i < settings.placeholder.length) return settings.placeholder.charAt(i);\n          return settings.placeholder.charAt(0);\n        }\n\n        function seekNext(pos) {\n          while (++pos < len && !tests[pos]) {\n            ;\n          }\n\n          return pos;\n        }\n\n        function seekPrev(pos) {\n          while (--pos >= 0 && !tests[pos]) {\n            ;\n          }\n\n          return pos;\n        }\n\n        function shiftL(begin, end) {\n          var i, j;\n\n          if (begin < 0) {\n            return;\n          }\n\n          for (i = begin, j = seekNext(end); i < len; i++) {\n            if (tests[i]) {\n              if (j < len && tests[i].test(buffer[j])) {\n                buffer[i] = buffer[j];\n                buffer[j] = getPlaceholder(j);\n              } else {\n                break;\n              }\n\n              j = seekNext(j);\n            }\n          }\n\n          writeBuffer();\n          input.caret(Math.max(firstNonMaskPos, begin));\n        }\n\n        function shiftR(pos) {\n          var i, c, j, t;\n\n          for (i = pos, c = getPlaceholder(pos); i < len; i++) {\n            if (tests[i]) {\n              j = seekNext(i);\n              t = buffer[i];\n              buffer[i] = c;\n\n              if (j < len && tests[j].test(t)) {\n                c = t;\n              } else {\n                break;\n              }\n            }\n          }\n        }\n\n        function androidInputEvent(e) {\n          var curVal = input.val();\n          var pos = input.caret();\n\n          if (oldVal && oldVal.length && oldVal.length > curVal.length) {\n            // a deletion or backspace happened\n            checkVal(true);\n\n            while (pos.begin > 0 && !tests[pos.begin - 1]) {\n              pos.begin--;\n            }\n\n            if (pos.begin === 0) {\n              while (pos.begin < firstNonMaskPos && !tests[pos.begin]) {\n                pos.begin++;\n              }\n            }\n\n            input.caret(pos.begin, pos.begin);\n          } else {\n            var pos2 = checkVal(true);\n            var lastEnteredValue = curVal.charAt(pos.begin);\n\n            if (pos.begin < len) {\n              if (!tests[pos.begin]) {\n                pos.begin++;\n\n                if (tests[pos.begin].test(lastEnteredValue)) {\n                  pos.begin++;\n                }\n              } else {\n                if (tests[pos.begin].test(lastEnteredValue)) {\n                  pos.begin++;\n                }\n              }\n            }\n\n            input.caret(pos.begin, pos.begin);\n          }\n\n          tryFireCompleted();\n        }\n\n        function blurEvent(e) {\n          checkVal();\n          if (input.val() != focusText) input.change();\n        }\n\n        function keydownEvent(e) {\n          if (input.prop(\"readonly\")) {\n            return;\n          }\n\n          var k = e.which || e.keyCode,\n              pos,\n              begin,\n              end;\n          oldVal = input.val(); //backspace, delete, and escape get special treatment\n\n          if (k === 8 || k === 46 || iPhone && k === 127) {\n            pos = input.caret();\n            begin = pos.begin;\n            end = pos.end;\n\n            if (end - begin === 0) {\n              begin = k !== 46 ? seekPrev(begin) : end = seekNext(begin - 1);\n              end = k === 46 ? seekNext(end) : end;\n            }\n\n            clearBuffer(begin, end);\n            shiftL(begin, end - 1);\n            e.preventDefault();\n          } else if (k === 13) {\n            // enter\n            blurEvent.call(this, e);\n          } else if (k === 27) {\n            // escape\n            input.val(focusText);\n            input.caret(0, checkVal());\n            e.preventDefault();\n          }\n        }\n\n        function keypressEvent(e) {\n          if (input.prop(\"readonly\")) {\n            return;\n          }\n\n          var k = e.which || e.keyCode,\n              pos = input.caret(),\n              p,\n              c,\n              next;\n\n          if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {\n            //Ignore\n            return;\n          } else if (k && k !== 13) {\n            if (pos.end - pos.begin !== 0) {\n              clearBuffer(pos.begin, pos.end);\n              shiftL(pos.begin, pos.end - 1);\n            }\n\n            p = seekNext(pos.begin - 1);\n\n            if (p < len) {\n              c = String.fromCharCode(k);\n\n              if (tests[p].test(c)) {\n                shiftR(p);\n                buffer[p] = c;\n                writeBuffer();\n                next = seekNext(p);\n\n                if (android) {\n                  //Path for CSP Violation on FireFox OS 1.1\n                  var proxy = function proxy() {\n                    $.proxy($.fn.caret, input, next)();\n                  };\n\n                  setTimeout(proxy, 0);\n                } else {\n                  input.caret(next);\n                }\n\n                if (pos.begin <= lastRequiredNonMaskPos) {\n                  tryFireCompleted();\n                }\n              }\n            }\n\n            e.preventDefault();\n          }\n        }\n\n        function clearBuffer(start, end) {\n          var i;\n\n          for (i = start; i < end && i < len; i++) {\n            if (tests[i]) {\n              buffer[i] = getPlaceholder(i);\n            }\n          }\n        }\n\n        function writeBuffer() {\n          input.val(buffer.join(''));\n        }\n\n        function checkVal(allow) {\n          //try to place characters where they belong\n          var test = input.val(),\n              lastMatch = -1,\n              i,\n              c,\n              pos;\n\n          for (i = 0, pos = 0; i < len; i++) {\n            if (tests[i]) {\n              buffer[i] = getPlaceholder(i);\n\n              while (pos++ < test.length) {\n                c = test.charAt(pos - 1);\n\n                if (tests[i].test(c)) {\n                  buffer[i] = c;\n                  lastMatch = i;\n                  break;\n                }\n              }\n\n              if (pos > test.length) {\n                clearBuffer(i + 1, len);\n                break;\n              }\n            } else {\n              if (buffer[i] === test.charAt(pos)) {\n                pos++;\n              }\n\n              if (i < partialPosition) {\n                lastMatch = i;\n              }\n            }\n          }\n\n          if (allow) {\n            writeBuffer();\n          } else if (lastMatch + 1 < partialPosition) {\n            if (settings.autoclear || buffer.join('') === defaultBuffer) {\n              // Invalid value. Remove it and replace it with the\n              // mask, which is the default behavior.\n              if (input.val()) input.val(\"\");\n              clearBuffer(0, len);\n            } else {\n              // Invalid value, but we opt to show the value to the\n              // user and allow them to correct their mistake.\n              writeBuffer();\n            }\n          } else {\n            writeBuffer();\n            input.val(input.val().substring(0, lastMatch + 1));\n          }\n\n          return partialPosition ? i : firstNonMaskPos;\n        }\n\n        input.data($.mask.dataName, function () {\n          return $.map(buffer, function (c, i) {\n            return tests[i] && c != getPlaceholder(i) ? c : null;\n          }).join('');\n        });\n        input.one(\"unmask\", function () {\n          input.off(\".mask\").removeData($.mask.dataName);\n        }).on(\"focus.mask\", function () {\n          if (input.prop(\"readonly\")) {\n            return;\n          }\n\n          clearTimeout(caretTimeoutId);\n          var pos;\n          focusText = input.val();\n          pos = checkVal();\n          caretTimeoutId = setTimeout(function () {\n            if (input.get(0) !== document.activeElement) {\n              return;\n            }\n\n            writeBuffer();\n\n            if (pos == _mask.replace(\"?\", \"\").length) {\n              input.caret(0, pos);\n            } else {\n              input.caret(pos);\n            }\n          }, 10);\n        }).on(\"blur.mask\", blurEvent).on(\"keydown.mask\", keydownEvent).on(\"keypress.mask\", keypressEvent).on(\"input.mask paste.mask\", function () {\n          if (input.prop(\"readonly\")) {\n            return;\n          }\n\n          setTimeout(function () {\n            var pos = checkVal(true);\n            input.caret(pos);\n            tryFireCompleted();\n          }, 0);\n        });\n\n        if (chrome && android) {\n          input.off('input.mask').on('input.mask', androidInputEvent);\n        }\n\n        checkVal(); //Perform initial check for existing values\n      });\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"script"}