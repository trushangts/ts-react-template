{"ast":null,"code":"import _classCallCheck from \"/opt/lampp/htdocs/reactApp/React_16.x/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/lampp/htdocs/reactApp/React_16.x/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/lampp/htdocs/reactApp/React_16.x/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/lampp/htdocs/reactApp/React_16.x/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/lampp/htdocs/reactApp/React_16.x/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/lampp/htdocs/reactApp/React_16.x/src/common/voice-control/components/SpeechButton.js\";\nimport React from \"react\";\nimport { Popover, OverlayTrigger } from \"react-bootstrap\";\nimport { bindActionCreators } from \"redux\";\nimport * as VoiceActions from \"../VoiceActions\";\nimport { connect } from \"react-redux\";\nimport SpeechHelp from \"./SpeechHelp\";\n\nvar SpeechButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SpeechButton, _React$Component);\n\n  function SpeechButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SpeechButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SpeechButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.hidePopover = function () {\n      _this.refs.vpOverlay.hide();\n    };\n\n    _this.voiceControlToggle = function (e) {\n      if (_this.props.started) {\n        _this.hidePopover();\n\n        _this.props.voiceControlOff();\n      } else {\n        _this.props.voiceControlOn();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SpeechButton, [{\n    key: \"render\",\n    value: function render() {\n      var popover = React.createElement(Popover, {\n        ref: \"popover\",\n        id: \"popover-basic\",\n        placement: \"bottom\",\n        title: null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, !this.props.hasError ? React.createElement(\"h4\", {\n        className: \"vc-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"Voice command activated \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }), React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"Please speak clearly into the mic\")) : React.createElement(\"h4\", {\n        className: \"vc-title-error text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-microphone-slash\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }), \" Voice command failed\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }), React.createElement(\"small\", {\n        className: \"txt-color-red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Must \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"\\\"Allow\\\"\"), \" Microphone\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), React.createElement(\"small\", {\n        className: \"txt-color-red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Must have \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"Internet Connection\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#/\",\n        className: \"btn btn-success\",\n        id: \"speech-help-btn\",\n        onClick: this.props.voiceControlShowHelp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"See Commands\"), React.createElement(\"a\", {\n        href: \"#/\",\n        className: \"btn bg-color-purple txt-color-white\",\n        onClick: this.hidePopover,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Close Popup\")));\n      return React.createElement(\"div\", {\n        id: \"speech-btn\",\n        className: this.props.className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(OverlayTrigger, {\n        trigger: this.props.started ? null : \"click\",\n        placement: \"bottom\",\n        ref: \"vpOverlay\",\n        overlay: popover,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#/\",\n        onClick: this.voiceControlToggle,\n        title: \"Voice Command\",\n        id: \"voice-command-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-microphone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })))), React.createElement(SpeechHelp, {\n        showHelp: this.props.showHelp,\n        onHide: this.props.voiceControlHideHelp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SpeechButton;\n}(React.Component);\n\nexport default connect(function (state) {\n  return state.voice;\n}, function (dispatch) {\n  return bindActionCreators(VoiceActions, dispatch);\n})(SpeechButton);","map":{"version":3,"sources":["/opt/lampp/htdocs/reactApp/React_16.x/src/common/voice-control/components/SpeechButton.js"],"names":["React","Popover","OverlayTrigger","bindActionCreators","VoiceActions","connect","SpeechHelp","SpeechButton","hidePopover","refs","vpOverlay","hide","voiceControlToggle","e","props","started","voiceControlOff","voiceControlOn","popover","hasError","voiceControlShowHelp","className","showHelp","voiceControlHideHelp","Component","state","voice","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Popover, OverlayTrigger } from \"react-bootstrap\";\n\nimport { bindActionCreators } from \"redux\";\nimport * as VoiceActions from \"../VoiceActions\";\nimport { connect } from \"react-redux\";\n\nimport SpeechHelp from \"./SpeechHelp\";\n\nclass SpeechButton extends React.Component {\n  hidePopover = () => {\n    this.refs.vpOverlay.hide();\n  };\n\n  render() {\n    const popover = (\n      <Popover ref=\"popover\" id=\"popover-basic\" placement=\"bottom\" title={null}>\n        {!this.props.hasError ? (\n          <h4 className=\"vc-title\">\n            Voice command activated <br />\n            <small>Please speak clearly into the mic</small>\n          </h4>\n        ) : (\n          <h4 className=\"vc-title-error text-center\">\n            <i className=\"fa fa-microphone-slash\" /> Voice command failed\n            <br />\n            <small className=\"txt-color-red\">\n              Must <strong>\"Allow\"</strong> Microphone\n            </small>\n            <br />\n            <small className=\"txt-color-red\">\n              Must have <strong>Internet Connection</strong>\n            </small>\n          </h4>\n        )}\n\n        <div>\n          <a href=\"#/\"\n            className=\"btn btn-success\"\n            id=\"speech-help-btn\"\n            onClick={this.props.voiceControlShowHelp}\n          >\n            See Commands\n          </a>\n          <a href=\"#/\"\n            className=\"btn bg-color-purple txt-color-white\"\n            onClick={this.hidePopover}\n          >\n            Close Popup\n          </a>\n        </div>\n      </Popover>\n    );\n\n    return (\n      <div id=\"speech-btn\" className={this.props.className}>\n        <div>\n          <OverlayTrigger\n            trigger={this.props.started ? null : \"click\"}\n            placement=\"bottom\"\n            ref=\"vpOverlay\"\n            overlay={popover}\n          >\n            <a href=\"#/\"\n              onClick={this.voiceControlToggle}\n              title=\"Voice Command\"\n              id=\"voice-command-btn\"\n            >\n              <i className=\"fa fa-microphone\" />\n            </a>\n          </OverlayTrigger>\n        </div>\n        <SpeechHelp\n          showHelp={this.props.showHelp}\n          onHide={this.props.voiceControlHideHelp}\n        />\n      </div>\n    );\n  }\n\n  voiceControlToggle = e => {\n    if (this.props.started) {\n      this.hidePopover();\n      this.props.voiceControlOff();\n    } else {\n      this.props.voiceControlOn();\n    }\n  };\n}\n\nexport default connect(\n  state => {\n    return state.voice;\n  },\n  dispatch => {\n    return bindActionCreators(VoiceActions, dispatch);\n  }\n)(SpeechButton);\n"]},"metadata":{},"sourceType":"module"}